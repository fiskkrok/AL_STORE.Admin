{
    "pipes": [
        {
            "name": "CeilPipe",
            "id": "pipe-CeilPipe-74284df79c5ce20cebf8ce0d93ffe8369d1d79e6925a8e1f333d95486c5863fe25245ed766c83ebed21d697fc860d1eac6b1f80dcf7c15da979e731f59cab45b",
            "file": "src/app/shared/pipes/ceil-pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "pure": true,
            "ngname": "ceil",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'ceil',\r\n    pure: true,\r\n    standalone: true\r\n})\r\n\r\nexport class CeilPipe implements PipeTransform {\r\n    transform(value: number): number {\r\n        return Math.ceil(value);\r\n\r\n    }\r\n}"
        }
    ],
    "interfaces": [
        {
            "name": "AddPaymentRequest",
            "id": "interface-AddPaymentRequest-4065c829466e6f05d1a9c250d83cf39dd9d23df3279ac5eca75b250ee0f8e1e08cf4b6eafd5f9cedcc7616ee1503079a61674f421d8d05db60f87220c60e6ce4",
            "file": "src/app/core/services/order.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { map, Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { PagedResponse } from '../../shared/models/paged-response.model';\r\nimport { Order, OrderStatus, PaymentStatus } from '../../shared/models/order.model';\r\n\r\nexport interface OrderListParams {\r\n    searchTerm?: string;\r\n    status?: OrderStatus;\r\n    fromDate?: string;\r\n    toDate?: string;\r\n    minTotal?: number;\r\n    maxTotal?: number;\r\n    sortBy?: string;\r\n    sortDirection?: 'asc' | 'desc';\r\n    page?: number;\r\n    pageSize?: number;\r\n}\r\n\r\nexport interface UpdateOrderStatusRequest {\r\n    newStatus: OrderStatus;\r\n}\r\n\r\nexport interface AddPaymentRequest {\r\n    transactionId: string;\r\n    method: string;\r\n    amount: number;\r\n    currency: string;\r\n    status: PaymentStatus;\r\n}\r\n\r\nexport interface UpdateShippingRequest {\r\n    carrier: string;\r\n    trackingNumber: string;\r\n    shippingCost: number;\r\n    currency: string;\r\n    estimatedDeliveryDate: string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n    private readonly apiUrl = environment.apiUrls.admin.orders;\r\n\r\n    constructor(private readonly http: HttpClient) { }\r\n\r\n    getOrder(id: string): Observable<Order> {\r\n        return this.http.get<any>(`${this.apiUrl}/${id}`).pipe(\r\n            map(this.mapOrderFromApi)\r\n        );\r\n    }\r\n\r\n    getOrders(params: any): Observable<any> {\r\n        return this.http.get<any>(this.apiUrl, { params }).pipe(\r\n            map(response => ({\r\n                ...response,\r\n                items: response.items.map(this.mapOrderFromApi)\r\n            }))\r\n        );\r\n    }\r\n\r\n    private mapOrderFromApi(order: any): Order {\r\n        return {\r\n            id: order.id,\r\n            orderNumber: order.orderNumber,\r\n            customerId: order.customerId,\r\n            status: order.status as OrderStatus,\r\n            subtotal: order.subtotal,\r\n            shippingCost: order.shippingCost,\r\n            tax: order.tax,\r\n            total: order.total,\r\n            currency: order.currency,\r\n            shippingAddress: order.shippingAddress,\r\n            billingAddress: order.billingAddress,\r\n            notes: order.notes,\r\n            cancelledAt: order.cancelledAt,\r\n            cancellationReason: order.cancellationReason,\r\n            items: (order.items || []).map((item: any) => ({\r\n                id: item.id,\r\n                productId: item.productId,\r\n                productName: item.productName,\r\n                sku: item.sku,\r\n                variantId: item.variantId,\r\n                quantity: item.quantity,\r\n                unitPrice: item.unitPrice,\r\n                currency: item.currency,\r\n                total: item.total\r\n            })),\r\n            payment: order.payment ? {\r\n                transactionId: order.payment.transactionId,\r\n                method: order.payment.method,\r\n                amount: order.payment.amount,\r\n                currency: order.payment.currency,\r\n                status: order.payment.status as PaymentStatus,\r\n                processedAt: order.payment.processedAt\r\n            } : undefined,\r\n            paymentStatus: order.paymentStatus as PaymentStatus,\r\n            paymentMethod: order.paymentMethod,\r\n            shippingInfo: order.shippingInfo ? {\r\n                carrier: order.shippingInfo.carrier,\r\n                trackingNumber: order.shippingInfo.trackingNumber,\r\n                estimatedDeliveryDate: order.shippingInfo.estimatedDeliveryDate,\r\n                actualDeliveryDate: order.shippingInfo.actualDeliveryDate\r\n            } : undefined,\r\n            createdAt: order.createdAt,\r\n            createdBy: order.createdBy,\r\n            lastModifiedAt: order.lastModifiedAt,\r\n            lastModifiedBy: order.lastModifiedBy\r\n        };\r\n    }\r\n\r\n    updateOrderStatus(orderId: string, request: UpdateOrderStatusRequest): Observable<void> {\r\n        return this.http.put<void>(`${this.apiUrl}/${orderId}/status`, request);\r\n    }\r\n\r\n    addPayment(orderId: string, payment: AddPaymentRequest): Observable<void> {\r\n        return this.http.post<void>(`${this.apiUrl}/${orderId}/payments`, payment);\r\n    }\r\n\r\n    updateShipping(orderId: string, shipping: UpdateShippingRequest): Observable<void> {\r\n        return this.http.put<void>(`${this.apiUrl}/${orderId}/shipping`, shipping);\r\n    }\r\n}",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "method",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaymentStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "transactionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Address",
            "id": "interface-Address-ad37da7a304a8cb0533b19ea3c9063095bf6c6ef44f43139b6432cd07c74fbc3654aa02247f7c0060e5ed6d63961617c677c51a6715189c8d1f466cca58a7f1a",
            "file": "src/app/shared/models/value-object.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Address {\r\n    firstName: string;\r\n    lastName: string;\r\n    addressLine1: string;\r\n    addressLine2?: string;\r\n    city: string;\r\n    state: string;\r\n    postalCode: string;\r\n    country: string;\r\n    phone?: string;\r\n}\r\n\r\n\r\nexport interface Money {\r\n    amount: number;\r\n    currency: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "addressLine1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "addressLine2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "postalCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ApiError",
            "id": "interface-ApiError-9952b3cb0b6209b4337c52de71f17b16f4dee1fa6634929270a879fb5d2fe2ba6463bc053ddeca5f7310f1f8c5143cef9ea77b408e21cfffc7500918c46e459c",
            "file": "src/app/shared/models/error.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ApiError {\r\n    id: string;\r\n    code: string;\r\n    message: string;\r\n    details?: string;\r\n    timestamp: Date;\r\n    severity: 'error' | 'warning' | 'info';\r\n    field?: string;  // For validation errors\r\n    correlationId?: string;  // For tracking error chains\r\n}\r\n\r\nexport type ValidationError = {\r\n    field: string;\r\n    message: string;\r\n    code: string;\r\n}",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "correlationId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "details",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "severity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"error\" | \"warning\" | \"info\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AuditableEntity",
            "id": "interface-AuditableEntity-6140aa8c17d38c00e930bcf7108a96ff952d51a7ab11cd0de8dee809dece857cd29fd70c3c686aa8bf8112c698a9c4946e159936e55a2cc8f6956026cbd62897",
            "file": "src/app/shared/models/auditableEntity.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { UserRef } from \"./user.model\";\r\n\r\n// Base interfaces for common properties\r\nexport interface AuditableEntity {\r\n    createdAt: string;\r\n    createdBy: UserRef | null;\r\n    lastModifiedAt: string | null;\r\n    lastModifiedBy: UserRef | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "createdBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserRef | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "lastModifiedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "lastModifiedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserRef | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AuthState",
            "id": "interface-AuthState-052861d493be537358212d3287080f9e8351a3c9ef476c59623b20372055f9b681db217298021bbecefde0bc8076ea380b40785ddc3a7c2c90f65bf3a998b8f1",
            "file": "src/app/shared/models/auth.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AuthState {\r\n    user: User | null;\r\n    accessToken: string | null;\r\n    isAuthenticated: boolean;\r\n    loading: boolean;\r\n    error: string | null;\r\n    message?: string;\r\n}\r\n\r\nexport interface User {\r\n    id: string;\r\n    username: string;\r\n    email: string;\r\n    firstName?: string;\r\n    lastName?: string;\r\n    roles: string[];\r\n    permissions: string[];\r\n}\r\n\r\nexport interface AuthTokens {\r\n    accessToken: string;\r\n    expiresIn: number;\r\n    tokenType: string;\r\n    scope: string;\r\n    profile: User;\r\n}\r\n\r\nexport interface TokenResponse {\r\n    access_token: string;\r\n    id_token: string;\r\n    expires_in: number;\r\n    token_type: string;\r\n    scope: string;\r\n    profile: User;\r\n}\r\n\r\n// Constants for auth configuration\r\nexport const AUTH_STORAGE_KEYS = {\r\n    ACCESS_TOKEN: 'auth.access_token',\r\n    USER: 'auth.user',\r\n    EXPIRES_AT: 'auth.expires_at'\r\n} as const;\r\n// Common auth error types\r\nexport type AuthError =\r\n    | 'auth/invalid-credentials'\r\n    | 'auth/session-expired'\r\n    | 'auth/network-error'\r\n    | 'auth/unknown-error';\r\n\r\nexport const AUTH_ERROR_MESSAGES: Record<AuthError, string> = {\r\n    'auth/invalid-credentials': 'Invalid username or password',\r\n    'auth/session-expired': 'Your session has expired. Please login again.',\r\n    'auth/network-error': 'Unable to connect to authentication service',\r\n    'auth/unknown-error': 'An unknown error occurred'\r\n};\r\n\r\n\r\n// // Constants for your auth configuration\r\n// export const AUTH_CONFIG: AuthConfig = {\r\n//   authority: 'https://localhost:5001',\r\n//   clientId: 'admin-portal',\r\n//   redirectUri: window.location.origin + '/callback',\r\n//   responseType: 'code',\r\n//   scope: 'openid profile email api.full',\r\n// };",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isAuthenticated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AuthTokens",
            "id": "interface-AuthTokens-052861d493be537358212d3287080f9e8351a3c9ef476c59623b20372055f9b681db217298021bbecefde0bc8076ea380b40785ddc3a7c2c90f65bf3a998b8f1",
            "file": "src/app/shared/models/auth.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AuthState {\r\n    user: User | null;\r\n    accessToken: string | null;\r\n    isAuthenticated: boolean;\r\n    loading: boolean;\r\n    error: string | null;\r\n    message?: string;\r\n}\r\n\r\nexport interface User {\r\n    id: string;\r\n    username: string;\r\n    email: string;\r\n    firstName?: string;\r\n    lastName?: string;\r\n    roles: string[];\r\n    permissions: string[];\r\n}\r\n\r\nexport interface AuthTokens {\r\n    accessToken: string;\r\n    expiresIn: number;\r\n    tokenType: string;\r\n    scope: string;\r\n    profile: User;\r\n}\r\n\r\nexport interface TokenResponse {\r\n    access_token: string;\r\n    id_token: string;\r\n    expires_in: number;\r\n    token_type: string;\r\n    scope: string;\r\n    profile: User;\r\n}\r\n\r\n// Constants for auth configuration\r\nexport const AUTH_STORAGE_KEYS = {\r\n    ACCESS_TOKEN: 'auth.access_token',\r\n    USER: 'auth.user',\r\n    EXPIRES_AT: 'auth.expires_at'\r\n} as const;\r\n// Common auth error types\r\nexport type AuthError =\r\n    | 'auth/invalid-credentials'\r\n    | 'auth/session-expired'\r\n    | 'auth/network-error'\r\n    | 'auth/unknown-error';\r\n\r\nexport const AUTH_ERROR_MESSAGES: Record<AuthError, string> = {\r\n    'auth/invalid-credentials': 'Invalid username or password',\r\n    'auth/session-expired': 'Your session has expired. Please login again.',\r\n    'auth/network-error': 'Unable to connect to authentication service',\r\n    'auth/unknown-error': 'An unknown error occurred'\r\n};\r\n\r\n\r\n// // Constants for your auth configuration\r\n// export const AUTH_CONFIG: AuthConfig = {\r\n//   authority: 'https://localhost:5001',\r\n//   clientId: 'admin-portal',\r\n//   redirectUri: window.location.origin + '/callback',\r\n//   responseType: 'code',\r\n//   scope: 'openid profile email api.full',\r\n// };",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "expiresIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "scope",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "tokenType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BatchStockAdjustment",
            "id": "interface-BatchStockAdjustment-010ca354de46975eba9c28402d0b02ffaa4edf826241f1969c83c77397998e57ce6a918319d6eae99f03c36de981dcc04b43bcd1789f529020b28167e67df14b",
            "file": "src/app/shared/models/stock.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StockItem {\r\n    id: string;\r\n    productId: string;\r\n    productName: string;\r\n    currentStock: number;\r\n    reservedStock: number;\r\n    availableStock: number;\r\n    lowStockThreshold: number;\r\n    trackInventory: boolean;\r\n    isLowStock: boolean;\r\n    isOutOfStock: boolean;\r\n    reservations: StockReservation[];\r\n}\r\n\r\nexport interface StockReservation {\r\n    id: string;\r\n    orderId: string;\r\n    quantity: number;\r\n    status: 'Pending' | 'Confirmed' | 'Cancelled';\r\n    expiresAt: string; // ISO date string\r\n    confirmedAt?: string; // ISO date string\r\n    cancelledAt?: string; // ISO date string\r\n}\r\n\r\nexport interface StockAdjustment {\r\n    productId: string;\r\n    adjustment: number;\r\n    reason?: string;\r\n}\r\n\r\nexport interface BatchStockAdjustment {\r\n    adjustments: StockAdjustment[];\r\n    reason: string;\r\n}",
            "properties": [
                {
                    "name": "adjustments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StockAdjustment[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "reason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BookAttributes",
            "id": "interface-BookAttributes-051f98bf72e2dd7364d8ac66e9d2d60d9d04bdb8322648cb8075c27521bcb83b95569279bd5f8948ff8848b49ec03d114809e172b9f2e6dfece1410b7c67de8a",
            "file": "src/app/shared/models/product-type.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormlyFieldConfig } from '@ngx-formly/core';\r\n\r\nexport interface ProductType {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    icon: string;\r\n    attributes: ProductTypeAttribute[];\r\n    formConfig: FormlyFieldConfig[];\r\n}\r\n\r\nexport interface ProductTypeAttribute {\r\n    id: string;\r\n    name: string;\r\n    description?: string;\r\n    type: 'text' | 'number' | 'boolean' | 'select' | 'multiselect' | 'color' | 'size' | 'dimension';\r\n    isRequired: boolean;\r\n    defaultValue?: any;\r\n    options?: { label: string, value: any }[];\r\n    validation?: {\r\n        min?: number;\r\n        max?: number;\r\n        pattern?: string;\r\n        message?: string;\r\n    };\r\n    displayOrder: number;\r\n    isFilterable: boolean;\r\n    isComparable: boolean;\r\n}\r\n\r\n// Core product categories with specific attribute sets\r\nexport enum ProductCategory {\r\n    Clothing = 'clothing',\r\n    Electronics = 'electronics',\r\n    Furniture = 'furniture',\r\n    Books = 'books',\r\n    Groceries = 'groceries',\r\n    Beauty = 'beauty',\r\n    Toys = 'toys',\r\n    Other = 'other'\r\n}\r\n\r\n// Specific product types within categories\r\nexport interface ClothingAttributes {\r\n    size?: string[];\r\n    color?: string[];\r\n    material?: string;\r\n    gender?: 'men' | 'women' | 'unisex' | 'boys' | 'girls';\r\n    season?: string[];\r\n    care?: string;\r\n}\r\n\r\nexport interface ElectronicsAttributes {\r\n    brand?: string;\r\n    model?: string;\r\n    specifications?: Record<string, string>;\r\n    warranty?: string;\r\n    powerRequirements?: string;\r\n    connectivity?: string[];\r\n}\r\n\r\nexport interface BookAttributes {\r\n    author?: string;\r\n    publisher?: string;\r\n    isbn?: string;\r\n    language?: string;\r\n    format?: 'hardcover' | 'paperback' | 'ebook' | 'audiobook';\r\n    genre?: string[];\r\n    pages?: number;\r\n}\r\n\r\n// Utility types for product variants\r\nexport interface SizeVariant {\r\n    size: string;\r\n    stock: number;\r\n    price?: number; // Price adjustment if different from base\r\n    sku?: string;\r\n}\r\n\r\nexport interface ColorVariant {\r\n    color: string;\r\n    colorCode: string; // Hex code\r\n    imageUrl?: string;\r\n    stock: number;\r\n    price?: number; // Price adjustment if different from base\r\n    sku?: string;\r\n}\r\n\r\nexport interface SizeColorVariant extends SizeVariant, Omit<ColorVariant, 'stock' | 'price' | 'sku'> {\r\n    // Combined variant with specific stock/price for size+color combination\r\n    stock: number;\r\n    price?: number;\r\n    sku?: string;\r\n\r\n    // Additional properties can be added as needed\r\n    // e.g., discount, promotional price, etc.\r\n    discount?: number;\r\n    promotionalPrice?: number;\r\n    isFeatured?: boolean;\r\n    isAvailable?: boolean;\r\n\r\n}",
            "properties": [
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"hardcover\" | \"paperback\" | \"ebook\" | \"audiobook\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "genre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "isbn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "pages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "publisher",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 65
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CarrierOption",
            "id": "interface-CarrierOption-436ac7a9b46d62e100d6ee687d0e85d62b7914b3b35d5c2d4b0bad35f51957ef9895f54ed14ccb33368bc7a53925be0da0db61a44c1137c68ed003d7dcd37593",
            "file": "src/app/features/orders/components/update-shipping-dialog/update-shipping-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\n\r\ninterface DialogData {\r\n    orderId: string;\r\n    currentShipping?: {\r\n        carrier: string;\r\n        trackingNumber: string;\r\n        estimatedDeliveryDate: string;\r\n    };\r\n}\r\n\r\ninterface CarrierOption {\r\n    value: string;\r\n    label: string;\r\n    trackingUrlPattern?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-update-shipping-dialog',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        MatDialogModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatDatepickerModule,\r\n        MatNativeDateModule\r\n    ],\r\n    template: `\r\n        <h2 mat-dialog-title>Update Shipping Information</h2>\r\n        \r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <mat-dialog-content>\r\n                <div class=\"form-fields\">\r\n                    <mat-form-field >\r\n                        <mat-label>Shipping Carrier</mat-label>\r\n                        <mat-select formControlName=\"carrier\">\r\n                            @for (carrier of carriers; track carrier.value) {\r\n                                <mat-option [value]=\"carrier.value\">\r\n                                    {{carrier.label}}\r\n                                </mat-option>\r\n                            }\r\n                        </mat-select>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('carrier')?.errors?.['required']\">\r\n                            Carrier is required\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Tracking Number</mat-label>\r\n                        <input matInput formControlName=\"trackingNumber\" \r\n                               placeholder=\"Enter tracking number\">\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('trackingNumber')?.errors?.['required']\">\r\n                            Tracking number is required\r\n                        </mat-error>\r\n                        @if (trackingUrl) {\r\n                            <mat-hint class=\"text-xs text-orange-500\">\r\n                                <a [href]=\"trackingUrl\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                    Track Package\r\n                                </a>\r\n                            </mat-hint>\r\n                        }\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Estimated Delivery Date</mat-label>\r\n                        <input matInput [matDatepicker]=\"picker\" \r\n                               formControlName=\"estimatedDeliveryDate\">\r\n                        <mat-datepicker-toggle matIconSuffix [for]=\"picker\">\r\n                        </mat-datepicker-toggle>\r\n                        <mat-datepicker #picker></mat-datepicker>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('estimatedDeliveryDate')?.errors?.['required']\">\r\n                            Estimated delivery date is required\r\n                        </mat-error>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('estimatedDeliveryDate')?.errors?.['min']\">\r\n                            Date cannot be in the past\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Notes</mat-label>\r\n                        <textarea matInput formControlName=\"notes\" \r\n                                  placeholder=\"Enter shipping notes\"\r\n                                  rows=\"3\"></textarea>\r\n                    </mat-form-field>\r\n                </div>\r\n            </mat-dialog-content>\r\n\r\n            <mat-dialog-actions align=\"end\">\r\n                <button mat-button type=\"button\" (click)=\"onCancel()\">Cancel</button>\r\n                <button mat-raised-button color=\"primary\" \r\n                        type=\"submit\"\r\n                        [disabled]=\"form.invalid || form.pristine\">\r\n                    Update Shipping\r\n                </button>\r\n            </mat-dialog-actions>\r\n        </form>\r\n    `,\r\n    styles: [`\r\n        .form-fields {\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 1rem;\r\n            min-width: 400px;\r\n            max-width: 600px;\r\n        }\r\n\r\n        textarea {\r\n            min-height: 100px;\r\n        }\r\n    `]\r\n})\r\nexport class UpdateShippingDialogComponent {\r\n    form: FormGroup;\r\n    carriers: CarrierOption[] = [\r\n        {\r\n            value: 'fedex',\r\n            label: 'FedEx',\r\n            trackingUrlPattern: 'https://www.fedex.com/fedextrack/?trknbr={tracking}'\r\n        },\r\n        {\r\n            value: 'ups',\r\n            label: 'UPS',\r\n            trackingUrlPattern: 'https://www.ups.com/track?tracknum={tracking}'\r\n        },\r\n        {\r\n            value: 'usps',\r\n            label: 'USPS',\r\n            trackingUrlPattern: 'https://tools.usps.com/go/TrackConfirmAction?tLabels={tracking}'\r\n        },\r\n        {\r\n            value: 'dhl',\r\n            label: 'DHL',\r\n            trackingUrlPattern: 'https://www.dhl.com/en/express/tracking.html?AWB={tracking}'\r\n        }\r\n    ];\r\n\r\n    get trackingUrl(): string | null {\r\n        const carrier = this.carriers.find(c => c.value === this.form.get('carrier')?.value);\r\n        const tracking = this.form.get('trackingNumber')?.value;\r\n\r\n        if (carrier?.trackingUrlPattern && tracking) {\r\n            return carrier.trackingUrlPattern.replace('{tracking}', tracking);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<UpdateShippingDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: DialogData,\r\n        private fb: FormBuilder\r\n    ) {\r\n        const today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n\r\n        this.form = this.fb.group({\r\n            carrier: [data.currentShipping?.carrier || '', Validators.required],\r\n            trackingNumber: [data.currentShipping?.trackingNumber || '', Validators.required],\r\n            estimatedDeliveryDate: [\r\n                data.currentShipping?.estimatedDeliveryDate ? new Date(data.currentShipping.estimatedDeliveryDate) : null,\r\n                [\r\n                    Validators.required,\r\n                    (control) => {\r\n                        const date = control.value;\r\n                        return date && date < today ? { min: true } : null;\r\n                    }\r\n                ]\r\n            ],\r\n            notes: ['']\r\n        });\r\n\r\n        // Update tracking URL when carrier or tracking number changes\r\n        this.form.get('carrier')?.valueChanges.subscribe(() => this.updateTrackingUrl());\r\n        this.form.get('trackingNumber')?.valueChanges.subscribe(() => this.updateTrackingUrl());\r\n    }\r\n\r\n    private updateTrackingUrl() {\r\n        // Force change detection for tracking URL\r\n        this.form.updateValueAndValidity();\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.form.valid) {\r\n            const formValue = this.form.value;\r\n            this.dialogRef.close({\r\n                ...formValue,\r\n                estimatedDeliveryDate: formValue.estimatedDeliveryDate.toISOString()\r\n            });\r\n        }\r\n    }\r\n\r\n    onCancel() {\r\n        this.dialogRef.close();\r\n    }\r\n}",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "trackingUrlPattern",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Category",
            "id": "interface-Category-a6d88422e4af98150c04a785232992142f7fa1f0b750306b76e96ac9f2144d36daff74b20e48a3f88abe491febef21bb21a6d62d8ea1324b1140143d8dbc4c3b",
            "file": "src/app/shared/models/category.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Category {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    slug: string;\r\n    sortOrder: number;\r\n    metaTitle?: string;\r\n    metaDescription?: string;\r\n    imageUrl?: string;\r\n    parentCategoryId?: string;\r\n    parentCategory?: Category | null;\r\n    subCategories: Category[];\r\n    productCount: number;\r\n    createdAt: string; // ISO date string\r\n    createdBy?: string;\r\n    lastModifiedAt?: string; // ISO date string\r\n    lastModifiedBy?: string;\r\n}\r\n\r\ninterface SubCategory extends Omit<Category, 'parentId'> {\r\n    parentCategoryId: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "createdBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "lastModifiedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "lastModifiedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "metaDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "metaTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "parentCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "parentCategoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "productCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "subCategories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CategoryState",
            "id": "interface-CategoryState-7cf08b7a986e223642ef2e69375badbbb4863d168e261fe7276246b62bdd40ffbc363658550d7b7bfef3b1615cb4521980a96471c2737226ddf4c1d35ff45794",
            "file": "src/app/store/category/category.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Category } from \"src/app/shared/models/category.model\";\r\n\r\n\r\nexport interface CategoryState {\r\n    categories: Category[];\r\n    selectedCategory: Category | null;\r\n    loading: boolean;\r\n    error: string | null;\r\n}\r\n\r\nexport const initialCategoryState: CategoryState = {\r\n    categories: [],\r\n    selectedCategory: null,\r\n    loading: false,\r\n    error: null\r\n};",
            "properties": [
                {
                    "name": "categories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "selectedCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ClothingAttributes",
            "id": "interface-ClothingAttributes-051f98bf72e2dd7364d8ac66e9d2d60d9d04bdb8322648cb8075c27521bcb83b95569279bd5f8948ff8848b49ec03d114809e172b9f2e6dfece1410b7c67de8a",
            "file": "src/app/shared/models/product-type.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormlyFieldConfig } from '@ngx-formly/core';\r\n\r\nexport interface ProductType {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    icon: string;\r\n    attributes: ProductTypeAttribute[];\r\n    formConfig: FormlyFieldConfig[];\r\n}\r\n\r\nexport interface ProductTypeAttribute {\r\n    id: string;\r\n    name: string;\r\n    description?: string;\r\n    type: 'text' | 'number' | 'boolean' | 'select' | 'multiselect' | 'color' | 'size' | 'dimension';\r\n    isRequired: boolean;\r\n    defaultValue?: any;\r\n    options?: { label: string, value: any }[];\r\n    validation?: {\r\n        min?: number;\r\n        max?: number;\r\n        pattern?: string;\r\n        message?: string;\r\n    };\r\n    displayOrder: number;\r\n    isFilterable: boolean;\r\n    isComparable: boolean;\r\n}\r\n\r\n// Core product categories with specific attribute sets\r\nexport enum ProductCategory {\r\n    Clothing = 'clothing',\r\n    Electronics = 'electronics',\r\n    Furniture = 'furniture',\r\n    Books = 'books',\r\n    Groceries = 'groceries',\r\n    Beauty = 'beauty',\r\n    Toys = 'toys',\r\n    Other = 'other'\r\n}\r\n\r\n// Specific product types within categories\r\nexport interface ClothingAttributes {\r\n    size?: string[];\r\n    color?: string[];\r\n    material?: string;\r\n    gender?: 'men' | 'women' | 'unisex' | 'boys' | 'girls';\r\n    season?: string[];\r\n    care?: string;\r\n}\r\n\r\nexport interface ElectronicsAttributes {\r\n    brand?: string;\r\n    model?: string;\r\n    specifications?: Record<string, string>;\r\n    warranty?: string;\r\n    powerRequirements?: string;\r\n    connectivity?: string[];\r\n}\r\n\r\nexport interface BookAttributes {\r\n    author?: string;\r\n    publisher?: string;\r\n    isbn?: string;\r\n    language?: string;\r\n    format?: 'hardcover' | 'paperback' | 'ebook' | 'audiobook';\r\n    genre?: string[];\r\n    pages?: number;\r\n}\r\n\r\n// Utility types for product variants\r\nexport interface SizeVariant {\r\n    size: string;\r\n    stock: number;\r\n    price?: number; // Price adjustment if different from base\r\n    sku?: string;\r\n}\r\n\r\nexport interface ColorVariant {\r\n    color: string;\r\n    colorCode: string; // Hex code\r\n    imageUrl?: string;\r\n    stock: number;\r\n    price?: number; // Price adjustment if different from base\r\n    sku?: string;\r\n}\r\n\r\nexport interface SizeColorVariant extends SizeVariant, Omit<ColorVariant, 'stock' | 'price' | 'sku'> {\r\n    // Combined variant with specific stock/price for size+color combination\r\n    stock: number;\r\n    price?: number;\r\n    sku?: string;\r\n\r\n    // Additional properties can be added as needed\r\n    // e.g., discount, promotional price, etc.\r\n    discount?: number;\r\n    promotionalPrice?: number;\r\n    isFeatured?: boolean;\r\n    isAvailable?: boolean;\r\n\r\n}",
            "properties": [
                {
                    "name": "care",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"men\" | \"women\" | \"unisex\" | \"boys\" | \"girls\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "season",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 46
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ColorVariant",
            "id": "interface-ColorVariant-051f98bf72e2dd7364d8ac66e9d2d60d9d04bdb8322648cb8075c27521bcb83b95569279bd5f8948ff8848b49ec03d114809e172b9f2e6dfece1410b7c67de8a",
            "file": "src/app/shared/models/product-type.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormlyFieldConfig } from '@ngx-formly/core';\r\n\r\nexport interface ProductType {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    icon: string;\r\n    attributes: ProductTypeAttribute[];\r\n    formConfig: FormlyFieldConfig[];\r\n}\r\n\r\nexport interface ProductTypeAttribute {\r\n    id: string;\r\n    name: string;\r\n    description?: string;\r\n    type: 'text' | 'number' | 'boolean' | 'select' | 'multiselect' | 'color' | 'size' | 'dimension';\r\n    isRequired: boolean;\r\n    defaultValue?: any;\r\n    options?: { label: string, value: any }[];\r\n    validation?: {\r\n        min?: number;\r\n        max?: number;\r\n        pattern?: string;\r\n        message?: string;\r\n    };\r\n    displayOrder: number;\r\n    isFilterable: boolean;\r\n    isComparable: boolean;\r\n}\r\n\r\n// Core product categories with specific attribute sets\r\nexport enum ProductCategory {\r\n    Clothing = 'clothing',\r\n    Electronics = 'electronics',\r\n    Furniture = 'furniture',\r\n    Books = 'books',\r\n    Groceries = 'groceries',\r\n    Beauty = 'beauty',\r\n    Toys = 'toys',\r\n    Other = 'other'\r\n}\r\n\r\n// Specific product types within categories\r\nexport interface ClothingAttributes {\r\n    size?: string[];\r\n    color?: string[];\r\n    material?: string;\r\n    gender?: 'men' | 'women' | 'unisex' | 'boys' | 'girls';\r\n    season?: string[];\r\n    care?: string;\r\n}\r\n\r\nexport interface ElectronicsAttributes {\r\n    brand?: string;\r\n    model?: string;\r\n    specifications?: Record<string, string>;\r\n    warranty?: string;\r\n    powerRequirements?: string;\r\n    connectivity?: string[];\r\n}\r\n\r\nexport interface BookAttributes {\r\n    author?: string;\r\n    publisher?: string;\r\n    isbn?: string;\r\n    language?: string;\r\n    format?: 'hardcover' | 'paperback' | 'ebook' | 'audiobook';\r\n    genre?: string[];\r\n    pages?: number;\r\n}\r\n\r\n// Utility types for product variants\r\nexport interface SizeVariant {\r\n    size: string;\r\n    stock: number;\r\n    price?: number; // Price adjustment if different from base\r\n    sku?: string;\r\n}\r\n\r\nexport interface ColorVariant {\r\n    color: string;\r\n    colorCode: string; // Hex code\r\n    imageUrl?: string;\r\n    stock: number;\r\n    price?: number; // Price adjustment if different from base\r\n    sku?: string;\r\n}\r\n\r\nexport interface SizeColorVariant extends SizeVariant, Omit<ColorVariant, 'stock' | 'price' | 'sku'> {\r\n    // Combined variant with specific stock/price for size+color combination\r\n    stock: number;\r\n    price?: number;\r\n    sku?: string;\r\n\r\n    // Additional properties can be added as needed\r\n    // e.g., discount, promotional price, etc.\r\n    discount?: number;\r\n    promotionalPrice?: number;\r\n    isFeatured?: boolean;\r\n    isAvailable?: boolean;\r\n\r\n}",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "colorCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "sku",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "stock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 85
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateCategoryRequest",
            "id": "interface-CreateCategoryRequest-d4ecbbcce5e1b2c58624242b08061d9461ab1e2000ddbe370518d386762e718ee81fc424c77f8474a05cbcf9a5bedd28bdc906e2fcaa62457cdfe3ad3378bf43",
            "file": "src/app/shared/models/Request.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CreateCategoryRequest {\r\n    name: string;\r\n    description: string;\r\n    imageUrl?: string;\r\n    metaTitle?: string;\r\n    metaDescription?: string;\r\n    parentCategoryId?: string;\r\n}\r\nexport interface UpdateCategoryRequest extends CreateCategoryRequest {\r\n    sortOrder?: number;\r\n}\r\n\r\nexport interface ReorderCategoryRequest {\r\n    categoryId: string;\r\n    newSortOrder: number;\r\n}",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "metaDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "metaTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "parentCategoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Customer",
            "id": "interface-Customer-8e31024a31773b43744e39cd446742c11233daecf8ba072eb53752772755a792213ad266c7d40720eeeecaa2d40b51c907d786fdfd73f6b69c4777f660fc0cce",
            "file": "src/app/shared/models/customer.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AuditableEntity } from \"./auditableEntity.model\";\r\nimport { Address } from \"./value-object.model\";\r\n\r\n// Customer related interfaces\r\ninterface Customer extends AuditableEntity {\r\n    id: string;\r\n    email: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    phone?: string;\r\n    addresses: Address[];\r\n    defaultBillingAddressId?: string;\r\n    defaultShippingAddressId?: string;\r\n    // status: CustomerStatus;\r\n    notes?: string;\r\n    tags?: string[];\r\n}\r\n\r\nenum CustomerStatus {\r\n    Active = 'active',\r\n    Inactive = 'inactive',\r\n    Blocked = 'blocked'\r\n}",
            "properties": [
                {
                    "name": "addresses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Address[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "defaultBillingAddressId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "defaultShippingAddressId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "notes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "tags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "AuditableEntity"
            ]
        },
        {
            "name": "DashboardMetric",
            "id": "interface-DashboardMetric-b214d03a52f2836f9f0757df043720a8e672bd9ccca5c9018bbc73e63036b8423cb6a633156096f46fe64fa77edeaceb3f85bd5a979a54e25a58b778668e4c31",
            "file": "src/app/features/home/home.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { Store } from '@ngrx/store';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { ProductService } from '../../core/services/product.service';\r\n\r\ninterface QuickAction {\r\n  title: string;\r\n  icon: string;\r\n  description: string;\r\n  route: string;\r\n  color: string;\r\n}\r\n\r\ninterface DashboardMetric {\r\n  title: string;\r\n  value: number | string;\r\n  icon: string;\r\n  change?: {\r\n    value: number;\r\n    isPositive: boolean;\r\n    label: string;\r\n  };\r\n  color: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    MatTooltipModule\r\n  ],\r\n  template: `\r\n    <div class=\"container mx-auto p-4 md:p-6\">\r\n      <!-- Dashboard Header -->\r\n      <div class=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-6\">\r\n        <div>\r\n          <h1 class=\"text-2xl font-bold text-slate-900 dark:text-white\">Dashboard</h1>\r\n          <p class=\"text-sm text-slate-500 dark:text-slate-400\">Welcome back to your admin dashboard</p>\r\n        </div>\r\n        \r\n        <div class=\"mt-4 md:mt-0 flex items-center space-x-2\">\r\n          <button \r\n            class=\"px-3 py-2 bg-white dark:bg-slate-800 text-slate-600 dark:text-slate-300 border border-slate-200 dark:border-slate-700 rounded-md shadow-sm flex items-center hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\" />\r\n            </svg>\r\n            Export\r\n          </button>\r\n          \r\n          <button \r\n            class=\"px-3 py-2 bg-primary-600 text-white rounded-md shadow-sm flex items-center hover:bg-primary-700 transition-colors\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n            </svg>\r\n            New Report\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Metrics Overview -->\r\n      <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\r\n        <div *ngFor=\"let metric of metrics\" \r\n          class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm p-5 border border-slate-200 dark:border-slate-700\">\r\n          <div class=\"flex justify-between items-start\">\r\n            <div>\r\n              <p class=\"text-sm font-medium text-slate-500 dark:text-slate-400\">{{ metric.title }}</p>\r\n              <p class=\"text-2xl font-bold text-slate-900 dark:text-white mt-1\">{{ metric.value }}</p>\r\n              \r\n              <div *ngIf=\"metric.change\" class=\"flex items-center mt-2\">\r\n                <span \r\n                  [class.text-emerald-600]=\"metric.change.isPositive\"\r\n                  [class.text-rose-600]=\"!metric.change.isPositive\"\r\n                  [class.dark:text-emerald-400]=\"metric.change.isPositive\"\r\n                  [class.dark:text-rose-400]=\"!metric.change.isPositive\"\r\n                  class=\"text-xs font-medium flex items-center\">\r\n                  \r\n                  <svg *ngIf=\"metric.change.isPositive\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-3 w-3 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                    <path fill-rule=\"evenodd\" d=\"M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z\" clip-rule=\"evenodd\" />\r\n                  </svg>\r\n                  \r\n                  <svg *ngIf=\"!metric.change.isPositive\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-3 w-3 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                    <path fill-rule=\"evenodd\" d=\"M12 13a1 1 0 100 2h5a1 1 0 001-1v-5a1 1 0 10-2 0v2.586l-4.293-4.293a1 1 0 00-1.414 0L8 9.586 3.707 5.293a1 1 0 00-1.414 1.414l5 5a1 1 0 001.414 0L11 9.414 14.586 13H12z\" clip-rule=\"evenodd\" />\r\n                  </svg>\r\n                  \r\n                  {{ metric.change.value }}% {{ metric.change.label }}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            \r\n            <div [class]=\"'p-3 rounded-full ' + metric.color\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" [innerHTML]=\"getSvgPath(metric.icon)\"></svg>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Quick Actions -->\r\n      <h2 class=\"text-lg font-semibold text-slate-900 dark:text-white mb-4\">Quick Actions</h2>\r\n      <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mb-8\">\r\n        <div *ngFor=\"let action of quickActions\" \r\n            [routerLink]=\"action.route\"\r\n            class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 overflow-hidden hover:shadow-md transition-shadow cursor-pointer group\">\r\n          <div class=\"p-5\">\r\n            <div class=\"flex items-center mb-4\">\r\n              <div [class]=\"'p-3 rounded-full ' + action.color\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" [innerHTML]=\"getSvgPath(action.icon)\"></svg>\r\n              </div>\r\n              <h3 class=\"ml-3 text-base font-medium text-slate-900 dark:text-white\">{{ action.title }}</h3>\r\n            </div>\r\n            <p class=\"text-sm text-slate-500 dark:text-slate-400\">{{ action.description }}</p>\r\n          </div>\r\n          <div class=\"px-5 py-3 bg-slate-50 dark:bg-slate-700 border-t border-slate-200 dark:border-slate-700\">\r\n            <span class=\"text-sm font-medium text-primary-600 dark:text-primary-400 flex items-center group-hover:translate-x-0.5 transition-transform\">\r\n              Get Started\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 ml-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                <path fill-rule=\"evenodd\" d=\"M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\r\n              </svg>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Recent Activity -->\r\n      <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <!-- Recent Orders -->\r\n        <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 overflow-hidden\">\r\n          <div class=\"px-5 py-4 border-b border-slate-200 dark:border-slate-700 flex justify-between items-center\">\r\n            <h3 class=\"font-medium text-slate-900 dark:text-white\">Recent Orders</h3>\r\n            <a routerLink=\"/orders\" class=\"text-sm font-medium text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300\">\r\n              View All\r\n            </a>\r\n          </div>\r\n          \r\n          <div class=\"p-5\">\r\n            <div *ngIf=\"recentOrders.length === 0\" class=\"text-center py-6\">\r\n              <p class=\"text-slate-500 dark:text-slate-400\">No recent orders found</p>\r\n            </div>\r\n            \r\n            <div *ngFor=\"let order of recentOrders\" class=\"border-b border-slate-200 dark:border-slate-700 last:border-b-0 py-3\">\r\n              <div class=\"flex justify-between items-center\">\r\n                <div>\r\n                  <p class=\"text-sm font-medium text-slate-900 dark:text-white\">#{{ order.id }}</p>\r\n                  <p class=\"text-xs text-slate-500 dark:text-slate-400\">{{ order.date }}</p>\r\n                </div>\r\n                <div>\r\n                  <span [class]=\"getOrderStatusClass(order.status)\">\r\n                    {{ order.status }}\r\n                  </span>\r\n                </div>\r\n                <div class=\"text-right\">\r\n                  <p class=\"text-sm font-medium text-slate-900 dark:text-white\">{{ order.amount }}</p>\r\n                  <p class=\"text-xs text-slate-500 dark:text-slate-400\">{{ order.items }} items</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Low Stock Items -->\r\n        <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 overflow-hidden\">\r\n          <div class=\"px-5 py-4 border-b border-slate-200 dark:border-slate-700 flex justify-between items-center\">\r\n            <h3 class=\"font-medium text-slate-900 dark:text-white\">Low Stock Items</h3>\r\n            <a routerLink=\"/products/list\" class=\"text-sm font-medium text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300\">\r\n              View All\r\n            </a>\r\n          </div>\r\n          \r\n          <div class=\"p-5\">\r\n            <div *ngIf=\"lowStockItems.length === 0\" class=\"text-center py-6\">\r\n              <p class=\"text-slate-500 dark:text-slate-400\">No low stock items found</p>\r\n            </div>\r\n            \r\n            <div *ngFor=\"let item of lowStockItems\" class=\"border-b border-slate-200 dark:border-slate-700 last:border-b-0 py-3\">\r\n              <div class=\"flex items-center\">\r\n                <div class=\"h-10 w-10 bg-slate-100 dark:bg-slate-700 rounded-md flex items-center justify-center\">\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-slate-500 dark:text-slate-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n                  </svg>\r\n                </div>\r\n                <div class=\"ml-3 flex-grow\">\r\n                  <p class=\"text-sm font-medium text-slate-900 dark:text-white\">{{ item.name }}</p>\r\n                  <p class=\"text-xs text-slate-500 dark:text-slate-400\">{{ item.sku }}</p>\r\n                </div>\r\n                <div class=\"text-right\">\r\n                  <p class=\"text-sm font-medium text-amber-600 dark:text-amber-400\">{{ item.stock }} left</p>\r\n                  <p class=\"text-xs text-slate-500 dark:text-slate-400\">Threshold: {{ item.threshold }}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class HomeComponent implements OnInit, OnDestroy {\r\n  metrics: DashboardMetric[] = [\r\n    {\r\n      title: 'Total Products',\r\n      value: 0,\r\n      icon: 'M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4',\r\n      color: 'bg-primary-600'\r\n    },\r\n    {\r\n      title: 'Active Products',\r\n      value: 0,\r\n      icon: 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z',\r\n      color: 'bg-emerald-600'\r\n    },\r\n    {\r\n      title: 'Revenue',\r\n      value: '$0',\r\n      icon: 'M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z',\r\n      color: 'bg-amber-600',\r\n      change: {\r\n        value: 0,\r\n        isPositive: true,\r\n        label: 'vs last month'\r\n      }\r\n    },\r\n    {\r\n      title: 'Orders',\r\n      value: 0,\r\n      icon: 'M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z',\r\n      color: 'bg-purple-600',\r\n      change: {\r\n        value: 0,\r\n        isPositive: false,\r\n        label: 'vs last month'\r\n      }\r\n    }\r\n  ];\r\n\r\n  quickActions: QuickAction[] = [\r\n    {\r\n      title: 'Add Product',\r\n      icon: 'M12 6v6m0 0v6m0-6h6m-6 0H6',\r\n      description: 'Create a new product listing with details and imagery',\r\n      route: '/products/add',\r\n      color: 'bg-primary-600'\r\n    },\r\n    {\r\n      title: 'Manage Orders',\r\n      icon: 'M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z',\r\n      description: 'View and manage customer orders and shipments',\r\n      route: '/orders',\r\n      color: 'bg-amber-600'\r\n    },\r\n    {\r\n      title: 'View Statistics',\r\n      icon: 'M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z',\r\n      description: 'Check your store performance and key metrics',\r\n      route: '/statistics',\r\n      color: 'bg-emerald-600'\r\n    },\r\n    {\r\n      title: 'Manage Categories',\r\n      icon: 'M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z',\r\n      description: 'Organize products with categories and tags',\r\n      route: '/categories',\r\n      color: 'bg-purple-600'\r\n    }\r\n  ];\r\n\r\n  recentOrders: any[] = [];\r\n  lowStockItems: any[] = [];\r\n\r\n  private readonly destroy$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private readonly store: Store,\r\n    private readonly productService: ProductService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    // Load dashboard data\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  loadDashboardData(): void {\r\n    this.productService.getStats().pipe(\r\n      takeUntil(this.destroy$)\r\n    ).subscribe(stats => {\r\n      // Update metrics with real data\r\n      this.updateMetrics(stats);\r\n\r\n      // Create sample recent orders for demo\r\n      this.recentOrders = this.createSampleOrders();\r\n\r\n      // Create sample low stock items for demo\r\n      this.lowStockItems = this.createSampleLowStockItems();\r\n    });\r\n  }\r\n\r\n  private updateMetrics(stats: any): void {\r\n    this.metrics[0].value = stats.totalProducts || 0;\r\n    this.metrics[1].value = stats.activeProductCount || 0;\r\n    this.metrics[2].value = `$${(stats.totalRevenue || 0).toLocaleString()}`;\r\n    this.metrics[2].change = {\r\n      value: stats.revenueChange || 8.2,\r\n      isPositive: (stats.revenueChange || 8.2) >= 0,\r\n      label: 'vs last month'\r\n    };\r\n    this.metrics[3].value = stats.totalOrders || 0;\r\n    this.metrics[3].change = {\r\n      value: stats.ordersChange || -2.5,\r\n      isPositive: (stats.ordersChange || -2.5) >= 0,\r\n      label: 'vs last month'\r\n    };\r\n  }\r\n\r\n  private createSampleOrders(): any[] {\r\n    return [\r\n      { id: '10042', date: '2 hours ago', status: 'Completed', amount: '$245.99', items: 3 },\r\n      { id: '10041', date: '5 hours ago', status: 'Processing', amount: '$129.50', items: 2 },\r\n      { id: '10040', date: 'Yesterday', status: 'Shipped', amount: '$89.99', items: 1 },\r\n      { id: '10039', date: 'Yesterday', status: 'Completed', amount: '$432.25', items: 5 }\r\n    ];\r\n  }\r\n\r\n  private createSampleLowStockItems(): any[] {\r\n    return [\r\n      { name: 'Wireless Headphones', sku: 'WH-12345', stock: 3, threshold: 5 },\r\n      { name: 'Smartphone Case', sku: 'SC-54321', stock: 2, threshold: 10 },\r\n      { name: 'Smart Watch', sku: 'SW-98765', stock: 4, threshold: 8 },\r\n      { name: 'Bluetooth Speaker', sku: 'BS-45678', stock: 1, threshold: 5 }\r\n    ];\r\n  }\r\n\r\n  getOrderStatusClass(status: string): string {\r\n    switch (status.toLowerCase()) {\r\n      case 'completed':\r\n        return 'px-2 py-1 text-xs rounded-full bg-emerald-100 dark:bg-emerald-900/30 text-emerald-700 dark:text-emerald-400';\r\n      case 'processing':\r\n        return 'px-2 py-1 text-xs rounded-full bg-amber-100 dark:bg-amber-900/30 text-amber-700 dark:text-amber-400';\r\n      case 'shipped':\r\n        return 'px-2 py-1 text-xs rounded-full bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400';\r\n      case 'cancelled':\r\n        return 'px-2 py-1 text-xs rounded-full bg-rose-100 dark:bg-rose-900/30 text-rose-700 dark:text-rose-400';\r\n      default:\r\n        return 'px-2 py-1 text-xs rounded-full bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-400';\r\n    }\r\n  }\r\n\r\n  getSvgPath(path: string): string {\r\n    return `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"${path}\" />`;\r\n  }\r\n}",
            "properties": [
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DashboardState",
            "id": "interface-DashboardState-7130a81a6e2409d53fb75e995afd768291d03043557a0f7cc8a1cc9b54609d25a6c49eb9db91e40efdf5480ae20cc2c46146f2f25b1ab2b488423364837b7a77",
            "file": "src/app/store/dashboard/dashboard.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DashboardStats } from '../../core/services/dashboard.service';\r\n\r\nexport interface DashboardState {\r\n    stats: DashboardStats | null;\r\n    loading: boolean;\r\n    error: string | null;\r\n    lastUpdated: number | null;\r\n}\r\n\r\nexport const initialDashboardState: DashboardState = {\r\n    stats: null,\r\n    loading: false,\r\n    error: null,\r\n    lastUpdated: null\r\n};",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "lastUpdated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "stats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DashboardStats | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DashboardStats",
            "id": "interface-DashboardStats-bc5954db38f3f2107f463dea48d3008e4d302ea2eeec0eac9d0d0941f3fabcd1ae2bbcdb36bacbe7a346e2e0b71abb0ed7e9358f26ff31cf20591fd096df4b15",
            "file": "src/app/core/services/dashboard.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\n\r\nexport interface DashboardStats {\r\n    revenue: {\r\n        total: number;\r\n        trend: Array<{\r\n            date: string;\r\n            amount: number;\r\n        }>;\r\n    };\r\n    orders: {\r\n        total: number;\r\n        trend: Array<{\r\n            date: string;\r\n            count: number;\r\n        }>;\r\n        byStatus: Array<{\r\n            status: string;\r\n            value: number;\r\n            color: string;\r\n        }>;\r\n    };\r\n    inventory: {\r\n        lowStock: number;\r\n        outOfStock: number;\r\n        items: Array<{\r\n            id: string;\r\n            name: string;\r\n            sku: string;\r\n            currentStock: number;\r\n            minimumStock: number;\r\n        }>;\r\n    };\r\n    shipping: {\r\n        pending: number;\r\n        late: number;\r\n        pendingOrders: Array<{\r\n            id: string;\r\n            orderNumber: string;\r\n            createdAt: string;\r\n            status: string;\r\n        }>;\r\n    };\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DashboardService {\r\n    private readonly apiUrl = environment.apiUrls.admin.dashboard;\r\n\r\n    constructor(private readonly http: HttpClient) { }\r\n\r\n    // Get complete dashboard stats\r\n    getDashboardStats(): Observable<DashboardStats> {\r\n        return combineLatest([\r\n            this.getRevenueStats(),\r\n            this.getOrderStats(),\r\n            this.getInventoryStats(),\r\n            this.getShippingStats()\r\n        ]).pipe(\r\n            map(([revenue, orders, inventory, shipping]) => ({\r\n                revenue,\r\n                orders,\r\n                inventory,\r\n                shipping\r\n            }))\r\n        );\r\n    }\r\n\r\n    // Get revenue statistics\r\n    private getRevenueStats(): Observable<DashboardStats['revenue']> {\r\n        return this.http.get<DashboardStats['revenue']>(`${this.apiUrl}/revenue`);\r\n    }\r\n\r\n    // Get order statistics\r\n    private getOrderStats(): Observable<DashboardStats['orders']> {\r\n        return this.http.get<DashboardStats['orders']>(`${this.apiUrl}/orders`).pipe(\r\n            map(stats => ({\r\n                ...stats,\r\n                byStatus: stats.byStatus.map(status => ({\r\n                    ...status,\r\n                    color: this.getStatusColor(status.status)\r\n                }))\r\n            }))\r\n        );\r\n    }\r\n\r\n    // Get inventory alerts\r\n    private getInventoryStats(): Observable<DashboardStats['inventory']> {\r\n        return this.http.get<DashboardStats['inventory']>(`${this.apiUrl}/inventory`);\r\n    }\r\n\r\n    // Get shipping statistics\r\n    private getShippingStats(): Observable<DashboardStats['shipping']> {\r\n        return this.http.get<DashboardStats['shipping']>(`${this.apiUrl}/shipping`);\r\n    }\r\n\r\n    // Helper method to get consistent colors for order statuses\r\n    private getStatusColor(status: string): string {\r\n        const colorMap: { [key: string]: string } = {\r\n            'pending': '#FCD34D',   // Yellow\r\n            'confirmed': '#60A5FA', // Blue\r\n            'processing': '#818CF8', // Indigo\r\n            'shipped': '#34D399',   // Green\r\n            'delivered': '#10B981', // Emerald\r\n            'cancelled': '#EF4444', // Red\r\n            'refunded': '#F87171'   // Light Red\r\n        };\r\n\r\n        return colorMap[status.toLowerCase()] || '#6B7280'; // Gray default\r\n    }\r\n}",
            "properties": [
                {
                    "name": "inventory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "orders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "revenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "shipping",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DashboardStats",
            "id": "interface-DashboardStats-499fa72c119ac6db5c93eb9f080b4e711b86e287801abd1a85950ef4defb009e177828e0c03879bd036a112f18c824aa5f43387d267a8a8fef319883490fe95e-1",
            "file": "src/app/core/services/statistics.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\n\r\nexport interface DashboardStats {\r\n    totalProducts: number;\r\n    lowStockCount: number;\r\n    totalCategories: number;\r\n    activeProductCount: number;\r\n    totalRevenue?: number;\r\n    revenueChange?: number;\r\n    totalOrders?: number;\r\n    ordersChange?: number;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class StatisticsService {\r\n    private apiUrl = `${environment.apiUrls.admin.baseUrl}/statistics`;\r\n\r\n    // Mock data for development/demo purposes\r\n    private mockStats: DashboardStats = {\r\n        totalProducts: 145,\r\n        lowStockCount: 12,\r\n        totalCategories: 8,\r\n        activeProductCount: 132,\r\n        totalRevenue: 24680,\r\n        revenueChange: 12.5,\r\n        totalOrders: 389,\r\n        ordersChange: 8.3\r\n    };\r\n\r\n    private categoryCount = 8;\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    /**\r\n     * Get statistics data from the API\r\n     * @param timeRange - Optional time range filter (day, week, month)\r\n     * @returns Observable of statistics data\r\n     */\r\n    getStatistics(timeRange: string = 'day'): Observable<DashboardStats> {\r\n        // In a production environment, you would use the HTTP client to fetch data from your API\r\n        // return this.http.get<DashboardStats>(`${this.apiUrl}?timeRange=${timeRange}`)\r\n        //   .pipe(\r\n        //     catchError(error => {\r\n        //       console.error('Error fetching statistics:', error);\r\n        //       return of(this.mockStats);\r\n        //     })\r\n        //   );\r\n\r\n        // For demo purposes, return mock data with slight variations based on the time range\r\n        const mockVariation = timeRange === 'day' ? 1 :\r\n            timeRange === 'week' ? 1.5 : 2;\r\n\r\n        return of({\r\n            ...this.mockStats,\r\n            totalRevenue: Math.round((this.mockStats.totalRevenue ?? 0) * mockVariation),\r\n            totalOrders: Math.round((this.mockStats.totalOrders ?? 0) * mockVariation),\r\n            revenueChange: (this.mockStats.revenueChange ?? 0) * (mockVariation * 0.8),\r\n            ordersChange: (this.mockStats.ordersChange ?? 0) * (mockVariation * 0.9)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the count of categories\r\n     * @returns Number of categories\r\n     */\r\n    getCategoryCount(): number {\r\n        return this.categoryCount;\r\n    }\r\n\r\n    /**\r\n     * Get products with low stock\r\n     * @returns Observable of products with low stock\r\n     */\r\n    getLowStockProducts(): Observable<any[]> {\r\n        // In production, use:\r\n        // return this.http.get<any[]>(`${this.apiUrl}/low-stock`);\r\n\r\n        // Mock data\r\n        return of([\r\n            { id: 1, name: 'Wireless Headphones', stock: 3, minStock: 5 },\r\n            { id: 2, name: 'Smart Watch', stock: 2, minStock: 10 },\r\n            { id: 3, name: 'Bluetooth Speaker', stock: 4, minStock: 8 }\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Get top selling products\r\n     * @param metric - The metric to sort by (sales or revenue)\r\n     * @param limit - Maximum number of products to return\r\n     * @returns Observable of top products\r\n     */\r\n    getTopProducts(metric: 'sales' | 'revenue' = 'sales', limit: number = 5): Observable<any[]> {\r\n        // In production, use:\r\n        // return this.http.get<any[]>(`${this.apiUrl}/top-products?metric=${metric}&limit=${limit}`);\r\n\r\n        // Mock data\r\n        const products = [\r\n            { id: 1, name: 'Wireless Headphones', category: 'Electronics', sales: 145, revenue: 1245.50, change: 12.5 },\r\n            { id: 2, name: 'Smart Watch', category: 'Wearables', sales: 98, revenue: 945.20, change: 8.3 },\r\n            { id: 3, name: 'Smartphone Case', category: 'Accessories', sales: 312, revenue: 625.40, change: -2.1 },\r\n            { id: 4, name: 'USB-C Cable', category: 'Accessories', sales: 254, revenue: 510.30, change: 5.2 },\r\n            { id: 5, name: 'Bluetooth Speaker', category: 'Electronics', sales: 87, revenue: 870.00, change: 3.7 }\r\n        ];\r\n\r\n        // Sort by the specified metric\r\n        const sortedProducts = [...products].sort((a, b) => b[metric] - a[metric]);\r\n\r\n        return of(sortedProducts.slice(0, limit));\r\n    }\r\n\r\n    /**\r\n     * Get recent activity items\r\n     * @param limit - Maximum number of activity items to return\r\n     * @returns Observable of recent activity items\r\n     */\r\n    getRecentActivity(limit: number = 5): Observable<any[]> {\r\n        // In production, use:\r\n        // return this.http.get<any[]>(`${this.apiUrl}/recent-activity?limit=${limit}`);\r\n\r\n        // Mock data\r\n        const activities = [\r\n            { id: 1, type: 'product_add', title: 'New product added: Wireless Headphones', user: 'John Smith', timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000) },\r\n            { id: 2, type: 'order_ship', title: 'Order #12345 shipped', description: 'Shipped to Jane Doe', timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000) },\r\n            { id: 3, type: 'stock_update', title: 'Product stock updated: Smart Watch', user: 'Sarah Connor', timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000) },\r\n            { id: 4, type: 'category_add', title: 'New category added: Accessories', user: 'John Smith', timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) }\r\n        ];\r\n\r\n        return of(activities.slice(0, limit));\r\n    }\r\n}",
            "properties": [
                {
                    "name": "activeProductCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "lowStockCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "ordersChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "revenueChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "totalCategories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "totalOrders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "totalProducts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "totalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DashboardStats-1"
        },
        {
            "name": "DialogConfig",
            "id": "interface-DialogConfig-a5de268e7648022aaf1d807d1763c05fd5cb27e9ece0a7cdc5e08054563c3dcb9d233a5ee575b3e37976fa274f76826192580cb7af3b341f515ab2f3914a2c5f",
            "file": "src/app/core/services/dialog.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport interface DialogConfig {\r\n    title: string;\r\n    message: string;\r\n    confirmText?: string;\r\n    cancelText?: string;\r\n    type?: 'info' | 'warning' | 'error' | 'confirm' | 'preview';\r\n    data?: any; // Added for preview type dialogs\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DialogService {\r\n    private readonly dialogSubject = new BehaviorSubject<DialogConfig | null>(null);\r\n    dialog$ = this.dialogSubject.asObservable();\r\n\r\n    private resolveRef: ((value: boolean) => void) | null = null;\r\n    private isDialogActive = false;\r\n\r\n    show(config: DialogConfig): Promise<boolean> {\r\n        // If a dialog is already active, close it first\r\n        if (this.isDialogActive) {\r\n            this.dialogSubject.next(null);\r\n        }\r\n\r\n        this.isDialogActive = true;\r\n        this.dialogSubject.next(config);\r\n\r\n        return new Promise((resolve) => {\r\n            this.resolveRef = resolve;\r\n        });\r\n    }\r\n\r\n    confirm(message: string, title = 'Confirm'): Promise<boolean> {\r\n        return this.show({\r\n            title,\r\n            message,\r\n            type: 'confirm',\r\n            confirmText: 'Confirm',\r\n            cancelText: 'Cancel'\r\n        });\r\n    }\r\n\r\n    handleAction(confirmed: boolean) {\r\n        if (this.resolveRef) {\r\n            this.resolveRef(confirmed);\r\n            this.resolveRef = null;\r\n        }\r\n        this.isDialogActive = false;\r\n        this.dialogSubject.next(null);\r\n    }\r\n}",
            "properties": [
                {
                    "name": "cancelText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "confirmText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"info\" | \"warning\" | \"error\" | \"confirm\" | \"preview\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-77f12e40debf61c7a7b60b3c0f010da66ea0dfe2f31cdf450577f6343b9dee42353e23672c6a8bc285c9220f16b7b7964ef59f91c48a72224d4d767a2945f03c",
            "file": "src/app/features/categories/components/category-form-dialog/category-form-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormGroup, FormBuilder, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Store } from '@ngrx/store';\r\nimport { Category } from 'src/app/shared/models/category.model';\r\nimport { selectAllCategories } from 'src/app/store/category/category.selectors';\r\nimport { FileUploadComponent } from 'src/app/shared/components/file-upload/file-upload.component';\r\ninterface DialogData {\r\n  category?: Category;\r\n  parentCategoryId?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-category-form-dialog',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatDialogModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    FileUploadComponent\r\n  ],\r\n  template: `\r\n    <div class=\"category-form-dialog\">\r\n      <!-- Dialog Header -->\r\n      <div class=\"flex items-center justify-between px-6 py-4 border-b border-slate-200 dark:border-slate-700\">\r\n        <h2 class=\"text-xl font-medium text-slate-900 dark:text-white\">{{ isEditing ? 'Edit' : 'Add' }} Category</h2>\r\n        <button mat-icon-button (click)=\"onCancel()\"\r\n            class=\"text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-full transition-colors\">\r\n            <mat-icon>close</mat-icon>\r\n        </button>\r\n      </div>\r\n      \r\n      <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n        <!-- Dialog Content -->\r\n        <div class=\"p-6\">\r\n          <div class=\"grid grid-cols-1 gap-4\">\r\n            <mat-form-field  class=\"w-full\">\r\n              <mat-label>Category Name</mat-label>\r\n              <input matInput formControlName=\"name\" placeholder=\"Enter category name\">\r\n              <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('name')?.errors?.['required']\">\r\n                Name is required\r\n              </mat-error>\r\n              <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('name')?.errors?.['maxlength']\">\r\n                Name cannot exceed 200 characters\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field  class=\"w-full\">\r\n              <mat-label>Description</mat-label>\r\n              <textarea matInput formControlName=\"description\" \r\n                        placeholder=\"Enter category description\" rows=\"3\">\r\n              </textarea>\r\n              <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('description')?.errors?.['required']\">\r\n                Description is required\r\n              </mat-error>\r\n              <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('description')?.errors?.['maxlength']\">\r\n                Description cannot exceed 2000 characters\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field  class=\"w-full\">\r\n              <mat-label>Parent Category</mat-label>\r\n              <mat-select formControlName=\"parentCategoryId\">\r\n                <mat-option [value]=\"null\">None</mat-option>\r\n                @for (category of categories$ | async; track category.id) {\r\n                  @if (!isEditing || category.id !== data.category?.id) {\r\n                    <mat-option [value]=\"category.id\">\r\n                      {{ category.name }}\r\n                    </mat-option>\r\n                  }\r\n                }\r\n              </mat-select>\r\n            </mat-form-field>\r\n\r\n            <div class=\"mt-4\">\r\n              <h3 class=\"text-lg font-medium text-slate-800 dark:text-slate-200 mb-3\">SEO Settings</h3>\r\n              \r\n              <mat-form-field  class=\"w-full\">\r\n                <mat-label>Meta Title</mat-label>\r\n                <input matInput formControlName=\"metaTitle\" \r\n                      placeholder=\"Enter meta title\">\r\n                <mat-hint class=\"text-xs text-orange-500\">{{ form.get('metaTitle')?.value?.length || 0 }}/200</mat-hint>\r\n                <mat-error class=\"text-xs text-red-500\" *ngIf=\"form.get('metaTitle')?.errors?.['maxlength']\">\r\n                  Meta title cannot exceed 200 characters\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <mat-form-field  class=\"w-full\">\r\n                <mat-label>Meta Description</mat-label>\r\n                <textarea matInput formControlName=\"metaDescription\" \r\n                          placeholder=\"Enter meta description\" rows=\"2\">\r\n                </textarea>\r\n                <mat-hint class=\"text-xs text-orange-500\">{{ form.get('metaDescription')?.value?.length || 0 }}/500</mat-hint>\r\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('metaDescription')?.errors?.['maxlength']\">\r\n                  Meta description cannot exceed 500 characters\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n\r\n            <app-file-upload\r\n              [currentImage]=\"data.category?.imageUrl\"\r\n              (fileSelected)=\"onImageSelected($event)\">\r\n            </app-file-upload>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Dialog Actions -->\r\n        <div class=\"flex justify-end gap-3 px-6 py-4 border-t border-slate-200 dark:border-slate-800 bg-slate-50 dark:bg-slate-800\">\r\n          <button mat-button type=\"button\" (click)=\"onCancel()\"\r\n              class=\"border border-slate-300 dark:border-slate-600 px-4 py-1 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-700\">\r\n              Cancel\r\n          </button>\r\n          <button mat-raised-button color=\"primary\" \r\n                  type=\"submit\"\r\n                  [disabled]=\"form.invalid || form.pristine\"\r\n                  class=\"bg-primary-600 text-white px-4 py-1 rounded-md hover:bg-primary-700 transition-colors\">\r\n              {{ isEditing ? 'Update' : 'Create' }}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class CategoryFormDialogComponent {\r\n  form: FormGroup;\r\n  categories$;\r\n  selectedFile: File | null = null;\r\n\r\n  get isEditing(): boolean {\r\n    return !!this.data.category;\r\n  }\r\n\r\n  constructor(\r\n    private readonly dialogRef: MatDialogRef<CategoryFormDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\r\n    private readonly fb: FormBuilder,\r\n    private readonly store: Store\r\n  ) {\r\n    this.categories$ = this.store.select(selectAllCategories);\r\n\r\n    this.form = this.fb.group({\r\n      name: ['', [Validators.required, Validators.maxLength(200)]],\r\n      description: ['', [Validators.required, Validators.maxLength(2000)]],\r\n      parentCategoryId: [data.parentCategoryId ?? null],\r\n      metaTitle: ['', [Validators.maxLength(200)]],\r\n      metaDescription: ['', [Validators.maxLength(500)]]\r\n    });\r\n\r\n    if (this.isEditing) {\r\n      this.form.patchValue({\r\n        name: data.category?.name,\r\n        description: data.category?.description,\r\n        parentCategoryId: data.category?.parentCategoryId,\r\n        metaTitle: data.category?.metaTitle,\r\n        metaDescription: data.category?.metaDescription\r\n      });\r\n    }\r\n  }\r\n\r\n  onImageSelected(file: File) {\r\n    this.selectedFile = file;\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.valid) {\r\n      const formValue = this.form.value;\r\n\r\n      const result = {\r\n        ...formValue,\r\n        file: this.selectedFile\r\n      };\r\n\r\n      this.dialogRef.close(result);\r\n    }\r\n  }\r\n\r\n  onCancel() {\r\n    this.dialogRef.close();\r\n  }\r\n}",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "parentCategoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-598fc639bf7dc1c9cc099c1c8afe0216798a9b6b86afa9c423a3b4ceb97a41e76071cbadcde9bb1b39aabf7785bb6084fdee860c123735546aaaa02bfb7e005d-1",
            "file": "src/app/features/orders/components/add-payment-dialog/add-payment-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\ninterface DialogData {\r\n    orderId: string;\r\n    amount: number;\r\n    currency: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-add-payment-dialog',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        MatDialogModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule\r\n    ],\r\n    template: `\r\n        <h2 mat-dialog-title>Add Payment</h2>\r\n        \r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <mat-dialog-content>\r\n                <div class=\"form-fields\">\r\n                    <mat-form-field >\r\n                        <mat-label>Transaction ID</mat-label>\r\n                        <input matInput formControlName=\"transactionId\" placeholder=\"Enter transaction ID\">\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('transactionId')?.errors?.['required']\">\r\n                            Transaction ID is required\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Payment Method</mat-label>\r\n                        <mat-select formControlName=\"method\">\r\n                            <mat-option value=\"credit_card\">Credit Card</mat-option>\r\n                            <mat-option value=\"bank_transfer\">Bank Transfer</mat-option>\r\n                            <mat-option value=\"paypal\">PayPal</mat-option>\r\n                        </mat-select>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('method')?.errors?.['required']\">\r\n                            Payment method is required\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Amount</mat-label>\r\n                        <input matInput type=\"number\" formControlName=\"amount\" \r\n                               [placeholder]=\"'Amount in ' + data.currency\">\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('amount')?.errors?.['required']\">\r\n                            Amount is required\r\n                        </mat-error>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('amount')?.errors?.['min']\">\r\n                            Amount must be greater than 0\r\n                        </mat-error>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('amount')?.errors?.['max']\">\r\n                            Amount cannot exceed order total\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Reference</mat-label>\r\n                        <input matInput formControlName=\"reference\" placeholder=\"Enter payment reference\">\r\n                    </mat-form-field>\r\n                </div>\r\n            </mat-dialog-content>\r\n\r\n            <mat-dialog-actions align=\"end\">\r\n                <button mat-button type=\"button\" (click)=\"onCancel()\">Cancel</button>\r\n                <button mat-raised-button color=\"primary\" type=\"submit\"\r\n                        [disabled]=\"form.invalid || form.pristine\">\r\n                    Add Payment\r\n                </button>\r\n            </mat-dialog-actions>\r\n        </form>\r\n    `,\r\n    styles: [`\r\n        .form-fields {\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 1rem;\r\n            min-width: 400px;\r\n        }\r\n    `]\r\n})\r\nexport class AddPaymentDialogComponent {\r\n    form: FormGroup;\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<AddPaymentDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: DialogData,\r\n        private fb: FormBuilder\r\n    ) {\r\n        this.form = this.fb.group({\r\n            transactionId: ['', Validators.required],\r\n            method: ['', Validators.required],\r\n            amount: [data.amount, [\r\n                Validators.required,\r\n                Validators.min(0.01),\r\n                Validators.max(data.amount)\r\n            ]],\r\n            reference: [''],\r\n            currency: [data.currency]\r\n        });\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.form.valid) {\r\n            this.dialogRef.close(this.form.value);\r\n        }\r\n    }\r\n\r\n    onCancel() {\r\n        this.dialogRef.close();\r\n    }\r\n}",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "orderId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DialogData-1"
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-436ac7a9b46d62e100d6ee687d0e85d62b7914b3b35d5c2d4b0bad35f51957ef9895f54ed14ccb33368bc7a53925be0da0db61a44c1137c68ed003d7dcd37593-2",
            "file": "src/app/features/orders/components/update-shipping-dialog/update-shipping-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\n\r\ninterface DialogData {\r\n    orderId: string;\r\n    currentShipping?: {\r\n        carrier: string;\r\n        trackingNumber: string;\r\n        estimatedDeliveryDate: string;\r\n    };\r\n}\r\n\r\ninterface CarrierOption {\r\n    value: string;\r\n    label: string;\r\n    trackingUrlPattern?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-update-shipping-dialog',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        MatDialogModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatDatepickerModule,\r\n        MatNativeDateModule\r\n    ],\r\n    template: `\r\n        <h2 mat-dialog-title>Update Shipping Information</h2>\r\n        \r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <mat-dialog-content>\r\n                <div class=\"form-fields\">\r\n                    <mat-form-field >\r\n                        <mat-label>Shipping Carrier</mat-label>\r\n                        <mat-select formControlName=\"carrier\">\r\n                            @for (carrier of carriers; track carrier.value) {\r\n                                <mat-option [value]=\"carrier.value\">\r\n                                    {{carrier.label}}\r\n                                </mat-option>\r\n                            }\r\n                        </mat-select>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('carrier')?.errors?.['required']\">\r\n                            Carrier is required\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Tracking Number</mat-label>\r\n                        <input matInput formControlName=\"trackingNumber\" \r\n                               placeholder=\"Enter tracking number\">\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('trackingNumber')?.errors?.['required']\">\r\n                            Tracking number is required\r\n                        </mat-error>\r\n                        @if (trackingUrl) {\r\n                            <mat-hint class=\"text-xs text-orange-500\">\r\n                                <a [href]=\"trackingUrl\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                    Track Package\r\n                                </a>\r\n                            </mat-hint>\r\n                        }\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Estimated Delivery Date</mat-label>\r\n                        <input matInput [matDatepicker]=\"picker\" \r\n                               formControlName=\"estimatedDeliveryDate\">\r\n                        <mat-datepicker-toggle matIconSuffix [for]=\"picker\">\r\n                        </mat-datepicker-toggle>\r\n                        <mat-datepicker #picker></mat-datepicker>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('estimatedDeliveryDate')?.errors?.['required']\">\r\n                            Estimated delivery date is required\r\n                        </mat-error>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('estimatedDeliveryDate')?.errors?.['min']\">\r\n                            Date cannot be in the past\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Notes</mat-label>\r\n                        <textarea matInput formControlName=\"notes\" \r\n                                  placeholder=\"Enter shipping notes\"\r\n                                  rows=\"3\"></textarea>\r\n                    </mat-form-field>\r\n                </div>\r\n            </mat-dialog-content>\r\n\r\n            <mat-dialog-actions align=\"end\">\r\n                <button mat-button type=\"button\" (click)=\"onCancel()\">Cancel</button>\r\n                <button mat-raised-button color=\"primary\" \r\n                        type=\"submit\"\r\n                        [disabled]=\"form.invalid || form.pristine\">\r\n                    Update Shipping\r\n                </button>\r\n            </mat-dialog-actions>\r\n        </form>\r\n    `,\r\n    styles: [`\r\n        .form-fields {\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 1rem;\r\n            min-width: 400px;\r\n            max-width: 600px;\r\n        }\r\n\r\n        textarea {\r\n            min-height: 100px;\r\n        }\r\n    `]\r\n})\r\nexport class UpdateShippingDialogComponent {\r\n    form: FormGroup;\r\n    carriers: CarrierOption[] = [\r\n        {\r\n            value: 'fedex',\r\n            label: 'FedEx',\r\n            trackingUrlPattern: 'https://www.fedex.com/fedextrack/?trknbr={tracking}'\r\n        },\r\n        {\r\n            value: 'ups',\r\n            label: 'UPS',\r\n            trackingUrlPattern: 'https://www.ups.com/track?tracknum={tracking}'\r\n        },\r\n        {\r\n            value: 'usps',\r\n            label: 'USPS',\r\n            trackingUrlPattern: 'https://tools.usps.com/go/TrackConfirmAction?tLabels={tracking}'\r\n        },\r\n        {\r\n            value: 'dhl',\r\n            label: 'DHL',\r\n            trackingUrlPattern: 'https://www.dhl.com/en/express/tracking.html?AWB={tracking}'\r\n        }\r\n    ];\r\n\r\n    get trackingUrl(): string | null {\r\n        const carrier = this.carriers.find(c => c.value === this.form.get('carrier')?.value);\r\n        const tracking = this.form.get('trackingNumber')?.value;\r\n\r\n        if (carrier?.trackingUrlPattern && tracking) {\r\n            return carrier.trackingUrlPattern.replace('{tracking}', tracking);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<UpdateShippingDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: DialogData,\r\n        private fb: FormBuilder\r\n    ) {\r\n        const today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n\r\n        this.form = this.fb.group({\r\n            carrier: [data.currentShipping?.carrier || '', Validators.required],\r\n            trackingNumber: [data.currentShipping?.trackingNumber || '', Validators.required],\r\n            estimatedDeliveryDate: [\r\n                data.currentShipping?.estimatedDeliveryDate ? new Date(data.currentShipping.estimatedDeliveryDate) : null,\r\n                [\r\n                    Validators.required,\r\n                    (control) => {\r\n                        const date = control.value;\r\n                        return date && date < today ? { min: true } : null;\r\n                    }\r\n                ]\r\n            ],\r\n            notes: ['']\r\n        });\r\n\r\n        // Update tracking URL when carrier or tracking number changes\r\n        this.form.get('carrier')?.valueChanges.subscribe(() => this.updateTrackingUrl());\r\n        this.form.get('trackingNumber')?.valueChanges.subscribe(() => this.updateTrackingUrl());\r\n    }\r\n\r\n    private updateTrackingUrl() {\r\n        // Force change detection for tracking URL\r\n        this.form.updateValueAndValidity();\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.form.valid) {\r\n            const formValue = this.form.value;\r\n            this.dialogRef.close({\r\n                ...formValue,\r\n                estimatedDeliveryDate: formValue.estimatedDeliveryDate.toISOString()\r\n            });\r\n        }\r\n    }\r\n\r\n    onCancel() {\r\n        this.dialogRef.close();\r\n    }\r\n}",
            "properties": [
                {
                    "name": "currentShipping",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "orderId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "DialogData-2"
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-072ebcff6ae4e7bbcdcf7b106fa64f9edb18dfd63f71a56a26a25792d84271ec083a85eb881769b03b2e8fa2597d41324e3a2636be7359ab744eb734b629c0ae-3",
            "file": "src/app/features/products/components/stock-management/stock-adjustment-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Store } from '@ngrx/store';\r\nimport { StockActions } from '../../../../store/stock/stock.actions';\r\n\r\ninterface DialogData {\r\n    productId: string;\r\n    productName: string;\r\n    currentStock: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-stock-adjustment-dialog',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        MatDialogModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatIconModule\r\n    ],\r\n    template: `\r\n        <div class=\"stock-adjustment-dialog\">\r\n            <!-- Dialog Header -->\r\n            <div class=\"flex items-center justify-between px-6 py-4 border-b border-slate-200 dark:border-slate-700\">\r\n                <h2 class=\"text-xl font-medium text-slate-900 dark:text-white\">Adjust Stock</h2>\r\n                <button mat-icon-button [mat-dialog-close]=\"false\"\r\n                    class=\"text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-full transition-colors\">\r\n                    <mat-icon>close</mat-icon>\r\n                </button>\r\n            </div>\r\n\r\n            <!-- Product Info -->\r\n            <div class=\"px-6 pt-6\">\r\n                <div class=\"bg-slate-50 dark:bg-slate-700 rounded-lg p-4 mb-6 border border-slate-200 dark:border-slate-700\">\r\n                    <div class=\"grid grid-cols-2 gap-2\">\r\n                        <p class=\"text-sm text-slate-500 dark:text-slate-400\">Product:</p>\r\n                        <p class=\"text-sm font-medium text-slate-900 dark:text-white\">{{ data.productName }}</p>\r\n\r\n                        <p class=\"text-sm text-slate-500 dark:text-slate-400\">Current Stock:</p>\r\n                        <p class=\"text-sm font-medium\">\r\n                            <span class=\"px-2 py-1 bg-slate-100 dark:bg-slate-700 rounded-full text-slate-700 dark:text-slate-300 font-medium\">\r\n                                {{ data.currentStock }}\r\n                            </span>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Form -->\r\n            <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" class=\"px-6 pb-6\">\r\n                <div class=\"grid grid-cols-1 gap-4\">\r\n                    <mat-form-field  class=\"w-full\">\r\n                        <mat-label>Adjustment Amount</mat-label>\r\n                        <input matInput type=\"number\" formControlName=\"adjustment\" placeholder=\"Enter adjustment value\">\r\n                        <mat-hint class=\"text-xs text-orange-500\">Use positive value to add stock, negative to remove</mat-hint>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('adjustment')?.errors?.['required']\">\r\n                            Adjustment amount is required\r\n                        </mat-error>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('adjustment')?.errors?.['max']\">\r\n                            Adjustment cannot exceed 10,000 units\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field  class=\"w-full\">\r\n                        <mat-label>Reason</mat-label>\r\n                        <textarea matInput formControlName=\"reason\" rows=\"3\"\r\n                            placeholder=\"Explain reason for adjustment\"></textarea>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('reason')?.errors?.['required']\">\r\n                            Reason is required\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n                <!-- Dialog Actions -->\r\n                <div class=\"flex justify-end gap-3 mt-6 pt-6 border-t border-slate-200 dark:border-slate-700\">\r\n                    <button mat-button type=\"button\" [mat-dialog-close]=\"false\"\r\n                        class=\"border border-slate-300 dark:border-slate-600 px-4 py-1 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-700\">\r\n                        Cancel\r\n                    </button>\r\n                    <button mat-raised-button color=\"primary\" type=\"submit\"\r\n                        class=\"bg-primary-600 text-white px-4 py-1 rounded-md hover:bg-primary-700 transition-colors flex items-center\"\r\n                        [disabled]=\"form.invalid || form.pristine\">\r\n                        <span>Adjust Stock</span>\r\n                        <mat-icon class=\"ml-1\">save</mat-icon>\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    `,\r\n    styles: []\r\n})\r\nexport class StockAdjustmentDialogComponent {\r\n    form: FormGroup;\r\n\r\n    constructor(\r\n        private readonly fb: FormBuilder,\r\n        private readonly dialogRef: MatDialogRef<StockAdjustmentDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: DialogData,\r\n        private readonly store: Store\r\n    ) {\r\n        this.form = this.fb.group({\r\n            adjustment: [0, [Validators.required, Validators.max(10000)]],\r\n            reason: ['', Validators.required]\r\n        });\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.form.valid) {\r\n            const { adjustment, reason } = this.form.value;\r\n\r\n            this.store.dispatch(StockActions.adjustStock({\r\n                adjustment: {\r\n                    productId: this.data.productId,\r\n                    adjustment,\r\n                    reason\r\n                }\r\n            }));\r\n\r\n            this.dialogRef.close(true);\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "currentStock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "productName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "DialogData-3"
        },
        {
            "name": "ElectronicsAttributes",
            "id": "interface-ElectronicsAttributes-051f98bf72e2dd7364d8ac66e9d2d60d9d04bdb8322648cb8075c27521bcb83b95569279bd5f8948ff8848b49ec03d114809e172b9f2e6dfece1410b7c67de8a",
            "file": "src/app/shared/models/product-type.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormlyFieldConfig } from '@ngx-formly/core';\r\n\r\nexport interface ProductType {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    icon: string;\r\n    attributes: ProductTypeAttribute[];\r\n    formConfig: FormlyFieldConfig[];\r\n}\r\n\r\nexport interface ProductTypeAttribute {\r\n    id: string;\r\n    name: string;\r\n    description?: string;\r\n    type: 'text' | 'number' | 'boolean' | 'select' | 'multiselect' | 'color' | 'size' | 'dimension';\r\n    isRequired: boolean;\r\n    defaultValue?: any;\r\n    options?: { label: string, value: any }[];\r\n    validation?: {\r\n        min?: number;\r\n        max?: number;\r\n        pattern?: string;\r\n        message?: string;\r\n    };\r\n    displayOrder: number;\r\n    isFilterable: boolean;\r\n    isComparable: boolean;\r\n}\r\n\r\n// Core product categories with specific attribute sets\r\nexport enum ProductCategory {\r\n    Clothing = 'clothing',\r\n    Electronics = 'electronics',\r\n    Furniture = 'furniture',\r\n    Books = 'books',\r\n    Groceries = 'groceries',\r\n    Beauty = 'beauty',\r\n    Toys = 'toys',\r\n    Other = 'other'\r\n}\r\n\r\n// Specific product types within categories\r\nexport interface ClothingAttributes {\r\n    size?: string[];\r\n    color?: string[];\r\n    material?: string;\r\n    gender?: 'men' | 'women' | 'unisex' | 'boys' | 'girls';\r\n    season?: string[];\r\n    care?: string;\r\n}\r\n\r\nexport interface ElectronicsAttributes {\r\n    brand?: string;\r\n    model?: string;\r\n    specifications?: Record<string, string>;\r\n    warranty?: string;\r\n    powerRequirements?: string;\r\n    connectivity?: string[];\r\n}\r\n\r\nexport interface BookAttributes {\r\n    author?: string;\r\n    publisher?: string;\r\n    isbn?: string;\r\n    language?: string;\r\n    format?: 'hardcover' | 'paperback' | 'ebook' | 'audiobook';\r\n    genre?: string[];\r\n    pages?: number;\r\n}\r\n\r\n// Utility types for product variants\r\nexport interface SizeVariant {\r\n    size: string;\r\n    stock: number;\r\n    price?: number; // Price adjustment if different from base\r\n    sku?: string;\r\n}\r\n\r\nexport interface ColorVariant {\r\n    color: string;\r\n    colorCode: string; // Hex code\r\n    imageUrl?: string;\r\n    stock: number;\r\n    price?: number; // Price adjustment if different from base\r\n    sku?: string;\r\n}\r\n\r\nexport interface SizeColorVariant extends SizeVariant, Omit<ColorVariant, 'stock' | 'price' | 'sku'> {\r\n    // Combined variant with specific stock/price for size+color combination\r\n    stock: number;\r\n    price?: number;\r\n    sku?: string;\r\n\r\n    // Additional properties can be added as needed\r\n    // e.g., discount, promotional price, etc.\r\n    discount?: number;\r\n    promotionalPrice?: number;\r\n    isFeatured?: boolean;\r\n    isAvailable?: boolean;\r\n\r\n}",
            "properties": [
                {
                    "name": "brand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "connectivity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "powerRequirements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "specifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "warranty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 58
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ErrorConfig",
            "id": "interface-ErrorConfig-b5ad96ea6e2381e8a6e468c3dc008445e134e4aeee359299f1e729b19901e197b3b46dbd4882e936256b5b33623726ef01f5a6c8361dc762aa220436b21e014a",
            "file": "src/app/features/error-pages/error-page.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\nexport interface ErrorConfig {\r\n    title: string;\r\n    message: string;\r\n    icon: string;\r\n    actionText?: string;\r\n    showHomeButton?: boolean;\r\n    showRetryButton?: boolean;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-error-page',\r\n    standalone: true,\r\n    imports: [CommonModule, MatButtonModule, MatIconModule],\r\n    template: `\r\n        <div class=\"error-container\">\r\n            <div class=\"error-content\">\r\n                <mat-icon class=\"error-icon\" aria-hidden=\"false\" aria-label={config.icon} [ngClass]=\"config.icon\" fontIcon=\"{{config.icon}}\"></mat-icon>\r\n                \r\n                <h1>{{config.title}}</h1>\r\n                <p class=\"error-message\">{{config.message}}</p>\r\n                \r\n                <div class=\"action-buttons\">\r\n                    @if (config.showRetryButton) {\r\n                        <button \r\n                            mat-stroked-button \r\n                            (click)=\"retryLastAction()\"\r\n                        >\r\n                            Try Again\r\n                        </button>\r\n                    }\r\n                    \r\n                    @if (config.showHomeButton) {\r\n                        <button \r\n                            mat-flat-button \r\n                            color=\"primary\"\r\n                            (click)=\"goHome()\"\r\n                        >\r\n                            Return Home\r\n                        </button>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .error-container {\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            justify-content: center;\r\n            min-height: 80vh;\r\n            padding: 1rem;\r\n            text-align: center;\r\n        }\r\n\r\n        .error-content {\r\n            max-width: 400px;\r\n        }\r\n\r\n        .error-icon {\r\n            font-size: 64px;\r\n            height: 64px;\r\n            width: 64px;\r\n            margin-bottom: 1.5rem;\r\n\r\n            &.error { color: var(--error); }\r\n            &.warning { color: var(--warning); }\r\n            &.info { color: var(--info); }\r\n        }\r\n\r\n        h1 {\r\n            font-size: 2rem;\r\n            font-weight: bold;\r\n            margin-bottom: 1rem;\r\n            color: var(--text-primary);\r\n        }\r\n\r\n        .error-message {\r\n            color: var(--text-secondary);\r\n            margin-bottom: 2rem;\r\n        }\r\n\r\n        .action-buttons {\r\n            display: flex;\r\n            gap: 1rem;\r\n            justify-content: center;\r\n        }\r\n    `]\r\n})\r\nexport class ErrorPageComponent {\r\n    @Input() config!: ErrorConfig;\r\n\r\n    constructor(private router: Router) { }\r\n\r\n    retryLastAction() {\r\n        window.location.reload();\r\n    }\r\n\r\n    goHome() {\r\n        this.router.navigate(['/']);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "actionText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "showHomeButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showRetryButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FilterField",
            "id": "interface-FilterField-8824c5ecdd7f8024cb29befede654a27fbc6bda9cbd9bbe48c9e0cd79fffa9f2774c7159f0571edc40e2069194c13c5a2d5916cabc5d0fc59429eb1cc30fe383",
            "file": "src/app/features/orders/components/advanced-search.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, FormArray, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Store } from '@ngrx/store';\r\nimport { OrderStatus } from 'src/app/shared/models/orders/order.model';\r\nimport { OrderActions } from 'src/app/store/order/order.actions';\r\n\r\ninterface FilterField {\r\n    type: 'text' | 'select' | 'number' | 'date' | 'boolean';\r\n    field: string;\r\n    label: string;\r\n    options?: { value: any; label: string; }[];\r\n}\r\n\r\n@Component({\r\n    selector: 'app-advanced-search',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        MatButtonModule,\r\n        MatExpansionModule,\r\n        MatFormFieldModule,\r\n        MatSelectModule,\r\n        MatInputModule,\r\n        MatChipsModule,\r\n        MatDatepickerModule,\r\n        MatIconModule\r\n    ],\r\n    template: `\r\n        <div class=\"search-builder\">\r\n            <!-- Quick Filters -->\r\n            <div class=\"quick-filters\">\r\n                <mat-chip-set>\r\n                    @for (preset of searchPresets; track preset.name) {\r\n                        <mat-chip \r\n                            (click)=\"applyPreset(preset)\"\r\n                            [attr.selected]=\"activePreset === preset.name ? true : null\">\r\n                            {{preset.label}}\r\n                        </mat-chip>\r\n                    }\r\n                </mat-chip-set>\r\n            </div>\r\n\r\n            <!-- Advanced Search Panel -->\r\n            <mat-expansion-panel>\r\n                <mat-expansion-panel-header>\r\n                    <mat-panel-title>\r\n                        Advanced Search\r\n                    </mat-panel-title>\r\n                </mat-expansion-panel-header>\r\n\r\n                <form [formGroup]=\"searchForm\" (ngSubmit)=\"applySearch()\">\r\n                    <div class=\"filters-grid\" formArrayName=\"filters\">\r\n                        @for (filter of filtersArray.controls; track filter; let i = $index) {\r\n                            <div class=\"filter-row\" [formGroupName]=\"i\">\r\n                                <!-- Field Selection -->\r\n                                <mat-form-field>\r\n                                    <mat-label>Field</mat-label>\r\n                                    <mat-select formControlName=\"field\" (selectionChange)=\"onFieldChange(i)\">\r\n                                        @for (field of availableFields; track field.field) {\r\n                                            <mat-option [value]=\"field.field\">\r\n                                                {{field.label}}\r\n                                            </mat-option>\r\n                                        }\r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n\r\n                                <!-- Operator Selection -->\r\n                                <mat-form-field>\r\n                                    <mat-label>Operator</mat-label>\r\n                                    <mat-select formControlName=\"operator\">\r\n                                        @for (op of getOperators(filter.value.field); track op.value) {\r\n                                            <mat-option [value]=\"op.value\">\r\n                                                {{op.label}}\r\n                                            </mat-option>\r\n                                        }\r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n\r\n                                <!-- Value Input -->\r\n                                @switch (getFieldType(filter.value.field)) {\r\n                                    @case ('text') {\r\n                                        <mat-form-field>\r\n                                            <input matInput formControlName=\"value\" placeholder=\"Value\">\r\n                                        </mat-form-field>\r\n                                    }\r\n                                    @case ('select') {\r\n                                        <mat-form-field>\r\n                                            <mat-select formControlName=\"value\">\r\n                                                @for (option of getFieldOptions(filter.value.field); track option.value) {\r\n                                                    <mat-option [value]=\"option.value\">\r\n                                                        {{option.label}}\r\n                                                    </mat-option>\r\n                                                }\r\n                                            </mat-select>\r\n                                        </mat-form-field>\r\n                                    }\r\n                                    @case ('number') {\r\n                                        <mat-form-field>\r\n                                            <input matInput type=\"number\" formControlName=\"value\" placeholder=\"Value\">\r\n                                        </mat-form-field>\r\n                                    }\r\n                                    @case ('date') {\r\n                                        <mat-form-field>\r\n                                            <input matInput [matDatepicker]=\"picker\" formControlName=\"value\">\r\n                                            <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                                            <mat-datepicker #picker></mat-datepicker>\r\n                                        </mat-form-field>\r\n                                    }\r\n                                }\r\n\r\n                                <!-- Remove Filter -->\r\n                                <button mat-icon-button (click)=\"removeFilter(i)\" type=\"button\">\r\n                                    <mat-icon>remove_circle</mat-icon>\r\n                                </button>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n\r\n                    <!-- Add Filter Button -->\r\n                    <div class=\"filter-actions\">\r\n                        <button mat-button type=\"button\" (click)=\"addFilter()\">\r\n                            <mat-icon>add</mat-icon> Add Filter\r\n                        </button>\r\n                        <button mat-button type=\"button\" (click)=\"saveAsPreset()\"\r\n                                [disabled]=\"!searchForm.valid\">\r\n                            Save as Preset\r\n                        </button>\r\n                    </div>\r\n\r\n                    <!-- Apply Filters -->\r\n                    <div class=\"search-actions\">\r\n                        <button mat-button type=\"button\" (click)=\"resetSearch()\">\r\n                            Reset\r\n                        </button>\r\n                        <button mat-raised-button color=\"primary\" type=\"submit\"\r\n                                [disabled]=\"!searchForm.valid\">\r\n                            Apply Filters\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </mat-expansion-panel>\r\n\r\n            <!-- Active Filters Display -->\r\n            @if (activeFilters.length > 0) {\r\n                <div class=\"active-filters\">\r\n                    <h4>Active Filters:</h4>\r\n                    <mat-chip-set>\r\n                        @for (filter of activeFilters; track filter) {\r\n                            <mat-chip (removed)=\"removeActiveFilter(filter)\">\r\n                                {{filter.label}}\r\n                                <mat-icon matChipRemove>cancel</mat-icon>\r\n                            </mat-chip>\r\n                        }\r\n                    </mat-chip-set>\r\n                </div>\r\n            }\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .search-builder {\r\n            padding: 1rem;\r\n        }\r\n\r\n        .quick-filters {\r\n            margin-bottom: 1rem;\r\n        }\r\n\r\n        .filters-grid {\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 1rem;\r\n            margin: 1rem 0;\r\n        }\r\n\r\n        .filter-row {\r\n            display: grid;\r\n            grid-template-columns: repeat(3, 1fr) auto;\r\n            gap: 1rem;\r\n            align-items: center;\r\n        }\r\n\r\n        .filter-actions {\r\n            display: flex;\r\n            gap: 1rem;\r\n            margin: 1rem 0;\r\n        }\r\n\r\n        .search-actions {\r\n            display: flex;\r\n            justify-content: flex-end;\r\n            gap: 1rem;\r\n            margin-top: 1rem;\r\n        }\r\n\r\n        .active-filters {\r\n            margin-top: 1rem;\r\n            \r\n            h4 {\r\n                margin: 0 0 0.5rem;\r\n                color: var(--text-secondary);\r\n            }\r\n        }\r\n    `]\r\n})\r\nexport class AdvancedSearchComponent implements OnInit {\r\n    searchForm: FormGroup;\r\n    activePreset: string | null = null;\r\n    activeFilters: Array<{ label: string; field: string; }> = [];\r\n\r\n    // Available fields for filtering\r\n    availableFields: FilterField[] = [\r\n        { field: 'orderNumber', label: 'Order Number', type: 'text' },\r\n        {\r\n            field: 'status', label: 'Status', type: 'select',\r\n            options: Object.entries(OrderStatus).map(([value, label]) => ({ value, label }))\r\n        },\r\n        { field: 'createdAt', label: 'Order Date', type: 'date' },\r\n        { field: 'total', label: 'Order Total', type: 'number' },\r\n        { field: 'customerEmail', label: 'Customer Email', type: 'text' },\r\n        {\r\n            field: 'shippingCarrier', label: 'Shipping Carrier', type: 'select',\r\n            options: [\r\n                { value: 'fedex', label: 'FedEx' },\r\n                { value: 'ups', label: 'UPS' },\r\n                { value: 'usps', label: 'USPS' }\r\n            ]\r\n        },\r\n        { field: 'shippingCountry', label: 'Shipping Country', type: 'text' },\r\n        {\r\n            field: 'paymentMethod', label: 'Payment Method', type: 'select',\r\n            options: [\r\n                { value: 'credit_card', label: 'Credit Card' },\r\n                { value: 'paypal', label: 'PayPal' },\r\n                { value: 'bank_transfer', label: 'Bank Transfer' }\r\n            ]\r\n        }\r\n    ];\r\n\r\n    // Common search presets\r\n    searchPresets = [\r\n        {\r\n            name: 'pending_orders',\r\n            label: 'Pending Orders',\r\n            filters: [\r\n                { field: 'status', operator: 'equals', value: 'pending' }\r\n            ]\r\n        },\r\n        {\r\n            name: 'todays_orders',\r\n            label: 'Today\\'s Orders',\r\n            filters: [\r\n                { field: 'createdAt', operator: 'equals', value: new Date() }\r\n            ]\r\n        },\r\n        {\r\n            name: 'high_value',\r\n            label: 'High Value Orders',\r\n            filters: [\r\n                { field: 'total', operator: 'greater_than', value: 1000 }\r\n            ]\r\n        }\r\n    ];\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private store: Store\r\n    ) {\r\n        this.searchForm = this.fb.group({\r\n            filters: this.fb.array([])\r\n        });\r\n    }\r\n\r\n    get filtersArray() {\r\n        return this.searchForm.get('filters') as FormArray;\r\n    }\r\n\r\n    ngOnInit() {\r\n        // Add initial empty filter\r\n        this.addFilter();\r\n    }\r\n\r\n    addFilter() {\r\n        const filterGroup = this.fb.group({\r\n            field: [''],\r\n            operator: [''],\r\n            value: ['']\r\n        });\r\n\r\n        this.filtersArray.push(filterGroup);\r\n    }\r\n\r\n    removeFilter(index: number) {\r\n        this.filtersArray.removeAt(index);\r\n    }\r\n\r\n    onFieldChange(index: number) {\r\n        const filter = this.filtersArray.at(index);\r\n        filter.patchValue({ operator: '', value: '' });\r\n    }\r\n\r\n    getFieldType(fieldName: string): string {\r\n        return this.availableFields.find(f => f.field === fieldName)?.type || 'text';\r\n    }\r\n\r\n    getFieldOptions(fieldName: string) {\r\n        return this.availableFields.find(f => f.field === fieldName)?.options || [];\r\n    }\r\n\r\n    getOperators(fieldName: string) {\r\n        const type = this.getFieldType(fieldName);\r\n        switch (type) {\r\n            case 'text':\r\n                return [\r\n                    { value: 'equals', label: 'Equals' },\r\n                    { value: 'contains', label: 'Contains' },\r\n                    { value: 'starts_with', label: 'Starts with' },\r\n                    { value: 'ends_with', label: 'Ends with' }\r\n                ];\r\n            case 'number':\r\n                return [\r\n                    { value: 'equals', label: 'Equals' },\r\n                    { value: 'greater_than', label: 'Greater than' },\r\n                    { value: 'less_than', label: 'Less than' },\r\n                    { value: 'between', label: 'Between' }\r\n                ];\r\n            case 'date':\r\n                return [\r\n                    { value: 'equals', label: 'On' },\r\n                    { value: 'after', label: 'After' },\r\n                    { value: 'before', label: 'Before' },\r\n                    { value: 'between', label: 'Between' }\r\n                ];\r\n            default:\r\n                return [\r\n                    { value: 'equals', label: 'Equals' },\r\n                    { value: 'not_equals', label: 'Does not equal' }\r\n                ];\r\n        }\r\n    }\r\n\r\n    applyPreset(preset: any) {\r\n        this.activePreset = preset.name;\r\n        this.filtersArray.clear();\r\n\r\n        preset.filters.forEach((filter: any) => {\r\n            this.filtersArray.push(this.fb.group({\r\n                field: [filter.field],\r\n                operator: [filter.operator],\r\n                value: [filter.value]\r\n            }));\r\n        });\r\n\r\n        this.applySearch();\r\n    }\r\n\r\n    applySearch() {\r\n        const filters = this.searchForm.value.filters;\r\n        this.store.dispatch(OrderActions.setFilters({ filters }));\r\n\r\n        // Update active filters display\r\n        this.updateActiveFilters(filters);\r\n    }\r\n\r\n    private updateActiveFilters(filters: any[]) {\r\n        this.activeFilters = filters.map(filter => {\r\n            const field = this.availableFields.find(f => f.field === filter.field);\r\n            const operator = this.getOperators(filter.field)\r\n                .find(op => op.value === filter.operator);\r\n\r\n            return {\r\n                field: filter.field,\r\n                label: `${field?.label} ${operator?.label} ${filter.value}`\r\n            };\r\n        });\r\n    }\r\n\r\n    removeActiveFilter(filter: any) {\r\n        const index = this.filtersArray.controls\r\n            .findIndex(control => control.value.field === filter.field);\r\n\r\n        if (index !== -1) {\r\n            this.removeFilter(index);\r\n            this.applySearch();\r\n        }\r\n    }\r\n\r\n    resetSearch() {\r\n        this.activePreset = null;\r\n        this.filtersArray.clear();\r\n        this.addFilter();\r\n        this.activeFilters = [];\r\n        this.store.dispatch(OrderActions.resetFilters());\r\n    }\r\n\r\n    async saveAsPreset() {\r\n        const dialogRef = this.dialog.open(SavePresetDialogComponent, {\r\n            data: {\r\n                filters: this.searchForm.value.filters\r\n            }\r\n        });\r\n\r\n        const result = await dialogRef.afterClosed().toPromise();\r\n        if (result) {\r\n            // Save preset logic\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"text\" | \"select\" | \"number\" | \"date\" | \"boolean\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ImportRow",
            "id": "interface-ImportRow-a55ac1aee6c1aacea6ae1dda6689ee8598b978725d22c80571688015cbc6b7ee3821428f50137ebb472fa79ff75d1fe15d062fa2e9d6371598ecf257b6e6371f",
            "file": "src/app/features/products/components/bulk-product-import/bulk-product-import.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ViewChild, ElementRef, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { read, utils, WorkBook, WorkSheet, write } from 'xlsx';\r\nimport { ProductService } from '../../../../core/services/product.service';\r\nimport { ErrorService } from '../../../../core/services/error.service';\r\nimport { CategoryService } from '../../../../core/services/category.service';\r\nimport { ProductTypeService } from '../../../../core/services/product-type.service';\r\nimport { Category } from '../../../../shared/models/category.model';\r\nimport { ProductType } from '../../../../shared/models/product-type.model';\r\nimport { forkJoin } from 'rxjs';\r\n\r\ninterface ImportRow {\r\n  rowNumber: number;\r\n  valid: boolean;\r\n  errors: string[];\r\n  data: Record<string, any>;\r\n  productId?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-bulk-product-import',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatStepperModule,\r\n    MatCardModule,\r\n    MatProgressBarModule,\r\n    MatSnackBarModule\r\n  ],\r\n  template: `\r\n    <div class=\"import-container\">\r\n      <mat-card>\r\n        <mat-card-header>\r\n          <mat-card-title>Bulk Product Import</mat-card-title>\r\n          <mat-card-subtitle>\r\n            Import multiple products at once from Excel or CSV files\r\n          </mat-card-subtitle>\r\n        </mat-card-header>\r\n        \r\n        <mat-card-content>\r\n          <mat-stepper linear #stepper>\r\n            <!-- Step 1: Upload File -->\r\n            <mat-step [completed]=\"!!workbook\">\r\n              <ng-template matStepLabel>Upload File</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>Upload Product Data</h3>\r\n                <p class=\"description\">Upload an Excel (.xlsx) or CSV file containing your product data.</p>\r\n                \r\n                <div \r\n                  class=\"upload-area\"\r\n                  [class.dragover]=\"isDragging\"\r\n                  (dragover)=\"onDragOver($event)\"\r\n                  (dragleave)=\"onDragLeave($event)\"\r\n                  (drop)=\"onDrop($event)\">\r\n                  \r\n                  <div class=\"upload-prompt\">\r\n                    <mat-icon>cloud_upload</mat-icon>\r\n                    <p>Drag & drop your file here or</p>\r\n                    <button \r\n                      mat-stroked-button \r\n                      color=\"primary\" \r\n                      (click)=\"fileInput.click()\">\r\n                      Browse Files\r\n                    </button>\r\n                    <input \r\n                      #fileInput \r\n                      type=\"file\" \r\n                      accept=\".xlsx,.csv\"\r\n                      style=\"display: none\"\r\n                      (change)=\"onFileSelected($event)\">\r\n                    \r\n                    <p class=\"file-info\" *ngIf=\"fileName\">\r\n                      Selected file: <strong>{{ fileName }}</strong>\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"template-section\">\r\n                  <h4>Need a template?</h4>\r\n                  <p>Download our template file to get started:</p>\r\n                  <button \r\n                    mat-stroked-button \r\n                    color=\"primary\"\r\n                    (click)=\"downloadTemplate()\">\r\n                    <mat-icon>download</mat-icon>\r\n                    Download Template\r\n                  </button>\r\n                </div>\r\n                \r\n                <div class=\"step-actions\">\r\n                  <button \r\n                    mat-button \r\n                    matStepperNext\r\n                    color=\"primary\"\r\n                    [disabled]=\"!workbook\">\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n            \r\n            <!-- Step 2: Validate Data -->\r\n            <mat-step [completed]=\"isValidationComplete\">\r\n              <ng-template matStepLabel>Validate Data</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>Validate Product Data</h3>\r\n                <p class=\"description\">Review and validate your product data before importing.</p>\r\n                \r\n                <div class=\"validation-actions\">\r\n                  <button \r\n                    mat-raised-button \r\n                    color=\"primary\"\r\n                    [disabled]=\"isValidating\"\r\n                    (click)=\"validateData()\">\r\n                    <mat-icon>check_circle</mat-icon>\r\n                    {{ isValidationComplete ? 'Re-validate Data' : 'Validate Data' }}\r\n                  </button>\r\n                </div>\r\n                \r\n                <div class=\"validation-progress\" *ngIf=\"isValidating\">\r\n                  <mat-progress-bar mode=\"determinate\" [value]=\"validationProgress\"></mat-progress-bar>\r\n                  <p>Validating... {{ validationProgress }}%</p>\r\n                </div>\r\n                \r\n                <div class=\"validation-results\" *ngIf=\"isValidationComplete\">\r\n                  <div class=\"results-summary\">\r\n                    <div class=\"summary-card valid\">\r\n                      <mat-icon>check_circle</mat-icon>\r\n                      <div class=\"summary-values\">\r\n                        <span class=\"value\">{{ validRows.length }}</span>\r\n                        <span class=\"label\">Valid Rows</span>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"summary-card invalid\" *ngIf=\"invalidRows.length > 0\">\r\n                      <mat-icon>error</mat-icon>\r\n                      <div class=\"summary-values\">\r\n                        <span class=\"value\">{{ invalidRows.length }}</span>\r\n                        <span class=\"label\">Invalid Rows</span>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"summary-card total\">\r\n                      <mat-icon>list</mat-icon>\r\n                      <div class=\"summary-values\">\r\n                        <span class=\"value\">{{ processedRows.length }}</span>\r\n                        <span class=\"label\">Total Rows</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div class=\"results-table\" *ngIf=\"invalidRows.length > 0\">\r\n                    <h4>Errors Found</h4>\r\n                    <div class=\"table-wrapper\">\r\n                      <table>\r\n                        <thead>\r\n                          <tr>\r\n                            <th>Row</th>\r\n                            <th>Errors</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          <tr *ngFor=\"let row of invalidRows\">\r\n                            <td>{{ row.rowNumber }}</td>\r\n                            <td>\r\n                              <ul class=\"error-list\">\r\n                                <li *ngFor=\"let error of row.errors\">{{ error }}</li>\r\n                              </ul>\r\n                            </td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"step-actions\">\r\n                  <button mat-button matStepperPrevious>Back</button>\r\n                  <button \r\n                    mat-button \r\n                    matStepperNext\r\n                    color=\"primary\"\r\n                    [disabled]=\"!isValidationComplete || validRows.length === 0\">\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n            \r\n            <!-- Step 3: Import Data -->\r\n            <mat-step>\r\n              <ng-template matStepLabel>Import Products</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>Import Products</h3>\r\n                <p class=\"description\">\r\n                  Ready to import {{ validRows.length }} products. This process may take a few minutes.\r\n                </p>\r\n                \r\n                <div class=\"import-options\">\r\n                  <div class=\"option\">\r\n                    <label>\r\n                      <input type=\"checkbox\" [(ngModel)]=\"importOptions.skipExisting\">\r\n                      Skip existing products (match by SKU)\r\n                    </label>\r\n                  </div>\r\n                  \r\n                  <div class=\"option\">\r\n                    <label>\r\n                      <input type=\"checkbox\" [(ngModel)]=\"importOptions.updateExisting\">\r\n                      Update existing products if found\r\n                    </label>\r\n                  </div>\r\n                  \r\n                  <div class=\"option\">\r\n                    <label>\r\n                      <input type=\"checkbox\" [(ngModel)]=\"importOptions.draftMode\">\r\n                      Import as draft (products will not be visible)\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"import-actions\">\r\n                  <button \r\n                    mat-raised-button \r\n                    color=\"primary\"\r\n                    [disabled]=\"isImporting || validRows.length === 0\"\r\n                    (click)=\"importProducts()\">\r\n                    <mat-icon>upload</mat-icon>\r\n                    Import {{ validRows.length }} Products\r\n                  </button>\r\n                </div>\r\n                \r\n                <div class=\"import-progress\" *ngIf=\"isImporting\">\r\n                  <mat-progress-bar mode=\"determinate\" [value]=\"importProgress\"></mat-progress-bar>\r\n                  <p>Importing... {{ importProgress }}%</p>\r\n                  <p class=\"import-status\">{{ currentImportStatus }}</p>\r\n                </div>\r\n                \r\n                <div class=\"import-results\" *ngIf=\"isImportComplete\">\r\n                  <div class=\"results-summary\">\r\n                    <div class=\"summary-card success\">\r\n                      <mat-icon>check_circle</mat-icon>\r\n                      <div class=\"summary-values\">\r\n                        <span class=\"value\">{{ importResults.success }}</span>\r\n                        <span class=\"label\">Successfully Imported</span>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"summary-card skipped\" *ngIf=\"importResults.skipped > 0\">\r\n                      <mat-icon>skip_next</mat-icon>\r\n                      <div class=\"summary-values\">\r\n                        <span class=\"value\">{{ importResults.skipped }}</span>\r\n                        <span class=\"label\">Skipped</span>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"summary-card failed\" *ngIf=\"importResults.failed > 0\">\r\n                      <mat-icon>error</mat-icon>\r\n                      <div class=\"summary-values\">\r\n                        <span class=\"value\">{{ importResults.failed }}</span>\r\n                        <span class=\"label\">Failed</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div class=\"results-actions\">\r\n                    <button \r\n                      mat-stroked-button \r\n                      (click)=\"downloadResultsReport()\">\r\n                      <mat-icon>download</mat-icon>\r\n                      Download Import Report\r\n                    </button>\r\n                    \r\n                    <button \r\n                      mat-stroked-button \r\n                      color=\"primary\"\r\n                      routerLink=\"/products/list\">\r\n                      <mat-icon>view_list</mat-icon>\r\n                      View Products\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"step-actions\">\r\n                  <button mat-button matStepperPrevious [disabled]=\"isImporting\">Back</button>\r\n                  <button \r\n                    mat-button \r\n                    (click)=\"resetImport()\"\r\n                    [disabled]=\"isImporting\">\r\n                    Start Over\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n          </mat-stepper>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .import-container {\r\n      max-width: 1200px;\r\n      margin: 0 auto;\r\n      padding: 1rem;\r\n    }\r\n    \r\n    .step-content {\r\n      margin: 1.5rem 0;\r\n    }\r\n    \r\n    .description {\r\n      color: #666;\r\n      margin-bottom: 1.5rem;\r\n    }\r\n    \r\n    .upload-area {\r\n      border: 2px dashed #ccc;\r\n      border-radius: 8px;\r\n      padding: 2rem;\r\n      text-align: center;\r\n      transition: all 0.2s ease;\r\n      cursor: pointer;\r\n      margin-bottom: 1.5rem;\r\n    }\r\n    \r\n    .upload-area.dragover {\r\n      border-color: #3f51b5;\r\n      background-color: rgba(63, 81, 181, 0.05);\r\n    }\r\n    \r\n    .upload-prompt {\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      gap: 0.5rem;\r\n    }\r\n    \r\n    .upload-prompt mat-icon {\r\n      font-size: 48px;\r\n      width: 48px;\r\n      height: 48px;\r\n      color: #3f51b5;\r\n    }\r\n    \r\n    .file-info {\r\n      margin-top: 1rem;\r\n      background-color: #e3f2fd;\r\n      padding: 0.5rem 1rem;\r\n      border-radius: 4px;\r\n      font-size: 0.875rem;\r\n    }\r\n    \r\n    .template-section {\r\n      margin-top: 2rem;\r\n      padding: 1rem;\r\n      border-radius: 8px;\r\n    }\r\n    \r\n    .template-section h4 {\r\n      margin-top: 0;\r\n    }\r\n    \r\n    .step-actions {\r\n      display: flex;\r\n      justify-content: flex-end;\r\n      gap: 1rem;\r\n      margin-top: 2rem;\r\n    }\r\n    \r\n    .validation-actions,\r\n    .import-actions {\r\n      margin: 1.5rem 0;\r\n      display: flex;\r\n      justify-content: center;\r\n    }\r\n    \r\n    .validation-progress,\r\n    .import-progress {\r\n      margin: 1.5rem 0;\r\n      text-align: center;\r\n    }\r\n    \r\n    .import-status {\r\n      font-style: italic;\r\n      margin-top: 0.5rem;\r\n    }\r\n    \r\n    .results-summary {\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      gap: 1rem;\r\n      margin-bottom: 1.5rem;\r\n    }\r\n    \r\n    .summary-card {\r\n      flex: 1;\r\n      min-width: 200px;\r\n      padding: 1rem;\r\n      border-radius: 8px;\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 1rem;\r\n    }\r\n    \r\n    .summary-card.valid,\r\n    .summary-card.success {\r\n      background-color: #e8f5e9;\r\n    }\r\n    \r\n    .summary-card.invalid,\r\n    .summary-card.failed {\r\n      background-color: #ffebee;\r\n    }\r\n    \r\n    .summary-card.total {\r\n      background-color: #e3f2fd;\r\n    }\r\n    \r\n    .summary-card.skipped {\r\n      background-color: #fff8e1;\r\n    }\r\n    \r\n    .summary-card mat-icon {\r\n      font-size: 32px;\r\n      width: 32px;\r\n      height: 32px;\r\n    }\r\n    \r\n    .summary-card.valid mat-icon,\r\n    .summary-card.success mat-icon {\r\n      color: #4caf50;\r\n    }\r\n    \r\n    .summary-card.invalid mat-icon,\r\n    .summary-card.failed mat-icon {\r\n      color: #f44336;\r\n    }\r\n    \r\n    .summary-card.total mat-icon {\r\n      color: #2196f3;\r\n    }\r\n    \r\n    .summary-card.skipped mat-icon {\r\n      color: #ff9800;\r\n    }\r\n    \r\n    .summary-values {\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n    \r\n    .summary-values .value {\r\n      font-size: 1.5rem;\r\n      font-weight: bold;\r\n    }\r\n    \r\n    .summary-values .label {\r\n      font-size: 0.875rem;\r\n      color: #666;\r\n    }\r\n    \r\n    .table-wrapper {\r\n      overflow-x: auto;\r\n      margin-bottom: 1.5rem;\r\n    }\r\n    \r\n    table {\r\n      width: 100%;\r\n      border-collapse: collapse;\r\n    }\r\n    \r\n    th, td {\r\n      padding: 0.75rem;\r\n      text-align: left;\r\n      border-bottom: 1px solid #eee;\r\n    }\r\n    \r\n    th {\r\n      background-color: #f5f5f5;\r\n      font-weight: bold;\r\n    }\r\n    \r\n    .error-list {\r\n      margin: 0;\r\n      padding-left: 1.5rem;\r\n      color: #f44336;\r\n    }\r\n    \r\n    .import-options {\r\n      margin: 1.5rem 0;\r\n      padding: 1rem;\r\n      background-color: #f5f5f5;\r\n      border-radius: 8px;\r\n    }\r\n    \r\n    .option {\r\n      margin-bottom: 0.5rem;\r\n    }\r\n    \r\n    .results-actions {\r\n      display: flex;\r\n      gap: 1rem;\r\n      margin-top: 1.5rem;\r\n      justify-content: center;\r\n    }\r\n  `]\r\n})\r\nexport class BulkProductImportComponent implements OnInit {\r\n  @ViewChild('fileInput') fileInput!: ElementRef<HTMLInputElement>;\r\n\r\n  // File upload\r\n  isDragging = false;\r\n  fileName = '';\r\n  workbook: WorkBook | null = null;\r\n\r\n  // Validation\r\n  isValidating = false;\r\n  isValidationComplete = false;\r\n  validationProgress = 0;\r\n  processedRows: ImportRow[] = [];\r\n\r\n  // Import\r\n  isImporting = false;\r\n  isImportComplete = false;\r\n  importProgress = 0;\r\n  currentImportStatus = '';\r\n  importOptions = {\r\n    skipExisting: true,\r\n    updateExisting: false,\r\n    draftMode: true\r\n  };\r\n  importResults = {\r\n    success: 0,\r\n    failed: 0,\r\n    skipped: 0\r\n  };\r\n\r\n  // Cached data\r\n  categories: Category[] = [];\r\n  productTypes: ProductType[] = [];\r\n\r\n  constructor(\r\n    private productService: ProductService,\r\n    private categoryService: CategoryService,\r\n    private productTypeService: ProductTypeService,\r\n    private errorService: ErrorService,\r\n    private snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    // Load reference data\r\n    forkJoin({\r\n      categories: this.categoryService.getCategories(),\r\n      productTypes: this.productTypeService.getProductTypes()\r\n    }).subscribe({\r\n      next: (data) => {\r\n        this.categories = data.categories;\r\n        this.productTypes = data.productTypes;\r\n      },\r\n      error: (error) => {\r\n        this.errorService.addError({\r\n          code: 'REFERENCE_DATA_ERROR',\r\n          message: 'Failed to load reference data',\r\n          severity: 'error'\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  get validRows(): ImportRow[] {\r\n    return this.processedRows.filter(row => row.valid);\r\n  }\r\n\r\n  get invalidRows(): ImportRow[] {\r\n    return this.processedRows.filter(row => !row.valid);\r\n  }\r\n\r\n  onDragOver(event: DragEvent): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.isDragging = true;\r\n  }\r\n\r\n  onDragLeave(event: DragEvent): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.isDragging = false;\r\n  }\r\n\r\n  onDrop(event: DragEvent): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.isDragging = false;\r\n\r\n    if (event.dataTransfer?.files.length) {\r\n      this.handleFile(event.dataTransfer.files[0]);\r\n    }\r\n  }\r\n\r\n  onFileSelected(event: Event): void {\r\n    const input = event.target as HTMLInputElement;\r\n    if (input.files?.length) {\r\n      this.handleFile(input.files[0]);\r\n    }\r\n  }\r\n\r\n  handleFile(file: File): void {\r\n    // Check file type\r\n    const validExtensions = ['.xlsx', '.csv'];\r\n    const fileExt = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();\r\n\r\n    if (!validExtensions.includes(fileExt)) {\r\n      this.errorService.addError({\r\n        code: 'INVALID_FILE_TYPE',\r\n        message: 'Please upload an Excel (.xlsx) or CSV file',\r\n        severity: 'warning'\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.fileName = file.name;\r\n\r\n    // Read file\r\n    const reader = new FileReader();\r\n    reader.onload = (e: ProgressEvent<FileReader>) => {\r\n      try {\r\n        const data = e.target?.result;\r\n        this.workbook = read(data, { type: 'array' });\r\n\r\n        // Reset validation state\r\n        this.isValidationComplete = false;\r\n        this.processedRows = [];\r\n      } catch (error) {\r\n        this.errorService.addError({\r\n          code: 'FILE_READ_ERROR',\r\n          message: 'Failed to read file. Please make sure it is a valid Excel or CSV file.',\r\n          severity: 'error'\r\n        });\r\n        this.workbook = null;\r\n        this.fileName = '';\r\n      }\r\n    };\r\n\r\n    reader.readAsArrayBuffer(file);\r\n  }\r\n\r\n  downloadTemplate(): void {\r\n    // Create template workbook\r\n    const wb = utils.book_new();\r\n\r\n    // Create headers\r\n    const headers = [\r\n      'name', 'description', 'shortDescription', 'sku', 'barcode',\r\n      'price', 'compareAtPrice', 'currency', 'stock', 'lowStockThreshold',\r\n      'categoryName', 'productType', 'status', 'visibility',\r\n      'imageUrl1', 'imageUrl2', 'imageUrl3',\r\n      'attribute1Name', 'attribute1Value', 'attribute2Name', 'attribute2Value',\r\n      'seoTitle', 'seoDescription', 'seoKeywords'\r\n    ];\r\n\r\n    // Create sample data\r\n    const sampleData = [\r\n      {\r\n        name: 'Sample T-Shirt',\r\n        description: 'A comfortable cotton t-shirt',\r\n        shortDescription: 'Cotton t-shirt',\r\n        sku: 'TS-001',\r\n        barcode: '123456789012',\r\n        price: 19.99,\r\n        compareAtPrice: 24.99,\r\n        currency: 'USD',\r\n        stock: 100,\r\n        lowStockThreshold: 10,\r\n        categoryName: 'Clothing',\r\n        productType: 'clothing',\r\n        status: 'active',\r\n        visibility: 'visible',\r\n        imageUrl1: 'https://example.com/image1.jpg',\r\n        imageUrl2: 'https://example.com/image2.jpg',\r\n        imageUrl3: '',\r\n        attribute1Name: 'sizes',\r\n        attribute1Value: 'S,M,L,XL',\r\n        attribute2Name: 'colors',\r\n        attribute2Value: 'Red,Blue,Green',\r\n        seoTitle: 'Sample T-Shirt - High Quality',\r\n        seoDescription: 'Buy our comfortable cotton t-shirt',\r\n        seoKeywords: 'tshirt,cotton,clothing'\r\n      },\r\n      {\r\n        name: 'Wireless Headphones',\r\n        description: 'Premium wireless headphones with noise cancellation',\r\n        shortDescription: 'Wireless headphones',\r\n        sku: 'HP-001',\r\n        barcode: '123456789013',\r\n        price: 149.99,\r\n        compareAtPrice: 199.99,\r\n        currency: 'USD',\r\n        stock: 50,\r\n        lowStockThreshold: 5,\r\n        categoryName: 'Electronics',\r\n        productType: 'electronics',\r\n        status: 'active',\r\n        visibility: 'featured',\r\n        imageUrl1: 'https://example.com/headphones1.jpg',\r\n        imageUrl2: '',\r\n        imageUrl3: '',\r\n        attribute1Name: 'brand',\r\n        attribute1Value: 'SoundMaster',\r\n        attribute2Name: 'color',\r\n        attribute2Value: 'Black',\r\n        seoTitle: 'Premium Wireless Headphones',\r\n        seoDescription: 'High-quality wireless headphones with noise cancellation',\r\n        seoKeywords: 'headphones,wireless,electronics'\r\n      }\r\n    ];\r\n\r\n    // Add instructions sheet\r\n    const instructionsWs = utils.aoa_to_sheet([\r\n      ['Product Import Template - Instructions'],\r\n      [''],\r\n      ['1. Do not modify the header row'],\r\n      ['2. Each row represents one product'],\r\n      ['3. Required fields: name, description, sku, price, currency, stock, categoryName, productType'],\r\n      ['4. Multiple attribute values should be comma-separated'],\r\n      ['5. Valid product types: ' + this.productTypes.map(t => t.id).join(', ')],\r\n      ['6. Valid statuses: draft, active, out_of_stock, discontinued'],\r\n      ['7. Valid visibility options: visible, hidden, featured'],\r\n      ['8. Valid currencies: USD, EUR, GBP, CAD, AUD']\r\n    ]);\r\n\r\n    // Adjust column widths for instructions\r\n    const instructionsCols = [{ wch: 80 }]; // Set width for first column\r\n    instructionsWs['!cols'] = instructionsCols;\r\n\r\n    // Add template sheet with headers and sample data\r\n    const templateWs = utils.json_to_sheet(sampleData, { header: headers });\r\n\r\n    // Adjust column widths for template\r\n    const templateCols = headers.map(h => ({ wch: 20 }));\r\n    templateWs['!cols'] = templateCols;\r\n\r\n    // Add sheets to workbook\r\n    utils.book_append_sheet(wb, instructionsWs, 'Instructions');\r\n    utils.book_append_sheet(wb, templateWs, 'Template');\r\n\r\n    // Generate buffer and create download link\r\n    const wbout = write(wb, { bookType: 'xlsx', type: 'array' });\r\n\r\n    // Create Blob and download\r\n    const blob = new Blob([wbout], { type: 'application/octet-stream' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = 'product_import_template.xlsx';\r\n    a.click();\r\n\r\n    // Clean up\r\n    URL.revokeObjectURL(url);\r\n  }\r\n\r\n  validateData(): void {\r\n    if (!this.workbook || this.isValidating) return;\r\n\r\n    this.isValidating = true;\r\n    this.validationProgress = 0;\r\n    this.processedRows = [];\r\n\r\n    // Get the first sheet\r\n    const sheetName = this.workbook.SheetNames[0];\r\n    const worksheet = this.workbook.Sheets[sheetName];\r\n\r\n    // Convert to JSON\r\n    const rows = utils.sheet_to_json(worksheet, { raw: false }) as Record<string, any>[];\r\n\r\n    if (rows.length === 0) {\r\n      this.errorService.addError({\r\n        code: 'EMPTY_FILE',\r\n        message: 'The file contains no data rows',\r\n        severity: 'warning'\r\n      });\r\n      this.isValidating = false;\r\n      return;\r\n    }\r\n\r\n    // Process rows in batches to avoid blocking UI\r\n    const batchSize = 10;\r\n    const totalRows = rows.length;\r\n    let processedCount = 0;\r\n\r\n    const processBatch = (startIndex: number) => {\r\n      const endIndex = Math.min(startIndex + batchSize, totalRows);\r\n\r\n      for (let i = startIndex; i < endIndex; i++) {\r\n        const row = rows[i];\r\n        this.processedRows.push(this.validateRow(row, i + 1));\r\n        processedCount++;\r\n      }\r\n\r\n      // Update progress\r\n      this.validationProgress = Math.round((processedCount / totalRows) * 100);\r\n\r\n      // Process next batch or finish\r\n      if (processedCount < totalRows) {\r\n        setTimeout(() => processBatch(endIndex), 0);\r\n      } else {\r\n        this.isValidating = false;\r\n        this.isValidationComplete = true;\r\n\r\n        if (this.invalidRows.length > 0) {\r\n          this.snackBar.open(\r\n            `Validation complete with ${this.invalidRows.length} errors`,\r\n            'Dismiss',\r\n            { duration: 5000 }\r\n          );\r\n        } else {\r\n          this.snackBar.open(\r\n            `All ${this.validRows.length} rows are valid`,\r\n            'Dismiss',\r\n            { duration: 3000 }\r\n          );\r\n        }\r\n      }\r\n    };\r\n\r\n    // Start processing\r\n    processBatch(0);\r\n  }\r\n\r\n  validateRow(row: Record<string, any>, rowNumber: number): ImportRow {\r\n    const errors: string[] = [];\r\n    const data = { ...row };\r\n\r\n    // Required fields validation\r\n    const requiredFields = ['name', 'description', 'sku', 'price', 'stock', 'categoryName', 'productType'];\r\n\r\n    for (const field of requiredFields) {\r\n      if (!row[field]) {\r\n        errors.push(`Missing required field: ${field}`);\r\n      }\r\n    }\r\n\r\n    // Price validation\r\n    if (row['price'] && isNaN(parseFloat(row['price']))) {\r\n      errors.push('Price must be a number');\r\n    }\r\n\r\n    // Stock validation\r\n    if (row['stock'] && isNaN(parseInt(row['stock']))) {\r\n      errors.push('Stock must be an integer');\r\n    }\r\n\r\n    // Category validation\r\n    if (row['categoryName'] && !this.findCategoryByName(row['categoryName'])) {\r\n      errors.push(`Category not found: ${row['categoryName']}`);\r\n    }\r\n\r\n    // Product type validation\r\n    if (row['productType'] && !this.findProductTypeById(row['productType'])) {\r\n      errors.push(`Product type not found: ${row['productType']}`);\r\n    }\r\n\r\n    // Status validation\r\n    if (row['status'] && !['draft', 'active', 'out_of_stock', 'discontinued'].includes(row['status'].toLowerCase())) {\r\n      errors.push(`Invalid status: ${row['status']}. Must be one of: draft, active, out_of_stock, discontinued`);\r\n    }\r\n\r\n    // Visibility validation\r\n    if (row['visibility'] && !['visible', 'hidden', 'featured'].includes(row['visibility'].toLowerCase())) {\r\n      errors.push(`Invalid visibility: ${row['visibility']}. Must be one of: visible, hidden, featured`);\r\n    }\r\n\r\n    // Currency validation\r\n    if (row['currency'] && !['USD', 'EUR', 'GBP', 'CAD', 'AUD'].includes(row['currency'].toUpperCase())) {\r\n      errors.push(`Invalid currency: ${row['currency']}. Must be one of: USD, EUR, GBP, CAD, AUD`);\r\n    }\r\n\r\n    return {\r\n      rowNumber,\r\n      valid: errors.length === 0,\r\n      errors,\r\n      data\r\n    };\r\n  }\r\n\r\n  importProducts(): void {\r\n    if (this.isImporting || this.validRows.length === 0) return;\r\n\r\n    this.isImporting = true;\r\n    this.isImportComplete = false;\r\n    this.importProgress = 0;\r\n    this.currentImportStatus = 'Preparing import...';\r\n\r\n    // Reset results\r\n    this.importResults = {\r\n      success: 0,\r\n      failed: 0,\r\n      skipped: 0\r\n    };\r\n\r\n    // Process rows in batches\r\n    const batchSize = 5; // Small batch size for API calls\r\n    const totalRows = this.validRows.length;\r\n    let processedCount = 0;\r\n\r\n    const processBatch = async (startIndex: number) => {\r\n      const endIndex = Math.min(startIndex + batchSize, totalRows);\r\n\r\n      for (let i = startIndex; i < endIndex; i++) {\r\n        const row = this.validRows[i];\r\n        this.currentImportStatus = `Importing product ${i + 1} of ${totalRows}: ${row.data['name']}`;\r\n\r\n        try {\r\n          // If skip existing is enabled, check if product exists\r\n          if (this.importOptions.skipExisting) {\r\n            // In a real app, we would check if the product exists\r\n            // For now, we'll simulate this with a random outcome\r\n            const exists = Math.random() > 0.8;\r\n\r\n            if (exists) {\r\n              if (this.importOptions.updateExisting) {\r\n                // Update existing product\r\n                row.productId = 'updated-' + Math.random().toString(36).substring(2);\r\n                this.importResults.success++;\r\n              } else {\r\n                // Skip existing product\r\n                row.productId = 'skipped';\r\n                this.importResults.skipped++;\r\n                processedCount++;\r\n                continue;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Convert row data to product\r\n          const product = this.convertRowToProduct(row.data);\r\n\r\n          // Simulate API call\r\n          await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));\r\n\r\n          // Simulate success (90% chance)\r\n          if (Math.random() > 0.1) {\r\n            row.productId = 'imported-' + Math.random().toString(36).substring(2);\r\n            this.importResults.success++;\r\n          } else {\r\n            throw new Error('Simulated import failure');\r\n          }\r\n        } catch (error) {\r\n          console.error('Import error for row', row.rowNumber, error);\r\n          row.errors.push('Import failed: ' + (error as Error).message);\r\n          this.importResults.failed++;\r\n        }\r\n\r\n        processedCount++;\r\n        this.importProgress = Math.round((processedCount / totalRows) * 100);\r\n      }\r\n\r\n      // Process next batch or finish\r\n      if (processedCount < totalRows) {\r\n        setTimeout(() => processBatch(endIndex), 0);\r\n      } else {\r\n        this.isImporting = false;\r\n        this.isImportComplete = true;\r\n        this.currentImportStatus = 'Import complete!';\r\n\r\n        this.snackBar.open(\r\n          `Import complete: ${this.importResults.success} succeeded, ${this.importResults.failed} failed, ${this.importResults.skipped} skipped`,\r\n          'Dismiss',\r\n          { duration: 5000 }\r\n        );\r\n      }\r\n    };\r\n\r\n    // Start processing\r\n    processBatch(0);\r\n  }\r\n\r\n  resetImport(): void {\r\n    this.workbook = null;\r\n    this.fileName = '';\r\n    this.isValidationComplete = false;\r\n    this.processedRows = [];\r\n    this.isImportComplete = false;\r\n\r\n    // Reset file input\r\n    if (this.fileInput?.nativeElement) {\r\n      this.fileInput.nativeElement.value = '';\r\n    }\r\n  }\r\n\r\n  downloadResultsReport(): void {\r\n    // Create report workbook\r\n    const wb = utils.book_new();\r\n\r\n    // Prepare data\r\n    const reportData = this.processedRows.map(row => ({\r\n      'Row': row.rowNumber,\r\n      'Product Name': row.data['name'],\r\n      'SKU': row.data['sku'],\r\n      'Status': row.valid ? (row.productId ? 'Imported' : 'Ready') : 'Invalid',\r\n      'Product ID': row.productId || '',\r\n      'Errors': row.errors.join('; ')\r\n    }));\r\n\r\n    // Create summary sheet\r\n    const summaryData = [\r\n      ['Import Results Summary'],\r\n      [''],\r\n      ['Date:', new Date().toLocaleString()],\r\n      ['File:', this.fileName],\r\n      [''],\r\n      ['Total Rows:', this.processedRows.length],\r\n      ['Valid Rows:', this.validRows.length],\r\n      ['Invalid Rows:', this.invalidRows.length],\r\n      [''],\r\n      ['Import Results:'],\r\n      ['Successfully Imported:', this.importResults.success],\r\n      ['Failed:', this.importResults.failed],\r\n      ['Skipped:', this.importResults.skipped]\r\n    ];\r\n\r\n    const summaryWs = utils.aoa_to_sheet(summaryData);\r\n\r\n    // Create details sheet\r\n    const detailsWs = utils.json_to_sheet(reportData);\r\n\r\n    // Add sheets to workbook\r\n    utils.book_append_sheet(wb, summaryWs, 'Summary');\r\n    utils.book_append_sheet(wb, detailsWs, 'Details');\r\n\r\n    // Generate buffer and create download link\r\n    const wbout = write(wb, { bookType: 'xlsx', type: 'array' });\r\n\r\n    // Create Blob and download\r\n    const blob = new Blob([wbout], { type: 'application/octet-stream' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `product_import_report_${new Date().toISOString().slice(0, 10)}.xlsx`;\r\n    a.click();\r\n\r\n    // Clean up\r\n    URL.revokeObjectURL(url);\r\n  }\r\n\r\n  private findCategoryByName(name: string): Category | undefined {\r\n    return this.categories.find(c =>\r\n      c.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n  }\r\n\r\n  private findProductTypeById(id: string): ProductType | undefined {\r\n    return this.productTypes.find(t => t.id === id);\r\n  }\r\n\r\n  private convertRowToProduct(row: Record<string, any>): any {\r\n    // In a real app, this would convert the row data to a proper product object\r\n    // For now, we'll just return a simplified version\r\n\r\n    const category = this.findCategoryByName(row['categoryName']);\r\n\r\n    return {\r\n      name: row['name'],\r\n      description: row['description'],\r\n      shortDescription: row['shortDescription'],\r\n      sku: row['sku'],\r\n      barcode: row['barcode'],\r\n      price: parseFloat(row['price']),\r\n      currency: (row['currency'] || 'USD').toUpperCase(),\r\n      compareAtPrice: row['compareAtPrice'] ? parseFloat(row['compareAtPrice']) : undefined,\r\n      categoryId: category?.id,\r\n      stock: parseInt(row['stock']),\r\n      lowStockThreshold: row['lowStockThreshold'] ? parseInt(row['lowStockThreshold']) : undefined,\r\n      status: row['status'] || (this.importOptions.draftMode ? 'draft' : 'active'),\r\n      visibility: row['visibility'] || (this.importOptions.draftMode ? 'hidden' : 'visible'),\r\n      productTypeId: row['productType'],\r\n      // Images would be processed here\r\n      // Attributes would be processed here\r\n    };\r\n  }\r\n}",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | any>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "rowNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "valid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoadingState",
            "id": "interface-LoadingState-60f89c91c08d2d37ad3054b16e496ceeae7ea890526f0d2bf32df8c4f32528e8508d6317907f174db791b61a08beb5777575dd38d57a7d98768b8204d9dce0b6",
            "file": "src/app/core/services/loading.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport interface LoadingState {\r\n    loading: boolean;\r\n    message?: string | null;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class LoadingService {\r\n    private loadingSubject = new BehaviorSubject<LoadingState>({\r\n        loading: false,\r\n        message: null\r\n    });\r\n\r\n    loading$ = this.loadingSubject.asObservable();\r\n    private loadingCount = 0;\r\n\r\n    show(message?: string) {\r\n        this.loadingCount++;\r\n        if (this.loadingCount === 1) {\r\n            this.loadingSubject.next({\r\n                loading: true,\r\n                message\r\n            });\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        this.loadingCount--;\r\n        if (this.loadingCount <= 0) {\r\n            this.loadingCount = 0;\r\n            this.loadingSubject.next({\r\n                loading: false,\r\n                message: null\r\n            });\r\n        }\r\n    }\r\n\r\n    // Force reset loading state\r\n    reset() {\r\n        this.loadingCount = 0;\r\n        this.loadingSubject.next({\r\n            loading: false,\r\n            message: null\r\n        });\r\n    }\r\n}",
            "properties": [
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Money",
            "id": "interface-Money-ad37da7a304a8cb0533b19ea3c9063095bf6c6ef44f43139b6432cd07c74fbc3654aa02247f7c0060e5ed6d63961617c677c51a6715189c8d1f466cca58a7f1a",
            "file": "src/app/shared/models/value-object.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Address {\r\n    firstName: string;\r\n    lastName: string;\r\n    addressLine1: string;\r\n    addressLine2?: string;\r\n    city: string;\r\n    state: string;\r\n    postalCode: string;\r\n    country: string;\r\n    phone?: string;\r\n}\r\n\r\n\r\nexport interface Money {\r\n    amount: number;\r\n    currency: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NavItem",
            "id": "interface-NavItem-5044d203ad85e8017cc09816e7fa833cd1e445005c8c4db2d4fe2591a484c1995f4f004f456d036887c5ee57727241b65a06ae835fd38263b067cc639460eda3",
            "file": "src/app/layout/sidebar/sidebar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input, ViewEncapsulation, signal } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Router, NavigationEnd } from '@angular/router';\r\nimport { ThemeService } from '../../core/services/theme.service';\r\nimport { AuthService } from 'src/app/core/services/auth.service';\r\nimport { User } from 'src/app/shared/models/auth.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { Subject, takeUntil, filter } from 'rxjs';\r\n\r\ninterface NavItem {\r\n  path: string;\r\n  icon: string;\r\n  label: string;\r\n  children?: NavItem[];\r\n}\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    MatIconModule,\r\n    MatTooltipModule\r\n  ],\r\n  template: `\r\n    <aside \r\n      class=\"h-full w-[280px] bg-white dark:bg-slate-800 border-r border-slate-200 dark:border-slate-700 flex flex-col\"\r\n      [class.w-[280px]]=\"!collapsed\"\r\n      [class.w-[70px]]=\"collapsed\">\r\n      \r\n      <!-- Sidebar Header -->\r\n      <div class=\"flex items-center justify-between h-16 px-4 border-b border-slate-200 dark:border-slate-700\">\r\n        <!-- Logo -->\r\n        <div class=\"flex items-center\">\r\n          <div class=\"flex items-center justify-center w-10 h-10 rounded-lg bg-primary-600 text-white\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n            </svg>\r\n          </div>\r\n          <h1 *ngIf=\"!collapsed\" class=\"ml-3 text-lg font-semibold text-slate-900 dark:text-white\">Admin</h1>\r\n        </div>\r\n        \r\n        <!-- Collapse Button -->\r\n        <button \r\n          (click)=\"toggleCollapse()\" \r\n          class=\"p-1.5 rounded-full text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors\"\r\n          [matTooltip]=\"collapsed ? 'Expand' : 'Collapse'\">\r\n          <svg \r\n            xmlns=\"http://www.w3.org/2000/svg\" \r\n            class=\"h-5 w-5\" \r\n            viewBox=\"0 0 20 20\" \r\n            fill=\"currentColor\" \r\n            [class.rotate-180]=\"collapsed\">\r\n            <path fill-rule=\"evenodd\" d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\" clip-rule=\"evenodd\" />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      \r\n      <!-- Navigation -->\r\n      <nav class=\"flex-1 overflow-y-auto py-4 px-3\">\r\n        <!-- Main Navigation Section -->\r\n        <div class=\"mb-6\">\r\n          <div *ngIf=\"!collapsed\" class=\"px-4 mb-2\">\r\n            <h2 class=\"text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\r\n              Main\r\n            </h2>\r\n          </div>\r\n          \r\n          <!-- Dashboard Link -->\r\n          <a \r\n            routerLink=\"/\" \r\n            routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\" \r\n            [routerLinkActiveOptions]=\"{exact: true}\"\r\n            class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors mb-1 cursor-pointer\"\r\n            [class.justify-center]=\"collapsed\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" />\r\n            </svg>\r\n            <span *ngIf=\"!collapsed\" class=\"ml-3\">Dashboard</span>\r\n          </a>\r\n          \r\n          <!-- Products Section -->\r\n          <div class=\"mb-1\">\r\n            <!-- Products Dropdown Toggle -->\r\n            <div \r\n              (click)=\"toggleGroup('products')\"\r\n              class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors cursor-pointer\"\r\n              [class.justify-center]=\"collapsed\"\r\n              [class.bg-primary-50]=\"expandedGroups.has('products') && !collapsed\"\r\n              [class.dark:bg-slate-700]=\"expandedGroups.has('products') && !collapsed\"\r\n              [class.text-primary-700]=\"expandedGroups.has('products') && !collapsed\"\r\n              [class.dark:text-primary-400]=\"expandedGroups.has('products') && !collapsed\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n              </svg>\r\n              <span *ngIf=\"!collapsed\" class=\"ml-3 flex-1\">Products</span>\r\n              <svg *ngIf=\"!collapsed\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 transition-transform duration-200 ease-in-out\" [class.rotate-90]=\"expandedGroups.has('products')\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\r\n              </svg>\r\n            </div>\r\n            \r\n            <!-- Products Submenu -->\r\n            <div *ngIf=\"expandedGroups.has('products') && !collapsed\" class=\"mt-1 ml-4 space-y-1\">\r\n              <a \r\n                routerLink=\"/products/list\" \r\n                routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\" \r\n                class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors text-sm\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 10h16M4 14h16M4 18h16\" />\r\n                </svg>\r\n                <span class=\"ml-3\">Product List</span>\r\n              </a>\r\n              <a \r\n                routerLink=\"/products/add\" \r\n                routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\" \r\n                class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors text-sm\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n                </svg>\r\n                <span class=\"ml-3\">Add Product</span>\r\n              </a>\r\n              <a \r\n                routerLink=\"/categories\" \r\n                routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\" \r\n                class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors text-sm\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\" />\r\n                </svg>\r\n                <span class=\"ml-3\">Categories</span>\r\n              </a>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Stats Link -->\r\n          <a \r\n            routerLink=\"/statistics\" \r\n            routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\" \r\n            class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors mb-1 cursor-pointer\"\r\n            [class.justify-center]=\"collapsed\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\r\n            </svg>\r\n            <span *ngIf=\"!collapsed\" class=\"ml-3\">Statistics</span>\r\n          </a>\r\n          \r\n          <!-- Orders Link -->\r\n          <a \r\n            routerLink=\"/orders\" \r\n            routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\" \r\n            class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors mb-1 cursor-pointer\"\r\n            [class.justify-center]=\"collapsed\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z\" />\r\n            </svg>\r\n            <span *ngIf=\"!collapsed\" class=\"ml-3\">Orders</span>\r\n            <span \r\n              *ngIf=\"newOrdersCount > 0\" \r\n              class=\"ml-auto inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white bg-red-500 rounded-full\">\r\n              {{ newOrdersCount }}\r\n            </span>\r\n          </a>\r\n        </div>\r\n        \r\n        <!-- System Section -->\r\n        <div>\r\n          <div *ngIf=\"!collapsed\" class=\"px-4 mb-2\">\r\n            <h2 class=\"text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\r\n              System\r\n            </h2>\r\n          </div>\r\n          \r\n          <!-- Settings Link -->\r\n          <a \r\n            routerLink=\"/settings\" \r\n            routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\" \r\n            class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors mb-1 cursor-pointer\"\r\n            [class.justify-center]=\"collapsed\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n            </svg>\r\n            <span *ngIf=\"!collapsed\" class=\"ml-3\">Settings</span>\r\n          </a>\r\n          \r\n          <!-- Users Link -->\r\n          <a \r\n            routerLink=\"/users\" \r\n            routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\" \r\n            class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors mb-1 cursor-pointer\"\r\n            [class.justify-center]=\"collapsed\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z\" />\r\n            </svg>\r\n            <span *ngIf=\"!collapsed\" class=\"ml-3\">Users</span>\r\n          </a>\r\n        </div>\r\n      </nav>\r\n      \r\n      <!-- User Profile & Theme Toggle -->\r\n      <div class=\"border-t border-slate-200 dark:border-slate-700 p-4\">\r\n        <!-- User Profile -->\r\n        <div *ngIf=\"!collapsed\" class=\"flex items-center mb-4\">\r\n          <div class=\"flex-shrink-0\">\r\n            <div class=\"w-10 h-10 rounded-full bg-primary-100 dark:bg-slate-700 flex items-center justify-center text-primary-700 dark:text-primary-400\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          <div class=\"ml-3 flex-1\">\r\n            <p class=\"text-sm font-medium text-slate-900 dark:text-white\">\r\n              {{ currentUser()?.username || 'Guest User' }}\r\n            </p>\r\n            <p class=\"text-xs text-slate-500 dark:text-slate-400\">\r\n              {{ currentUser()?.roles || 'No role assigned' }}\r\n            </p>\r\n          </div>\r\n          <button \r\n            (click)=\"toggleUserMenu()\"\r\n            class=\"p-1 rounded-full text-slate-400 hover:text-slate-500 dark:hover:text-slate-300\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n              <path fill-rule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        \r\n        <!-- User Menu Dropdown -->\r\n        <div *ngIf=\"isUserMenuOpen && !collapsed\" class=\"mt-2 mb-4 py-1 bg-white dark:bg-slate-700 rounded-md shadow-lg border border-slate-200 dark:border-slate-700\">\r\n          <a \r\n            routerLink=\"/profile\" \r\n            class=\"flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 mr-3\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\r\n            </svg>\r\n            My Profile\r\n          </a>\r\n          <a \r\n            (click)=\"logout()\"\r\n            class=\"flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 cursor-pointer\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 mr-3\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\r\n            </svg>\r\n            Logout\r\n          </a>\r\n        </div>\r\n        \r\n        <!-- Theme Toggle -->\r\n        <div [class.flex]=\"!collapsed\" [class.justify-center]=\"collapsed\" class=\"items-center\">\r\n          <button \r\n            (click)=\"toggleTheme()\"\r\n            class=\"p-2 rounded-md text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors w-full flex items-center justify-center sm:justify-start\">\r\n            <svg *ngIf=\"isDarkTheme\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\" />\r\n            </svg>\r\n            <svg *ngIf=\"!isDarkTheme\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\" />\r\n            </svg>\r\n            <span *ngIf=\"!collapsed\" class=\"ml-3\">{{ isDarkTheme ? 'Light Mode' : 'Dark Mode' }}</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </aside>\r\n  `,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    '[class.dark]': 'isDarkTheme',\r\n    '[class.collapsed]': 'collapsed'\r\n  }\r\n})\r\nexport class SidebarComponent implements OnInit, OnDestroy {\r\n  @Input() collapsed = false;\r\n  currentUser = signal<User | null>(null);\r\n  isDarkTheme = false;\r\n  sidebarVisible = true;\r\n  expandedGroups: Set<string> = new Set();\r\n  newOrdersCount = 0; // Example count, replace with actual logic\r\n  private destroy$ = new Subject<void>();\r\n  isUserMenuOpen = false;\r\n\r\n  constructor(\r\n    private themeService: ThemeService,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.isDarkTheme = this.themeService.isDarkTheme();\r\n    this.authService.currentUser$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(user => {\r\n        this.currentUser.set(user);\r\n      });\r\n    this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      takeUntil(this.destroy$)\r\n    ).subscribe(() => {\r\n      this.sidebarVisible = true; // Show sidebar on navigation\r\n    });\r\n  }\r\n\r\n  toggleCollapse(): void {\r\n    this.collapsed = !this.collapsed;\r\n  }\r\n\r\n  toggleGroup(group: string): void {\r\n    if (this.expandedGroups.has(group)) {\r\n      this.expandedGroups.delete(group);\r\n    } else {\r\n      this.expandedGroups.add(group);\r\n    }\r\n  }\r\n  toggleUserMenu(): void {\r\n    this.isUserMenuOpen = !this.isUserMenuOpen;\r\n  }\r\n  toggleTheme(): void {\r\n    this.isDarkTheme = !this.isDarkTheme;\r\n    this.themeService.toggleTheme();\r\n  }\r\n  logout(): void {\r\n    this.authService.logout().then(() => { // Ensure logout is awaited\r\n      this.router.navigate(['/login']); // Redirect to login page after logout\r\n    });\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavItem[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Order",
            "id": "interface-Order-1198aa1916a0751b277aa2c35b2e0c78ba4bac936c74e8811e4c962271e825a55fed79342872bab606bcb5924a7c4c3c23f2104b2cb32220ef20a9689ed436d7",
            "file": "src/app/shared/models/order.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AuditableEntity } from \"./auditableEntity.model\";\r\nimport { Money, Address } from \"./value-object.model\";\r\n\r\n\r\n// Admin.WebApp/src/app/shared/models/order.model.ts\r\nexport interface Order {\r\n    id: string;\r\n    orderNumber: string;\r\n    customerId: string;\r\n    status: OrderStatus; // Enum mapping to backend string\r\n    subtotal: number;\r\n    shippingCost: number;\r\n    tax: number;\r\n    total: number;\r\n    currency: string;\r\n    shippingAddress: Address;\r\n    billingAddress: Address;\r\n    notes?: string;\r\n    cancelledAt?: string; // ISO date string\r\n    cancellationReason?: string;\r\n    items: OrderItem[];\r\n    payment?: Payment;\r\n    paymentStatus: PaymentStatus; // Enum mapping to backend string\r\n    paymentMethod: string;\r\n    shippingInfo?: ShippingInfo;\r\n    createdAt: string; // ISO date string\r\n    createdBy?: string;\r\n    lastModifiedAt?: string; // ISO date string\r\n    lastModifiedBy?: string;\r\n}\r\nexport interface OrderItem {\r\n    id: string;\r\n    productId: string;\r\n    productName: string;\r\n    sku: string;\r\n    variantId?: string;\r\n    quantity: number;\r\n    unitPrice: number;\r\n    currency: string;\r\n    total: number;\r\n}\r\nexport enum OrderStatus {\r\n    Pending = 'pending',\r\n    Confirmed = 'confirmed',\r\n    Processing = 'processing',\r\n    Shipped = 'shipped',\r\n    Delivered = 'delivered',\r\n    Cancelled = 'cancelled'\r\n}\r\n\r\nexport enum PaymentStatus {\r\n    Pending = 'pending',\r\n    Authorized = 'authorized',\r\n    Paid = 'paid',\r\n    Failed = 'failed',\r\n    Refunded = 'refunded'\r\n}\r\n\r\nexport interface Payment {\r\n    transactionId: string;\r\n    method: string;\r\n    amount: number;\r\n    currency: string;\r\n    status: PaymentStatus;\r\n    processedAt: string; // ISO date string\r\n}\r\nexport interface ShippingInfo {\r\n    carrier: string;\r\n    trackingNumber: string;\r\n    estimatedDeliveryDate: string; // ISO date string\r\n    actualDeliveryDate?: string; // ISO date string\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "billingAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Address",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "cancellationReason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "cancelledAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "createdBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "customerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OrderItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "lastModifiedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "lastModifiedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "notes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "orderNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "payment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Payment",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "paymentMethod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "paymentStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaymentStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "shippingAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Address",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "shippingCost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "shippingInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ShippingInfo",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OrderStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "subtotal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "tax",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "OrderItem",
            "id": "interface-OrderItem-1198aa1916a0751b277aa2c35b2e0c78ba4bac936c74e8811e4c962271e825a55fed79342872bab606bcb5924a7c4c3c23f2104b2cb32220ef20a9689ed436d7",
            "file": "src/app/shared/models/order.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AuditableEntity } from \"./auditableEntity.model\";\r\nimport { Money, Address } from \"./value-object.model\";\r\n\r\n\r\n// Admin.WebApp/src/app/shared/models/order.model.ts\r\nexport interface Order {\r\n    id: string;\r\n    orderNumber: string;\r\n    customerId: string;\r\n    status: OrderStatus; // Enum mapping to backend string\r\n    subtotal: number;\r\n    shippingCost: number;\r\n    tax: number;\r\n    total: number;\r\n    currency: string;\r\n    shippingAddress: Address;\r\n    billingAddress: Address;\r\n    notes?: string;\r\n    cancelledAt?: string; // ISO date string\r\n    cancellationReason?: string;\r\n    items: OrderItem[];\r\n    payment?: Payment;\r\n    paymentStatus: PaymentStatus; // Enum mapping to backend string\r\n    paymentMethod: string;\r\n    shippingInfo?: ShippingInfo;\r\n    createdAt: string; // ISO date string\r\n    createdBy?: string;\r\n    lastModifiedAt?: string; // ISO date string\r\n    lastModifiedBy?: string;\r\n}\r\nexport interface OrderItem {\r\n    id: string;\r\n    productId: string;\r\n    productName: string;\r\n    sku: string;\r\n    variantId?: string;\r\n    quantity: number;\r\n    unitPrice: number;\r\n    currency: string;\r\n    total: number;\r\n}\r\nexport enum OrderStatus {\r\n    Pending = 'pending',\r\n    Confirmed = 'confirmed',\r\n    Processing = 'processing',\r\n    Shipped = 'shipped',\r\n    Delivered = 'delivered',\r\n    Cancelled = 'cancelled'\r\n}\r\n\r\nexport enum PaymentStatus {\r\n    Pending = 'pending',\r\n    Authorized = 'authorized',\r\n    Paid = 'paid',\r\n    Failed = 'failed',\r\n    Refunded = 'refunded'\r\n}\r\n\r\nexport interface Payment {\r\n    transactionId: string;\r\n    method: string;\r\n    amount: number;\r\n    currency: string;\r\n    status: PaymentStatus;\r\n    processedAt: string; // ISO date string\r\n}\r\nexport interface ShippingInfo {\r\n    carrier: string;\r\n    trackingNumber: string;\r\n    estimatedDeliveryDate: string; // ISO date string\r\n    actualDeliveryDate?: string; // ISO date string\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "productName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "sku",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "unitPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "variantId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "OrderListParams",
            "id": "interface-OrderListParams-4065c829466e6f05d1a9c250d83cf39dd9d23df3279ac5eca75b250ee0f8e1e08cf4b6eafd5f9cedcc7616ee1503079a61674f421d8d05db60f87220c60e6ce4",
            "file": "src/app/core/services/order.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { map, Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { PagedResponse } from '../../shared/models/paged-response.model';\r\nimport { Order, OrderStatus, PaymentStatus } from '../../shared/models/order.model';\r\n\r\nexport interface OrderListParams {\r\n    searchTerm?: string;\r\n    status?: OrderStatus;\r\n    fromDate?: string;\r\n    toDate?: string;\r\n    minTotal?: number;\r\n    maxTotal?: number;\r\n    sortBy?: string;\r\n    sortDirection?: 'asc' | 'desc';\r\n    page?: number;\r\n    pageSize?: number;\r\n}\r\n\r\nexport interface UpdateOrderStatusRequest {\r\n    newStatus: OrderStatus;\r\n}\r\n\r\nexport interface AddPaymentRequest {\r\n    transactionId: string;\r\n    method: string;\r\n    amount: number;\r\n    currency: string;\r\n    status: PaymentStatus;\r\n}\r\n\r\nexport interface UpdateShippingRequest {\r\n    carrier: string;\r\n    trackingNumber: string;\r\n    shippingCost: number;\r\n    currency: string;\r\n    estimatedDeliveryDate: string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n    private readonly apiUrl = environment.apiUrls.admin.orders;\r\n\r\n    constructor(private readonly http: HttpClient) { }\r\n\r\n    getOrder(id: string): Observable<Order> {\r\n        return this.http.get<any>(`${this.apiUrl}/${id}`).pipe(\r\n            map(this.mapOrderFromApi)\r\n        );\r\n    }\r\n\r\n    getOrders(params: any): Observable<any> {\r\n        return this.http.get<any>(this.apiUrl, { params }).pipe(\r\n            map(response => ({\r\n                ...response,\r\n                items: response.items.map(this.mapOrderFromApi)\r\n            }))\r\n        );\r\n    }\r\n\r\n    private mapOrderFromApi(order: any): Order {\r\n        return {\r\n            id: order.id,\r\n            orderNumber: order.orderNumber,\r\n            customerId: order.customerId,\r\n            status: order.status as OrderStatus,\r\n            subtotal: order.subtotal,\r\n            shippingCost: order.shippingCost,\r\n            tax: order.tax,\r\n            total: order.total,\r\n            currency: order.currency,\r\n            shippingAddress: order.shippingAddress,\r\n            billingAddress: order.billingAddress,\r\n            notes: order.notes,\r\n            cancelledAt: order.cancelledAt,\r\n            cancellationReason: order.cancellationReason,\r\n            items: (order.items || []).map((item: any) => ({\r\n                id: item.id,\r\n                productId: item.productId,\r\n                productName: item.productName,\r\n                sku: item.sku,\r\n                variantId: item.variantId,\r\n                quantity: item.quantity,\r\n                unitPrice: item.unitPrice,\r\n                currency: item.currency,\r\n                total: item.total\r\n            })),\r\n            payment: order.payment ? {\r\n                transactionId: order.payment.transactionId,\r\n                method: order.payment.method,\r\n                amount: order.payment.amount,\r\n                currency: order.payment.currency,\r\n                status: order.payment.status as PaymentStatus,\r\n                processedAt: order.payment.processedAt\r\n            } : undefined,\r\n            paymentStatus: order.paymentStatus as PaymentStatus,\r\n            paymentMethod: order.paymentMethod,\r\n            shippingInfo: order.shippingInfo ? {\r\n                carrier: order.shippingInfo.carrier,\r\n                trackingNumber: order.shippingInfo.trackingNumber,\r\n                estimatedDeliveryDate: order.shippingInfo.estimatedDeliveryDate,\r\n                actualDeliveryDate: order.shippingInfo.actualDeliveryDate\r\n            } : undefined,\r\n            createdAt: order.createdAt,\r\n            createdBy: order.createdBy,\r\n            lastModifiedAt: order.lastModifiedAt,\r\n            lastModifiedBy: order.lastModifiedBy\r\n        };\r\n    }\r\n\r\n    updateOrderStatus(orderId: string, request: UpdateOrderStatusRequest): Observable<void> {\r\n        return this.http.put<void>(`${this.apiUrl}/${orderId}/status`, request);\r\n    }\r\n\r\n    addPayment(orderId: string, payment: AddPaymentRequest): Observable<void> {\r\n        return this.http.post<void>(`${this.apiUrl}/${orderId}/payments`, payment);\r\n    }\r\n\r\n    updateShipping(orderId: string, shipping: UpdateShippingRequest): Observable<void> {\r\n        return this.http.put<void>(`${this.apiUrl}/${orderId}/shipping`, shipping);\r\n    }\r\n}",
            "properties": [
                {
                    "name": "fromDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "maxTotal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "minTotal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "searchTerm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "sortBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "sortDirection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"asc\" | \"desc\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OrderStatus",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "toDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "OrderState",
            "id": "interface-OrderState-465700dab3c93ec82f017ca284b4a2d71344cb07110f3347c121e763902408036e31f81c55cfb8f48e1b9194b2345c7148610668d6e973bfaedc88fc16b92a99",
            "file": "src/app/store/order/order.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Order } from 'src/app/shared/models/order.model';\r\nimport { OrderListParams } from '../../core/services/order.service';\r\n\r\nexport interface OrderState {\r\n    orders: Order[];\r\n    selectedOrder: Order | null;\r\n    loading: boolean;\r\n    error: string | null;\r\n    filters: OrderListParams;\r\n    pagination: {\r\n        currentPage: number;\r\n        pageSize: number;\r\n        totalItems: number;\r\n    };\r\n}\r\n\r\nexport const initialOrderState: OrderState = {\r\n    orders: [],\r\n    selectedOrder: null,\r\n    loading: false,\r\n    error: null,\r\n    filters: {\r\n        page: 1,\r\n        pageSize: 10,\r\n        sortBy: 'createdAt',\r\n        sortDirection: 'desc'\r\n    },\r\n    pagination: {\r\n        currentPage: 1,\r\n        pageSize: 10,\r\n        totalItems: 0\r\n    }\r\n};",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OrderListParams",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "orders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Order[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "selectedOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Order | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PagedResponse",
            "id": "interface-PagedResponse-626dbe65d31176cb4539c1a41b88a45bef33777845ab053281d5044b9d1add86e10edd0a30b3892c09e6ae14677a7028d973b510b70ed337068f1856e7b39d66",
            "file": "src/app/shared/models/paged-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PagedResponse<T> {\r\n    items: T[];\r\n    totalCount: number;\r\n    page: number;\r\n    pageSize: number;\r\n    totalPages: number;\r\n    hasNextPage: boolean;\r\n    hasPreviousPage: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "hasNextPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "hasPreviousPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Payment",
            "id": "interface-Payment-1198aa1916a0751b277aa2c35b2e0c78ba4bac936c74e8811e4c962271e825a55fed79342872bab606bcb5924a7c4c3c23f2104b2cb32220ef20a9689ed436d7",
            "file": "src/app/shared/models/order.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AuditableEntity } from \"./auditableEntity.model\";\r\nimport { Money, Address } from \"./value-object.model\";\r\n\r\n\r\n// Admin.WebApp/src/app/shared/models/order.model.ts\r\nexport interface Order {\r\n    id: string;\r\n    orderNumber: string;\r\n    customerId: string;\r\n    status: OrderStatus; // Enum mapping to backend string\r\n    subtotal: number;\r\n    shippingCost: number;\r\n    tax: number;\r\n    total: number;\r\n    currency: string;\r\n    shippingAddress: Address;\r\n    billingAddress: Address;\r\n    notes?: string;\r\n    cancelledAt?: string; // ISO date string\r\n    cancellationReason?: string;\r\n    items: OrderItem[];\r\n    payment?: Payment;\r\n    paymentStatus: PaymentStatus; // Enum mapping to backend string\r\n    paymentMethod: string;\r\n    shippingInfo?: ShippingInfo;\r\n    createdAt: string; // ISO date string\r\n    createdBy?: string;\r\n    lastModifiedAt?: string; // ISO date string\r\n    lastModifiedBy?: string;\r\n}\r\nexport interface OrderItem {\r\n    id: string;\r\n    productId: string;\r\n    productName: string;\r\n    sku: string;\r\n    variantId?: string;\r\n    quantity: number;\r\n    unitPrice: number;\r\n    currency: string;\r\n    total: number;\r\n}\r\nexport enum OrderStatus {\r\n    Pending = 'pending',\r\n    Confirmed = 'confirmed',\r\n    Processing = 'processing',\r\n    Shipped = 'shipped',\r\n    Delivered = 'delivered',\r\n    Cancelled = 'cancelled'\r\n}\r\n\r\nexport enum PaymentStatus {\r\n    Pending = 'pending',\r\n    Authorized = 'authorized',\r\n    Paid = 'paid',\r\n    Failed = 'failed',\r\n    Refunded = 'refunded'\r\n}\r\n\r\nexport interface Payment {\r\n    transactionId: string;\r\n    method: string;\r\n    amount: number;\r\n    currency: string;\r\n    status: PaymentStatus;\r\n    processedAt: string; // ISO date string\r\n}\r\nexport interface ShippingInfo {\r\n    carrier: string;\r\n    trackingNumber: string;\r\n    estimatedDeliveryDate: string; // ISO date string\r\n    actualDeliveryDate?: string; // ISO date string\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "method",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "processedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaymentStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "transactionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Product",
            "id": "interface-Product-ede863e17cfef0da35144ad1c8b7b45ac71aa6d4a3eec2aadc2b9a55128f1f91c97b44d861c3ca428f2c8a0e98d70e67ee84c665783b666e43d517a46ee59d79",
            "file": "src/app/shared/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Category } from \"./category.model\";\r\n\r\n// Enhanced filter options for product queries\r\nexport interface ProductFilters {\r\n    search?: string;\r\n    categoryId?: string;\r\n    subCategoryId?: string;\r\n    minPrice?: number | null;\r\n    maxPrice?: number | null;\r\n    status?: ProductStatus;\r\n    visibility?: ProductVisibility;\r\n    inStock?: boolean | null;\r\n    tags?: string[];\r\n    page?: number;\r\n    pageSize?: number;\r\n    sortColumn?: keyof Product;\r\n    sortDirection?: 'asc' | 'desc';\r\n}\r\n\r\n// Command pattern interface for creating products\r\nexport interface ProductCreateCommand {\r\n    name: string;\r\n    slug?: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    categoryId: string;\r\n    subCategoryId?: string;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    barcode?: string;\r\n    images: ProductImage[];\r\n    status: ProductStatus;\r\n    visibility: ProductVisibility;\r\n    attributes?: Array<{ name: string; value: string; type: string }>;\r\n    tags?: string[];\r\n    seo?: {\r\n        title?: string;\r\n        description?: string;\r\n        keywords?: string[];\r\n    };\r\n    dimensions?: {\r\n        weight: number;\r\n        width: number;\r\n        height: number;\r\n        length: number;\r\n        unit: 'cm' | 'inch';\r\n    };\r\n}\r\n\r\n// Command pattern interface for updating products\r\nexport interface ProductUpdateCommand extends Partial<ProductCreateCommand> {\r\n    id: string;\r\n    newImages?: File[];\r\n    imageIdsToRemove?: string[];\r\n    imageUpdates?: Array<{ id: string; isPrimary?: boolean; sortOrder?: number; alt?: string }>;\r\n}\r\n\r\nexport interface Product {\r\n    id: string;\r\n    name: string;\r\n    slug: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    barcode?: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    category: Category;\r\n    subCategory?: Category;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    status: ProductStatus; // Enum that maps to backend string values\r\n    visibility: ProductVisibility; // Enum that maps to backend string values\r\n    images: ProductImage[];\r\n    variants: ProductVariant[];\r\n    attributes: ProductAttribute[];\r\n    seo?: ProductSeo;\r\n    dimensions?: ProductDimensions;\r\n    tags: string[];\r\n    createdAt: string; // ISO date string\r\n    createdBy?: string;\r\n    lastModifiedAt?: string; // ISO date string\r\n    lastModifiedBy?: string;\r\n    isArchived: boolean;\r\n}\r\n\r\nexport enum ProductStatus {\r\n    Draft = 'draft',\r\n    Active = 'active',\r\n    OutOfStock = 'out_of_stock',\r\n    Discontinued = 'discontinued'\r\n}\r\n\r\nexport enum ProductVisibility {\r\n    Visible = 'visible',\r\n    Hidden = 'hidden',\r\n    Featured = 'featured'\r\n}\r\n\r\nexport interface ProductImage {\r\n    id: string;\r\n    url: string;\r\n    fileName: string;\r\n    size: number;\r\n    isPrimary: boolean;\r\n    sortOrder: number;\r\n    alt?: string;\r\n}\r\n\r\nexport interface ProductVariant {\r\n    id: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    costPrice?: number;\r\n    barcode?: string;\r\n    stock: number;\r\n    trackInventory: boolean;\r\n    allowBackorders: boolean;\r\n    lowStockThreshold?: number;\r\n    sortOrder: number;\r\n    isLowStock: boolean;\r\n    isOutOfStock: boolean;\r\n    attributes: ProductAttribute[];\r\n    images: ProductImage[];\r\n    productId: string;\r\n}\r\n\r\nexport interface ProductAttribute {\r\n    name: string;\r\n    value: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ProductSeo {\r\n    title?: string;\r\n    description?: string;\r\n    keywords: string[];\r\n}\r\n\r\nexport interface ProductDimensions {\r\n    weight: number;\r\n    width: number;\r\n    height: number;\r\n    length: number;\r\n    unit: 'cm' | 'inch';\r\n}\r\n\r\n// Utility functions for mapping API responses to model objects\r\n\r\n/**\r\n * Maps a product from API response format to the Product interface\r\n * @param product The raw product data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted Product object\r\n */\r\nexport function mapProductFromApi(product: any, getFullImageUrl: (url: string) => string): Product {\r\n    return {\r\n        ...product,\r\n        // Map string values to enum values\r\n        status: product.status as ProductStatus,\r\n        visibility: product.visibility as ProductVisibility,\r\n        // Ensure collections are never null and properly format image URLs\r\n        images: (product.images || []).map((img: ProductImage) => ({\r\n            ...img,\r\n            url: getFullImageUrl(img.url)\r\n        })),\r\n        attributes: product.attributes || [],\r\n        tags: product.tags || [],\r\n        // Format dates if needed\r\n        createdAt: product.createdAt,\r\n        lastModifiedAt: product.lastModifiedAt,\r\n        variants: Array.isArray(product.variants)\r\n            ? product.variants.map((v: any) => mapVariantFromApi(v, getFullImageUrl))\r\n            : []\r\n    };\r\n}\r\n\r\n/**\r\n * Maps a product variant from API response format to the ProductVariant interface\r\n * @param variant The raw variant data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted ProductVariant object\r\n */\r\nexport function mapVariantFromApi(variant: any, getFullImageUrl: (url: string) => string): ProductVariant {\r\n    return {\r\n        id: variant.id,\r\n        sku: variant.sku,\r\n        price: variant.price,\r\n        currency: variant.currency || 'USD',\r\n        compareAtPrice: variant.compareAtPrice,\r\n        costPrice: variant.costPrice,\r\n        barcode: variant.barcode,\r\n        stock: variant.stock,\r\n        trackInventory: variant.trackInventory ?? true,\r\n        allowBackorders: variant.allowBackorders ?? false,\r\n        lowStockThreshold: variant.lowStockThreshold,\r\n        sortOrder: variant.sortOrder || 0,\r\n        isLowStock: variant.isLowStock ?? false,\r\n        isOutOfStock: variant.isOutOfStock ?? false,\r\n        attributes: Array.isArray(variant.attributes) ? variant.attributes : [],\r\n        images: Array.isArray(variant.images)\r\n            ? variant.images.map((img: ProductImage) => ({\r\n                ...img,\r\n                url: getFullImageUrl(img.url)\r\n            }))\r\n            : [],\r\n        productId: variant.productId\r\n    };\r\n}",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductAttribute[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "barcode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "compareAtPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "createdBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "dimensions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductDimensions",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductImage[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "isArchived",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "lastModifiedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "lastModifiedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "lowStockThreshold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "seo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductSeo",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "shortDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "sku",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "stock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "subCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "tags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "variants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductVariant[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "visibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductVisibility",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProductAttribute",
            "id": "interface-ProductAttribute-ede863e17cfef0da35144ad1c8b7b45ac71aa6d4a3eec2aadc2b9a55128f1f91c97b44d861c3ca428f2c8a0e98d70e67ee84c665783b666e43d517a46ee59d79",
            "file": "src/app/shared/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Category } from \"./category.model\";\r\n\r\n// Enhanced filter options for product queries\r\nexport interface ProductFilters {\r\n    search?: string;\r\n    categoryId?: string;\r\n    subCategoryId?: string;\r\n    minPrice?: number | null;\r\n    maxPrice?: number | null;\r\n    status?: ProductStatus;\r\n    visibility?: ProductVisibility;\r\n    inStock?: boolean | null;\r\n    tags?: string[];\r\n    page?: number;\r\n    pageSize?: number;\r\n    sortColumn?: keyof Product;\r\n    sortDirection?: 'asc' | 'desc';\r\n}\r\n\r\n// Command pattern interface for creating products\r\nexport interface ProductCreateCommand {\r\n    name: string;\r\n    slug?: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    categoryId: string;\r\n    subCategoryId?: string;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    barcode?: string;\r\n    images: ProductImage[];\r\n    status: ProductStatus;\r\n    visibility: ProductVisibility;\r\n    attributes?: Array<{ name: string; value: string; type: string }>;\r\n    tags?: string[];\r\n    seo?: {\r\n        title?: string;\r\n        description?: string;\r\n        keywords?: string[];\r\n    };\r\n    dimensions?: {\r\n        weight: number;\r\n        width: number;\r\n        height: number;\r\n        length: number;\r\n        unit: 'cm' | 'inch';\r\n    };\r\n}\r\n\r\n// Command pattern interface for updating products\r\nexport interface ProductUpdateCommand extends Partial<ProductCreateCommand> {\r\n    id: string;\r\n    newImages?: File[];\r\n    imageIdsToRemove?: string[];\r\n    imageUpdates?: Array<{ id: string; isPrimary?: boolean; sortOrder?: number; alt?: string }>;\r\n}\r\n\r\nexport interface Product {\r\n    id: string;\r\n    name: string;\r\n    slug: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    barcode?: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    category: Category;\r\n    subCategory?: Category;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    status: ProductStatus; // Enum that maps to backend string values\r\n    visibility: ProductVisibility; // Enum that maps to backend string values\r\n    images: ProductImage[];\r\n    variants: ProductVariant[];\r\n    attributes: ProductAttribute[];\r\n    seo?: ProductSeo;\r\n    dimensions?: ProductDimensions;\r\n    tags: string[];\r\n    createdAt: string; // ISO date string\r\n    createdBy?: string;\r\n    lastModifiedAt?: string; // ISO date string\r\n    lastModifiedBy?: string;\r\n    isArchived: boolean;\r\n}\r\n\r\nexport enum ProductStatus {\r\n    Draft = 'draft',\r\n    Active = 'active',\r\n    OutOfStock = 'out_of_stock',\r\n    Discontinued = 'discontinued'\r\n}\r\n\r\nexport enum ProductVisibility {\r\n    Visible = 'visible',\r\n    Hidden = 'hidden',\r\n    Featured = 'featured'\r\n}\r\n\r\nexport interface ProductImage {\r\n    id: string;\r\n    url: string;\r\n    fileName: string;\r\n    size: number;\r\n    isPrimary: boolean;\r\n    sortOrder: number;\r\n    alt?: string;\r\n}\r\n\r\nexport interface ProductVariant {\r\n    id: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    costPrice?: number;\r\n    barcode?: string;\r\n    stock: number;\r\n    trackInventory: boolean;\r\n    allowBackorders: boolean;\r\n    lowStockThreshold?: number;\r\n    sortOrder: number;\r\n    isLowStock: boolean;\r\n    isOutOfStock: boolean;\r\n    attributes: ProductAttribute[];\r\n    images: ProductImage[];\r\n    productId: string;\r\n}\r\n\r\nexport interface ProductAttribute {\r\n    name: string;\r\n    value: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ProductSeo {\r\n    title?: string;\r\n    description?: string;\r\n    keywords: string[];\r\n}\r\n\r\nexport interface ProductDimensions {\r\n    weight: number;\r\n    width: number;\r\n    height: number;\r\n    length: number;\r\n    unit: 'cm' | 'inch';\r\n}\r\n\r\n// Utility functions for mapping API responses to model objects\r\n\r\n/**\r\n * Maps a product from API response format to the Product interface\r\n * @param product The raw product data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted Product object\r\n */\r\nexport function mapProductFromApi(product: any, getFullImageUrl: (url: string) => string): Product {\r\n    return {\r\n        ...product,\r\n        // Map string values to enum values\r\n        status: product.status as ProductStatus,\r\n        visibility: product.visibility as ProductVisibility,\r\n        // Ensure collections are never null and properly format image URLs\r\n        images: (product.images || []).map((img: ProductImage) => ({\r\n            ...img,\r\n            url: getFullImageUrl(img.url)\r\n        })),\r\n        attributes: product.attributes || [],\r\n        tags: product.tags || [],\r\n        // Format dates if needed\r\n        createdAt: product.createdAt,\r\n        lastModifiedAt: product.lastModifiedAt,\r\n        variants: Array.isArray(product.variants)\r\n            ? product.variants.map((v: any) => mapVariantFromApi(v, getFullImageUrl))\r\n            : []\r\n    };\r\n}\r\n\r\n/**\r\n * Maps a product variant from API response format to the ProductVariant interface\r\n * @param variant The raw variant data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted ProductVariant object\r\n */\r\nexport function mapVariantFromApi(variant: any, getFullImageUrl: (url: string) => string): ProductVariant {\r\n    return {\r\n        id: variant.id,\r\n        sku: variant.sku,\r\n        price: variant.price,\r\n        currency: variant.currency || 'USD',\r\n        compareAtPrice: variant.compareAtPrice,\r\n        costPrice: variant.costPrice,\r\n        barcode: variant.barcode,\r\n        stock: variant.stock,\r\n        trackInventory: variant.trackInventory ?? true,\r\n        allowBackorders: variant.allowBackorders ?? false,\r\n        lowStockThreshold: variant.lowStockThreshold,\r\n        sortOrder: variant.sortOrder || 0,\r\n        isLowStock: variant.isLowStock ?? false,\r\n        isOutOfStock: variant.isOutOfStock ?? false,\r\n        attributes: Array.isArray(variant.attributes) ? variant.attributes : [],\r\n        images: Array.isArray(variant.images)\r\n            ? variant.images.map((img: ProductImage) => ({\r\n                ...img,\r\n                url: getFullImageUrl(img.url)\r\n            }))\r\n            : [],\r\n        productId: variant.productId\r\n    };\r\n}",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 138
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProductCreateCommand",
            "id": "interface-ProductCreateCommand-ede863e17cfef0da35144ad1c8b7b45ac71aa6d4a3eec2aadc2b9a55128f1f91c97b44d861c3ca428f2c8a0e98d70e67ee84c665783b666e43d517a46ee59d79",
            "file": "src/app/shared/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Category } from \"./category.model\";\r\n\r\n// Enhanced filter options for product queries\r\nexport interface ProductFilters {\r\n    search?: string;\r\n    categoryId?: string;\r\n    subCategoryId?: string;\r\n    minPrice?: number | null;\r\n    maxPrice?: number | null;\r\n    status?: ProductStatus;\r\n    visibility?: ProductVisibility;\r\n    inStock?: boolean | null;\r\n    tags?: string[];\r\n    page?: number;\r\n    pageSize?: number;\r\n    sortColumn?: keyof Product;\r\n    sortDirection?: 'asc' | 'desc';\r\n}\r\n\r\n// Command pattern interface for creating products\r\nexport interface ProductCreateCommand {\r\n    name: string;\r\n    slug?: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    categoryId: string;\r\n    subCategoryId?: string;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    barcode?: string;\r\n    images: ProductImage[];\r\n    status: ProductStatus;\r\n    visibility: ProductVisibility;\r\n    attributes?: Array<{ name: string; value: string; type: string }>;\r\n    tags?: string[];\r\n    seo?: {\r\n        title?: string;\r\n        description?: string;\r\n        keywords?: string[];\r\n    };\r\n    dimensions?: {\r\n        weight: number;\r\n        width: number;\r\n        height: number;\r\n        length: number;\r\n        unit: 'cm' | 'inch';\r\n    };\r\n}\r\n\r\n// Command pattern interface for updating products\r\nexport interface ProductUpdateCommand extends Partial<ProductCreateCommand> {\r\n    id: string;\r\n    newImages?: File[];\r\n    imageIdsToRemove?: string[];\r\n    imageUpdates?: Array<{ id: string; isPrimary?: boolean; sortOrder?: number; alt?: string }>;\r\n}\r\n\r\nexport interface Product {\r\n    id: string;\r\n    name: string;\r\n    slug: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    barcode?: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    category: Category;\r\n    subCategory?: Category;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    status: ProductStatus; // Enum that maps to backend string values\r\n    visibility: ProductVisibility; // Enum that maps to backend string values\r\n    images: ProductImage[];\r\n    variants: ProductVariant[];\r\n    attributes: ProductAttribute[];\r\n    seo?: ProductSeo;\r\n    dimensions?: ProductDimensions;\r\n    tags: string[];\r\n    createdAt: string; // ISO date string\r\n    createdBy?: string;\r\n    lastModifiedAt?: string; // ISO date string\r\n    lastModifiedBy?: string;\r\n    isArchived: boolean;\r\n}\r\n\r\nexport enum ProductStatus {\r\n    Draft = 'draft',\r\n    Active = 'active',\r\n    OutOfStock = 'out_of_stock',\r\n    Discontinued = 'discontinued'\r\n}\r\n\r\nexport enum ProductVisibility {\r\n    Visible = 'visible',\r\n    Hidden = 'hidden',\r\n    Featured = 'featured'\r\n}\r\n\r\nexport interface ProductImage {\r\n    id: string;\r\n    url: string;\r\n    fileName: string;\r\n    size: number;\r\n    isPrimary: boolean;\r\n    sortOrder: number;\r\n    alt?: string;\r\n}\r\n\r\nexport interface ProductVariant {\r\n    id: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    costPrice?: number;\r\n    barcode?: string;\r\n    stock: number;\r\n    trackInventory: boolean;\r\n    allowBackorders: boolean;\r\n    lowStockThreshold?: number;\r\n    sortOrder: number;\r\n    isLowStock: boolean;\r\n    isOutOfStock: boolean;\r\n    attributes: ProductAttribute[];\r\n    images: ProductImage[];\r\n    productId: string;\r\n}\r\n\r\nexport interface ProductAttribute {\r\n    name: string;\r\n    value: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ProductSeo {\r\n    title?: string;\r\n    description?: string;\r\n    keywords: string[];\r\n}\r\n\r\nexport interface ProductDimensions {\r\n    weight: number;\r\n    width: number;\r\n    height: number;\r\n    length: number;\r\n    unit: 'cm' | 'inch';\r\n}\r\n\r\n// Utility functions for mapping API responses to model objects\r\n\r\n/**\r\n * Maps a product from API response format to the Product interface\r\n * @param product The raw product data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted Product object\r\n */\r\nexport function mapProductFromApi(product: any, getFullImageUrl: (url: string) => string): Product {\r\n    return {\r\n        ...product,\r\n        // Map string values to enum values\r\n        status: product.status as ProductStatus,\r\n        visibility: product.visibility as ProductVisibility,\r\n        // Ensure collections are never null and properly format image URLs\r\n        images: (product.images || []).map((img: ProductImage) => ({\r\n            ...img,\r\n            url: getFullImageUrl(img.url)\r\n        })),\r\n        attributes: product.attributes || [],\r\n        tags: product.tags || [],\r\n        // Format dates if needed\r\n        createdAt: product.createdAt,\r\n        lastModifiedAt: product.lastModifiedAt,\r\n        variants: Array.isArray(product.variants)\r\n            ? product.variants.map((v: any) => mapVariantFromApi(v, getFullImageUrl))\r\n            : []\r\n    };\r\n}\r\n\r\n/**\r\n * Maps a product variant from API response format to the ProductVariant interface\r\n * @param variant The raw variant data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted ProductVariant object\r\n */\r\nexport function mapVariantFromApi(variant: any, getFullImageUrl: (url: string) => string): ProductVariant {\r\n    return {\r\n        id: variant.id,\r\n        sku: variant.sku,\r\n        price: variant.price,\r\n        currency: variant.currency || 'USD',\r\n        compareAtPrice: variant.compareAtPrice,\r\n        costPrice: variant.costPrice,\r\n        barcode: variant.barcode,\r\n        stock: variant.stock,\r\n        trackInventory: variant.trackInventory ?? true,\r\n        allowBackorders: variant.allowBackorders ?? false,\r\n        lowStockThreshold: variant.lowStockThreshold,\r\n        sortOrder: variant.sortOrder || 0,\r\n        isLowStock: variant.isLowStock ?? false,\r\n        isOutOfStock: variant.isOutOfStock ?? false,\r\n        attributes: Array.isArray(variant.attributes) ? variant.attributes : [],\r\n        images: Array.isArray(variant.images)\r\n            ? variant.images.map((img: ProductImage) => ({\r\n                ...img,\r\n                url: getFullImageUrl(img.url)\r\n            }))\r\n            : [],\r\n        productId: variant.productId\r\n    };\r\n}",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "barcode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "categoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "compareAtPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "dimensions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductImage[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "lowStockThreshold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "seo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "shortDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "sku",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "stock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "subCategoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "tags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "visibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductVisibility",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProductDimensions",
            "id": "interface-ProductDimensions-ede863e17cfef0da35144ad1c8b7b45ac71aa6d4a3eec2aadc2b9a55128f1f91c97b44d861c3ca428f2c8a0e98d70e67ee84c665783b666e43d517a46ee59d79",
            "file": "src/app/shared/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Category } from \"./category.model\";\r\n\r\n// Enhanced filter options for product queries\r\nexport interface ProductFilters {\r\n    search?: string;\r\n    categoryId?: string;\r\n    subCategoryId?: string;\r\n    minPrice?: number | null;\r\n    maxPrice?: number | null;\r\n    status?: ProductStatus;\r\n    visibility?: ProductVisibility;\r\n    inStock?: boolean | null;\r\n    tags?: string[];\r\n    page?: number;\r\n    pageSize?: number;\r\n    sortColumn?: keyof Product;\r\n    sortDirection?: 'asc' | 'desc';\r\n}\r\n\r\n// Command pattern interface for creating products\r\nexport interface ProductCreateCommand {\r\n    name: string;\r\n    slug?: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    categoryId: string;\r\n    subCategoryId?: string;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    barcode?: string;\r\n    images: ProductImage[];\r\n    status: ProductStatus;\r\n    visibility: ProductVisibility;\r\n    attributes?: Array<{ name: string; value: string; type: string }>;\r\n    tags?: string[];\r\n    seo?: {\r\n        title?: string;\r\n        description?: string;\r\n        keywords?: string[];\r\n    };\r\n    dimensions?: {\r\n        weight: number;\r\n        width: number;\r\n        height: number;\r\n        length: number;\r\n        unit: 'cm' | 'inch';\r\n    };\r\n}\r\n\r\n// Command pattern interface for updating products\r\nexport interface ProductUpdateCommand extends Partial<ProductCreateCommand> {\r\n    id: string;\r\n    newImages?: File[];\r\n    imageIdsToRemove?: string[];\r\n    imageUpdates?: Array<{ id: string; isPrimary?: boolean; sortOrder?: number; alt?: string }>;\r\n}\r\n\r\nexport interface Product {\r\n    id: string;\r\n    name: string;\r\n    slug: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    barcode?: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    category: Category;\r\n    subCategory?: Category;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    status: ProductStatus; // Enum that maps to backend string values\r\n    visibility: ProductVisibility; // Enum that maps to backend string values\r\n    images: ProductImage[];\r\n    variants: ProductVariant[];\r\n    attributes: ProductAttribute[];\r\n    seo?: ProductSeo;\r\n    dimensions?: ProductDimensions;\r\n    tags: string[];\r\n    createdAt: string; // ISO date string\r\n    createdBy?: string;\r\n    lastModifiedAt?: string; // ISO date string\r\n    lastModifiedBy?: string;\r\n    isArchived: boolean;\r\n}\r\n\r\nexport enum ProductStatus {\r\n    Draft = 'draft',\r\n    Active = 'active',\r\n    OutOfStock = 'out_of_stock',\r\n    Discontinued = 'discontinued'\r\n}\r\n\r\nexport enum ProductVisibility {\r\n    Visible = 'visible',\r\n    Hidden = 'hidden',\r\n    Featured = 'featured'\r\n}\r\n\r\nexport interface ProductImage {\r\n    id: string;\r\n    url: string;\r\n    fileName: string;\r\n    size: number;\r\n    isPrimary: boolean;\r\n    sortOrder: number;\r\n    alt?: string;\r\n}\r\n\r\nexport interface ProductVariant {\r\n    id: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    costPrice?: number;\r\n    barcode?: string;\r\n    stock: number;\r\n    trackInventory: boolean;\r\n    allowBackorders: boolean;\r\n    lowStockThreshold?: number;\r\n    sortOrder: number;\r\n    isLowStock: boolean;\r\n    isOutOfStock: boolean;\r\n    attributes: ProductAttribute[];\r\n    images: ProductImage[];\r\n    productId: string;\r\n}\r\n\r\nexport interface ProductAttribute {\r\n    name: string;\r\n    value: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ProductSeo {\r\n    title?: string;\r\n    description?: string;\r\n    keywords: string[];\r\n}\r\n\r\nexport interface ProductDimensions {\r\n    weight: number;\r\n    width: number;\r\n    height: number;\r\n    length: number;\r\n    unit: 'cm' | 'inch';\r\n}\r\n\r\n// Utility functions for mapping API responses to model objects\r\n\r\n/**\r\n * Maps a product from API response format to the Product interface\r\n * @param product The raw product data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted Product object\r\n */\r\nexport function mapProductFromApi(product: any, getFullImageUrl: (url: string) => string): Product {\r\n    return {\r\n        ...product,\r\n        // Map string values to enum values\r\n        status: product.status as ProductStatus,\r\n        visibility: product.visibility as ProductVisibility,\r\n        // Ensure collections are never null and properly format image URLs\r\n        images: (product.images || []).map((img: ProductImage) => ({\r\n            ...img,\r\n            url: getFullImageUrl(img.url)\r\n        })),\r\n        attributes: product.attributes || [],\r\n        tags: product.tags || [],\r\n        // Format dates if needed\r\n        createdAt: product.createdAt,\r\n        lastModifiedAt: product.lastModifiedAt,\r\n        variants: Array.isArray(product.variants)\r\n            ? product.variants.map((v: any) => mapVariantFromApi(v, getFullImageUrl))\r\n            : []\r\n    };\r\n}\r\n\r\n/**\r\n * Maps a product variant from API response format to the ProductVariant interface\r\n * @param variant The raw variant data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted ProductVariant object\r\n */\r\nexport function mapVariantFromApi(variant: any, getFullImageUrl: (url: string) => string): ProductVariant {\r\n    return {\r\n        id: variant.id,\r\n        sku: variant.sku,\r\n        price: variant.price,\r\n        currency: variant.currency || 'USD',\r\n        compareAtPrice: variant.compareAtPrice,\r\n        costPrice: variant.costPrice,\r\n        barcode: variant.barcode,\r\n        stock: variant.stock,\r\n        trackInventory: variant.trackInventory ?? true,\r\n        allowBackorders: variant.allowBackorders ?? false,\r\n        lowStockThreshold: variant.lowStockThreshold,\r\n        sortOrder: variant.sortOrder || 0,\r\n        isLowStock: variant.isLowStock ?? false,\r\n        isOutOfStock: variant.isOutOfStock ?? false,\r\n        attributes: Array.isArray(variant.attributes) ? variant.attributes : [],\r\n        images: Array.isArray(variant.images)\r\n            ? variant.images.map((img: ProductImage) => ({\r\n                ...img,\r\n                url: getFullImageUrl(img.url)\r\n            }))\r\n            : [],\r\n        productId: variant.productId\r\n    };\r\n}",
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 151
                },
                {
                    "name": "length",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "unit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"cm\" | \"inch\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 153
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 149
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 150
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProductFilters",
            "id": "interface-ProductFilters-ede863e17cfef0da35144ad1c8b7b45ac71aa6d4a3eec2aadc2b9a55128f1f91c97b44d861c3ca428f2c8a0e98d70e67ee84c665783b666e43d517a46ee59d79",
            "file": "src/app/shared/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Category } from \"./category.model\";\r\n\r\n// Enhanced filter options for product queries\r\nexport interface ProductFilters {\r\n    search?: string;\r\n    categoryId?: string;\r\n    subCategoryId?: string;\r\n    minPrice?: number | null;\r\n    maxPrice?: number | null;\r\n    status?: ProductStatus;\r\n    visibility?: ProductVisibility;\r\n    inStock?: boolean | null;\r\n    tags?: string[];\r\n    page?: number;\r\n    pageSize?: number;\r\n    sortColumn?: keyof Product;\r\n    sortDirection?: 'asc' | 'desc';\r\n}\r\n\r\n// Command pattern interface for creating products\r\nexport interface ProductCreateCommand {\r\n    name: string;\r\n    slug?: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    categoryId: string;\r\n    subCategoryId?: string;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    barcode?: string;\r\n    images: ProductImage[];\r\n    status: ProductStatus;\r\n    visibility: ProductVisibility;\r\n    attributes?: Array<{ name: string; value: string; type: string }>;\r\n    tags?: string[];\r\n    seo?: {\r\n        title?: string;\r\n        description?: string;\r\n        keywords?: string[];\r\n    };\r\n    dimensions?: {\r\n        weight: number;\r\n        width: number;\r\n        height: number;\r\n        length: number;\r\n        unit: 'cm' | 'inch';\r\n    };\r\n}\r\n\r\n// Command pattern interface for updating products\r\nexport interface ProductUpdateCommand extends Partial<ProductCreateCommand> {\r\n    id: string;\r\n    newImages?: File[];\r\n    imageIdsToRemove?: string[];\r\n    imageUpdates?: Array<{ id: string; isPrimary?: boolean; sortOrder?: number; alt?: string }>;\r\n}\r\n\r\nexport interface Product {\r\n    id: string;\r\n    name: string;\r\n    slug: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    barcode?: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    category: Category;\r\n    subCategory?: Category;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    status: ProductStatus; // Enum that maps to backend string values\r\n    visibility: ProductVisibility; // Enum that maps to backend string values\r\n    images: ProductImage[];\r\n    variants: ProductVariant[];\r\n    attributes: ProductAttribute[];\r\n    seo?: ProductSeo;\r\n    dimensions?: ProductDimensions;\r\n    tags: string[];\r\n    createdAt: string; // ISO date string\r\n    createdBy?: string;\r\n    lastModifiedAt?: string; // ISO date string\r\n    lastModifiedBy?: string;\r\n    isArchived: boolean;\r\n}\r\n\r\nexport enum ProductStatus {\r\n    Draft = 'draft',\r\n    Active = 'active',\r\n    OutOfStock = 'out_of_stock',\r\n    Discontinued = 'discontinued'\r\n}\r\n\r\nexport enum ProductVisibility {\r\n    Visible = 'visible',\r\n    Hidden = 'hidden',\r\n    Featured = 'featured'\r\n}\r\n\r\nexport interface ProductImage {\r\n    id: string;\r\n    url: string;\r\n    fileName: string;\r\n    size: number;\r\n    isPrimary: boolean;\r\n    sortOrder: number;\r\n    alt?: string;\r\n}\r\n\r\nexport interface ProductVariant {\r\n    id: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    costPrice?: number;\r\n    barcode?: string;\r\n    stock: number;\r\n    trackInventory: boolean;\r\n    allowBackorders: boolean;\r\n    lowStockThreshold?: number;\r\n    sortOrder: number;\r\n    isLowStock: boolean;\r\n    isOutOfStock: boolean;\r\n    attributes: ProductAttribute[];\r\n    images: ProductImage[];\r\n    productId: string;\r\n}\r\n\r\nexport interface ProductAttribute {\r\n    name: string;\r\n    value: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ProductSeo {\r\n    title?: string;\r\n    description?: string;\r\n    keywords: string[];\r\n}\r\n\r\nexport interface ProductDimensions {\r\n    weight: number;\r\n    width: number;\r\n    height: number;\r\n    length: number;\r\n    unit: 'cm' | 'inch';\r\n}\r\n\r\n// Utility functions for mapping API responses to model objects\r\n\r\n/**\r\n * Maps a product from API response format to the Product interface\r\n * @param product The raw product data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted Product object\r\n */\r\nexport function mapProductFromApi(product: any, getFullImageUrl: (url: string) => string): Product {\r\n    return {\r\n        ...product,\r\n        // Map string values to enum values\r\n        status: product.status as ProductStatus,\r\n        visibility: product.visibility as ProductVisibility,\r\n        // Ensure collections are never null and properly format image URLs\r\n        images: (product.images || []).map((img: ProductImage) => ({\r\n            ...img,\r\n            url: getFullImageUrl(img.url)\r\n        })),\r\n        attributes: product.attributes || [],\r\n        tags: product.tags || [],\r\n        // Format dates if needed\r\n        createdAt: product.createdAt,\r\n        lastModifiedAt: product.lastModifiedAt,\r\n        variants: Array.isArray(product.variants)\r\n            ? product.variants.map((v: any) => mapVariantFromApi(v, getFullImageUrl))\r\n            : []\r\n    };\r\n}\r\n\r\n/**\r\n * Maps a product variant from API response format to the ProductVariant interface\r\n * @param variant The raw variant data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted ProductVariant object\r\n */\r\nexport function mapVariantFromApi(variant: any, getFullImageUrl: (url: string) => string): ProductVariant {\r\n    return {\r\n        id: variant.id,\r\n        sku: variant.sku,\r\n        price: variant.price,\r\n        currency: variant.currency || 'USD',\r\n        compareAtPrice: variant.compareAtPrice,\r\n        costPrice: variant.costPrice,\r\n        barcode: variant.barcode,\r\n        stock: variant.stock,\r\n        trackInventory: variant.trackInventory ?? true,\r\n        allowBackorders: variant.allowBackorders ?? false,\r\n        lowStockThreshold: variant.lowStockThreshold,\r\n        sortOrder: variant.sortOrder || 0,\r\n        isLowStock: variant.isLowStock ?? false,\r\n        isOutOfStock: variant.isOutOfStock ?? false,\r\n        attributes: Array.isArray(variant.attributes) ? variant.attributes : [],\r\n        images: Array.isArray(variant.images)\r\n            ? variant.images.map((img: ProductImage) => ({\r\n                ...img,\r\n                url: getFullImageUrl(img.url)\r\n            }))\r\n            : [],\r\n        productId: variant.productId\r\n    };\r\n}",
            "properties": [
                {
                    "name": "categoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "inStock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "maxPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "minPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sortColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "sortDirection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"asc\" | \"desc\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductStatus",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "subCategoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "tags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "visibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductVisibility",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProductFormModel",
            "id": "interface-ProductFormModel-aa251d4dfd0acc419f9aff6a5744d331e67eb44a1b75ab5ac99ca76e6b1f4672a13dc5e1a4848e7c9fafa3bc7aa7ecf6d57583f77c89b870f8118c9e68fedc11",
            "file": "src/app/features/products/components/dynamic-product-form/dynamic-product-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, OnDestroy, input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { FormlyModule, FormlyFieldConfig } from '@ngx-formly/core';\r\nimport { Subject, combineLatest, of } from 'rxjs';\r\nimport { finalize, takeUntil, startWith } from 'rxjs/operators';\r\n\r\nimport { ProductTypeService } from '../../../../core/services/product-type.service';\r\nimport { ProductService } from '../../../../core/services/product.service';\r\nimport { ErrorService } from '../../../../core/services/error.service';\r\nimport { ProductCreateCommand, ProductImage, ProductStatus, ProductVisibility } from '../../../../shared/models/product.model';\r\nimport { ProductType } from '../../../../shared/models/product-type.model';\r\nimport { CategoryService } from '../../../../core/services/category.service';\r\nimport { ProductImageManagerComponent } from '../../product-image-manager/product-image-manager.component';\r\nimport { Currency } from '../../../../shared/models/currency.enum';\r\nimport { environment } from 'src/environments/environment';\r\n\r\ninterface ProductFormModel {\r\n  basicInfo: {\r\n    name: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    barcode?: string;\r\n    categoryId: string;\r\n    subCategoryId?: string;\r\n    productTypeId: string;\r\n  };\r\n  pricing: {\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n  };\r\n  attributes: Record<string, any>;\r\n  status: ProductStatus;\r\n  visibility: ProductVisibility;\r\n  images: ProductImage[];\r\n  seo?: {\r\n    title?: string;\r\n    description?: string;\r\n    keywords?: string[];\r\n  };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-dynamic-product-form',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    MatStepperModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatSelectModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSnackBarModule,\r\n    FormlyModule,\r\n    ProductImageManagerComponent\r\n  ],\r\n  template: `\r\n    <div class=\"product-form-container\">\r\n      <mat-card>\r\n        <mat-card-header>\r\n          <mat-card-title>{{ isEditMode ? 'Edit Product' : 'Add New Product' }}</mat-card-title>\r\n          <mat-card-subtitle>\r\n            Fill in the details to {{ isEditMode ? 'update' : 'create' }} your product\r\n          </mat-card-subtitle>\r\n        </mat-card-header>\r\n        \r\n        <mat-card-content>\r\n          <mat-stepper linear #stepper>\r\n            <!-- Step 1: Basic Product Information -->\r\n            <mat-step [stepControl]=\"basicInfoForm\">\r\n              <ng-template matStepLabel>Basic Information</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>Basic Product Details</h3>\r\n                \r\n                <!-- Product Type Selection -->\r\n                <mat-form-field  appearance=\"fill\" class=\"full-width\">\r\n                  <mat-label>Product Type</mat-label>\r\n                  <mat-select \r\n                    [value]=\"selectedProductType?.id\" \r\n                    (selectionChange)=\"onProductTypeChange($event.value)\">\r\n                    <mat-option *ngFor=\"let type of productTypes\" [value]=\"type.id\">\r\n                      {{ type.name }}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                  <mat-hint class=\"text-xs text-orange-500\">Select a product type to load relevant fields</mat-hint>\r\n                </mat-form-field>\r\n                \r\n                <!-- Basic Info Form -->\r\n                <form [formGroup]=\"basicInfoForm\">\r\n                  <formly-form\r\n                    [form]=\"basicInfoForm\"\r\n                    [fields]=\"basicInfoFields\"\r\n                    [model]=\"model.basicInfo\">\r\n                  </formly-form>\r\n                </form>\r\n                \r\n                <div class=\"step-actions\">\r\n                  <button \r\n                    mat-button \r\n                    matStepperNext\r\n                    color=\"primary\"\r\n                    [disabled]=\"!basicInfoForm.valid\">\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n            \r\n            <!-- Step 2: Pricing & Inventory -->\r\n            <mat-step [stepControl]=\"pricingForm\">\r\n              <ng-template matStepLabel>Pricing & Inventory</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>Pricing & Stock Information</h3>\r\n                \r\n                <form [formGroup]=\"pricingForm\">\r\n                  <formly-form\r\n                    [form]=\"pricingForm\"\r\n                    [fields]=\"pricingFields\"\r\n                    [model]=\"model.pricing\">\r\n                  </formly-form>\r\n                </form>\r\n                \r\n                <div class=\"step-actions\">\r\n                  <button mat-button matStepperPrevious>Back</button>\r\n                  <button \r\n                    mat-button \r\n                    matStepperNext\r\n                    color=\"primary\"\r\n                    [disabled]=\"!pricingForm.valid\">\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n            \r\n            <!-- Step 3: Product Attributes (Dynamic based on product type) -->\r\n            <mat-step [stepControl]=\"attributesForm\" *ngIf=\"attributesFields.length > 0\">\r\n              <ng-template matStepLabel>Attributes</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>Product Attributes</h3>\r\n                <p class=\"step-description\">\r\n                  Configure specific attributes for {{ selectedProductType?.name }}\r\n                </p>\r\n                \r\n                <form [formGroup]=\"attributesForm\">\r\n                  <formly-form\r\n                    [form]=\"attributesForm\"\r\n                    [fields]=\"attributesFields\"\r\n                    [model]=\"model.attributes\">\r\n                  </formly-form>\r\n                </form>\r\n                \r\n                <div class=\"step-actions\">\r\n                  <button mat-button matStepperPrevious>Back</button>\r\n                  <button \r\n                    mat-button \r\n                    matStepperNext\r\n                    color=\"primary\"\r\n                    [disabled]=\"!attributesForm.valid\">\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n            \r\n            <!-- Step 4: Images -->\r\n            <mat-step>\r\n              <ng-template matStepLabel>Images</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>Product Images</h3>\r\n                <p class=\"step-description\">\r\n                  Upload and manage product images. The first image will be used as the primary display image.\r\n                </p>\r\n                \r\n                <app-product-image-manager\r\n                  [images]=\"model.images\"\r\n                  (imagesChange)=\"onImagesChange($event)\">\r\n                </app-product-image-manager>\r\n                \r\n                <div class=\"step-actions\">\r\n                  <button mat-button matStepperPrevious>Back</button>\r\n                  <button \r\n                    mat-button \r\n                    matStepperNext\r\n                    color=\"primary\"\r\n                    [disabled]=\"model.images.length === 0\">\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n            \r\n            <!-- Step 5: SEO & Visibility -->\r\n            <mat-step [stepControl]=\"seoForm\">\r\n              <ng-template matStepLabel>SEO & Visibility</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>SEO Settings & Visibility</h3>\r\n                \r\n                <form [formGroup]=\"seoForm\">\r\n                  <formly-form\r\n                    [form]=\"seoForm\"\r\n                    [fields]=\"seoFields\"\r\n                    [model]=\"model\">\r\n                  </formly-form>\r\n                </form>\r\n                \r\n                <div class=\"step-actions\">\r\n                  <button mat-button matStepperPrevious>Back</button>\r\n                  <button \r\n                    mat-button \r\n                    matStepperNext\r\n                    color=\"primary\"\r\n                    [disabled]=\"!seoForm.valid\">\r\n                    Review\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n            \r\n            <!-- Step 6: Review & Submit -->\r\n            <mat-step>\r\n              <ng-template matStepLabel>Review & Submit</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>Review Product Information</h3>\r\n                <p class=\"step-description\">\r\n                  Please review all information before submitting.\r\n                </p>\r\n                \r\n                <div class=\"product-summary\">\r\n                  <div class=\"summary-section bg-slate-100 dark:bg-slate-800\">\r\n                    <h4>Basic Information</h4>\r\n                    <p><strong>Name:</strong> {{ model.basicInfo.name }}</p>\r\n                    <p><strong>Type:</strong> {{ selectedProductType?.name }}</p>\r\n                    <p><strong>SKU:</strong> {{ model.basicInfo.sku }}</p>\r\n                    <p *ngIf=\"model.basicInfo.barcode\"><strong>Barcode:</strong> {{ model.basicInfo.barcode }}</p>\r\n                  </div>\r\n                  \r\n                  <div class=\"summary-section bg-slate-100 dark:bg-slate-800\">\r\n                    <h4>Pricing & Inventory</h4>\r\n                    <p><strong>Price:</strong> {{ model.pricing.price | currency:model.pricing.currency }}</p>\r\n                    <p *ngIf=\"model.pricing.compareAtPrice\">\r\n                      <strong>Compare At:</strong> {{ model.pricing.compareAtPrice | currency:model.pricing.currency }}\r\n                    </p>\r\n                    <p><strong>Stock:</strong> {{ model.pricing.stock }}</p>\r\n                  </div>\r\n                  \r\n                  <div class=\"summary-section bg-slate-100 dark:bg-slate-800\" *ngIf=\"attributesFields.length > 0\">\r\n                    <h4>Attributes</h4>\r\n                    <p *ngFor=\"let field of attributesFields\">\r\n                      <strong>{{ field.props?.label }}:</strong>\r\n                      {{ formatAttributeValue(field.key ?? \"\", model.attributes[getKeyAsString(field.key ?? \"\")]) }}\r\n                    </p>\r\n                  </div>\r\n                  \r\n                  <div class=\"summary-section bg-slate-100 dark:bg-slate-800\">\r\n                    <h4>Images</h4>\r\n                    <div class=\"summary-images\">\r\n                      <div *ngFor=\"let image of model.images.slice(0, 3)\" class=\"summary-image\">\r\n                        <img [src]=\"image.url\" [alt]=\"image.fileName\">\r\n                      </div>\r\n                      <div *ngIf=\"model.images.length > 3\" class=\"more-images\">\r\n                        +{{ model.images.length - 3 }} more\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div class=\"summary-section bg-slate-100 dark:bg-slate-800\">\r\n                    <h4>Visibility</h4>\r\n                    <p><strong>Status:</strong> {{ formatEnumValue(model.status) }}</p>\r\n                    <p><strong>Visibility:</strong> {{ formatEnumValue(model.visibility) }}</p>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"step-actions final-actions\">\r\n                  <button mat-button matStepperPrevious>Back</button>\r\n                  <button \r\n                    mat-button \r\n                    (click)=\"stepper.reset()\">\r\n                    Reset\r\n                  </button>\r\n                  <button \r\n                    mat-raised-button \r\n                    color=\"primary\"\r\n                    [disabled]=\"isSubmitting\"\r\n                    (click)=\"submitProduct()\">\r\n                    <mat-icon *ngIf=\"isSubmitting\" class=\"spin\">sync</mat-icon>\r\n                    {{ isEditMode ? 'Update' : 'Create' }} Product\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n          </mat-stepper>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .product-form-container {\r\n      max-width: 1200px;\r\n      margin: 0 auto;\r\n      padding: 1rem;\r\n    }\r\n    \r\n    .step-content {\r\n      margin: 1.5rem 0;\r\n      max-width: 800px;\r\n    }\r\n    \r\n    .step-description {\r\n      color: #666;\r\n      margin-bottom: 1.5rem;\r\n    }\r\n    \r\n    .full-width {\r\n      width: 100%;\r\n      margin-bottom: 1.5rem;\r\n    }\r\n    \r\n    .step-actions {\r\n      display: flex;\r\n      justify-content: flex-end;\r\n      gap: 1rem;\r\n      margin-top: 2rem;\r\n    }\r\n    \r\n    .product-summary {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n      gap: 1.5rem;\r\n      margin: 2rem 0;\r\n    }\r\n    \r\n    .summary-section {\r\n      border-radius: 8px;\r\n      padding: 1.5rem;\r\n    }\r\n    \r\n    .summary-section h4 {\r\n      margin-top: 0;\r\n      margin-bottom: 1rem;\r\n      padding-bottom: 0.5rem;\r\n      border-bottom: 1px solid #eee;\r\n    }\r\n    \r\n    .summary-images {\r\n      display: flex;\r\n      gap: 0.5rem;\r\n    }\r\n    \r\n    .summary-image {\r\n      width: 60px;\r\n      height: 60px;\r\n      border-radius: 4px;\r\n      overflow: hidden;\r\n    }\r\n    \r\n    .summary-image img {\r\n      width: 100%;\r\n      height: 100%;\r\n      object-fit: cover;\r\n    }\r\n    \r\n    .more-images {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      width: 60px;\r\n      height: 60px;\r\n      background-color: #eee;\r\n      border-radius: 4px;\r\n      font-size: 0.75rem;\r\n    }\r\n    \r\n    .final-actions {\r\n      justify-content: space-between;\r\n    }\r\n    \r\n    .spin {\r\n      animation: spin 1.5s linear infinite;\r\n    }\r\n    \r\n    @keyframes spin {\r\n      0% { transform: rotate(0deg); }\r\n      100% { transform: rotate(360deg); }\r\n    }\r\n  `]\r\n})\r\nexport class DynamicProductFormComponent implements OnInit, OnDestroy {\r\n  // Forms for each step\r\n  basicInfoForm = new FormGroup({});\r\n  pricingForm = new FormGroup({});\r\n  attributesForm = new FormGroup({});\r\n  seoForm = new FormGroup({});\r\n\r\n  // Formly fields configuration\r\n  basicInfoFields: FormlyFieldConfig[] = [];\r\n  pricingFields: FormlyFieldConfig[] = [];\r\n  attributesFields: FormlyFieldConfig[] = [];\r\n  seoFields: FormlyFieldConfig[] = [];\r\n\r\n  // Product model\r\n  model: ProductFormModel = {\r\n    basicInfo: {\r\n      name: '',\r\n      description: '',\r\n      sku: '',\r\n      categoryId: '',\r\n      productTypeId: ''\r\n    },\r\n    pricing: {\r\n      price: 0,\r\n      currency: 'USD',\r\n      stock: 0\r\n    },\r\n    attributes: {},\r\n    status: ProductStatus.Draft,\r\n    visibility: ProductVisibility.Hidden,\r\n    images: []\r\n  };\r\n\r\n  // Component state\r\n  isEditMode = false;\r\n  isSubmitting = false;\r\n  productId? = input<string>('productId');\r\n  productTypes: ProductType[] = [];\r\n  selectedProductType?: ProductType;\r\n\r\n  private readonly destroy$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private readonly router: Router,\r\n    private readonly productService: ProductService,\r\n    private readonly productTypeService: ProductTypeService,\r\n    private readonly categoryService: CategoryService,\r\n    private readonly errorService: ErrorService,\r\n    private readonly snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadProductTypes();\r\n    this.initBasicInfoFields();\r\n    this.initPricingFields();\r\n    this.initSeoFields();\r\n\r\n    // Try to load saved form data if it exists\r\n    if (!environment.production) {\r\n      this.loadSavedFormData();\r\n    }\r\n\r\n    // If we're in edit mode (check for route param)\r\n    // this.route.paramMap.pipe(\r\n    //   takeUntil(this.destroy$),\r\n    //   switchMap(params => {\r\n    //     const id = params.get('id');\r\n    //     if (id) {\r\n    //       this.isEditMode = true;\r\n    //       this.productId = id;\r\n    //       return this.productService.getProduct(id);\r\n    //     }\r\n    //     return of(null);\r\n    //   })\r\n    // ).subscribe(product => {\r\n    //   if (product) {\r\n    //     this.loadExistingProduct(product);\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  private loadProductTypes(): void {\r\n    this.productTypeService.getProductTypes()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(types => {\r\n        this.productTypes = types;\r\n        if (types.length > 0 && !this.selectedProductType) {\r\n          this.onProductTypeChange(types[0].id);\r\n        }\r\n      });\r\n  }\r\n\r\n  onProductTypeChange(typeId: string): void {\r\n    this.selectedProductType = this.productTypes.find(type => type.id === typeId);\r\n    this.model.basicInfo.productTypeId = typeId;\r\n\r\n    // Reset attributes when product type changes\r\n    this.model.attributes = {};\r\n    this.attributesForm = new FormGroup({});\r\n\r\n    // Load attribute fields for the selected product type\r\n    if (this.selectedProductType) {\r\n      this.productTypeService.getAttributeFieldsByType(typeId)\r\n        .pipe(takeUntil(this.destroy$))\r\n        .subscribe(fields => {\r\n          this.attributesFields = fields;\r\n        });\r\n    }\r\n  }\r\n\r\n  private initBasicInfoFields(): void {\r\n    combineLatest([\r\n      this.categoryService.getCategories().pipe(startWith([])),\r\n      of(['USD', 'EUR', 'GBP', 'CAD', 'AUD']), // Currencies\r\n    ]).pipe(\r\n      takeUntil(this.destroy$)\r\n    ).subscribe(([categories, currencies]) => {\r\n      this.basicInfoFields = [\r\n        {\r\n          key: 'name',\r\n          type: 'input',\r\n          props: {\r\n            label: 'Product Name',\r\n            placeholder: 'Enter product name',\r\n            required: true,\r\n            minLength: 3,\r\n            maxLength: 100\r\n          },\r\n          validation: {\r\n            messages: {\r\n              required: 'Product name is required',\r\n              minlength: 'Name must be at least 3 characters',\r\n              maxlength: 'Name cannot be more than 100 characters'\r\n            }\r\n          }\r\n        },\r\n        {\r\n          key: 'description',\r\n          type: 'textarea',\r\n          props: {\r\n            label: 'Description',\r\n            placeholder: 'Enter product description',\r\n            required: true,\r\n            rows: 5,\r\n            maxLength: 2000\r\n          },\r\n          validation: {\r\n            messages: {\r\n              required: 'Description is required',\r\n              maxlength: 'Description cannot be more than 2000 characters'\r\n            }\r\n          }\r\n        },\r\n        {\r\n          key: 'shortDescription',\r\n          type: 'textarea',\r\n          props: {\r\n            label: 'Short Description',\r\n            placeholder: 'Enter a brief summary (optional)',\r\n            rows: 2,\r\n            maxLength: 500\r\n          }\r\n        },\r\n        {\r\n          key: 'sku',\r\n          type: 'input',\r\n          props: {\r\n            label: 'SKU (Stock Keeping Unit)',\r\n            placeholder: 'Enter product SKU',\r\n            required: true,\r\n            maxLength: 50\r\n          },\r\n          validation: {\r\n            messages: {\r\n              required: 'SKU is required',\r\n              maxlength: 'SKU cannot be more than 50 characters'\r\n            }\r\n          }\r\n        },\r\n        {\r\n          key: 'barcode',\r\n          type: 'input',\r\n          props: {\r\n            label: 'Barcode (UPC, EAN, etc.)',\r\n            placeholder: 'Enter product barcode (optional)',\r\n            maxLength: 50\r\n          }\r\n        },\r\n        {\r\n          key: 'categoryId',\r\n          type: 'select',\r\n          props: {\r\n            label: 'Category',\r\n            placeholder: 'Select a category',\r\n            required: true,\r\n            options: categories.map(cat => ({\r\n              label: cat.name,\r\n              value: cat.id\r\n            }))\r\n          },\r\n          validation: {\r\n            messages: {\r\n              required: 'Category is required'\r\n            }\r\n          }\r\n        },\r\n        {\r\n          key: 'subCategoryId',\r\n          type: 'select',\r\n          props: {\r\n            label: 'Subcategory',\r\n            placeholder: 'Select a subcategory (optional)',\r\n            options: []\r\n          },\r\n          expressionProperties: {\r\n            'props.options': (model, formState) => {\r\n              const categoryId = model.categoryId;\r\n              if (!categoryId) return [];\r\n\r\n              const category = categories.find(c => c.id === categoryId);\r\n              if (!category?.subCategories) return [];\r\n\r\n              return category.subCategories.map(sub => ({\r\n                label: sub.name,\r\n                value: sub.id\r\n              }));\r\n            }\r\n          }\r\n        }\r\n      ];\r\n    });\r\n  }\r\n\r\n  private initPricingFields(): void {\r\n    // First import the Currency enum\r\n\r\n    this.pricingFields = [\r\n      {\r\n        fieldGroupClassName: 'row',\r\n        fieldGroup: [\r\n          {\r\n            className: 'col-sm-6',\r\n            key: 'price',\r\n            type: 'input',\r\n            props: {\r\n              type: 'number',\r\n              label: 'Price',\r\n              placeholder: 'Enter price',\r\n              required: true,\r\n              min: 0,\r\n              step: 0.01,\r\n              addonLeft: {\r\n                text: '$'\r\n              }\r\n            },\r\n            validation: {\r\n              messages: {\r\n                required: 'Price is required',\r\n                min: 'Price must be greater than or equal to 0'\r\n              }\r\n            }\r\n          },\r\n          {\r\n            className: 'col-sm-6',\r\n            key: 'currency',\r\n            type: 'select',\r\n            props: {\r\n              label: 'Currency',\r\n              placeholder: 'Select currency',\r\n              required: true,\r\n              options: Object.entries(Currency).map(([code, name]) => ({\r\n                label: `${code} - ${name}`,\r\n                value: code\r\n              }))\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        key: 'compareAtPrice',\r\n        type: 'input',\r\n        props: {\r\n          type: 'number',\r\n          label: 'Compare-at Price',\r\n          placeholder: 'Enter original price (optional)',\r\n          min: 0,\r\n          step: 0.01,\r\n          description: 'Used to show a markdown or sale price'\r\n        }\r\n      },\r\n      {\r\n        fieldGroupClassName: 'row',\r\n        fieldGroup: [\r\n          {\r\n            className: 'col-sm-6',\r\n            key: 'stock',\r\n            type: 'input',\r\n            props: {\r\n              type: 'number',\r\n              label: 'Initial Stock',\r\n              placeholder: 'Enter initial stock',\r\n              required: true,\r\n              min: 0\r\n            },\r\n            validation: {\r\n              messages: {\r\n                required: 'Initial stock is required',\r\n                min: 'Stock must be greater than or equal to 0'\r\n              }\r\n            }\r\n          },\r\n          {\r\n            className: 'col-sm-6',\r\n            key: 'lowStockThreshold',\r\n            type: 'input',\r\n            props: {\r\n              type: 'number',\r\n              label: 'Low Stock Threshold',\r\n              placeholder: 'Enter low stock threshold (optional)',\r\n              min: 0,\r\n              description: 'Alerts when stock falls below this number'\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ];\r\n  }\r\n\r\n  private initSeoFields(): void {\r\n    this.seoFields = [\r\n      {\r\n        key: 'seo',\r\n        fieldGroup: [\r\n          {\r\n            key: 'title',\r\n            type: 'input',\r\n            props: {\r\n              label: 'SEO Title',\r\n              placeholder: 'Enter SEO title (optional)',\r\n              maxLength: 70,\r\n              description: 'Override page title for search engines'\r\n            }\r\n          },\r\n          {\r\n            key: 'description',\r\n            type: 'textarea',\r\n            props: {\r\n              label: 'SEO Description',\r\n              placeholder: 'Enter SEO description (optional)',\r\n              maxLength: 160,\r\n              rows: 3,\r\n              description: 'Meta description for search engines'\r\n            }\r\n          },\r\n          {\r\n            key: 'keywords',\r\n            type: 'input',\r\n            props: {\r\n              label: 'SEO Keywords',\r\n              placeholder: 'Enter keywords separated by commas (optional)',\r\n              description: 'Keywords for search engines'\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        key: 'status',\r\n        type: 'select',\r\n        props: {\r\n          label: 'Product Status',\r\n          placeholder: 'Select status',\r\n          required: true,\r\n          options: [\r\n            { label: 'Draft', value: ProductStatus.Draft },\r\n            { label: 'Active', value: ProductStatus.Active },\r\n            { label: 'Out of Stock', value: ProductStatus.OutOfStock },\r\n            { label: 'Discontinued', value: ProductStatus.Discontinued }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        key: 'visibility',\r\n        type: 'select',\r\n        props: {\r\n          label: 'Product Visibility',\r\n          placeholder: 'Select visibility',\r\n          required: true,\r\n          options: [\r\n            { label: 'Visible', value: ProductVisibility.Visible },\r\n            { label: 'Hidden', value: ProductVisibility.Hidden },\r\n            { label: 'Featured', value: ProductVisibility.Featured }\r\n          ]\r\n        }\r\n      }\r\n    ];\r\n  }\r\n\r\n  onImagesChange(images: ProductImage[]): void {\r\n    this.model.images = images;\r\n  }\r\n\r\n  submitProduct(): void {\r\n    if (this.isSubmitting) return;\r\n\r\n    // Validate all forms\r\n    if (!this.validateAllForms()) {\r\n      this.errorService.addError({\r\n        code: 'VALIDATION_ERROR',\r\n        message: 'Please fill in all required fields',\r\n        severity: 'warning'\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.isSubmitting = true;\r\n\r\n    // Prepare product data\r\n    const productData: ProductCreateCommand = {\r\n      name: this.model.basicInfo.name,\r\n      description: this.model.basicInfo.description,\r\n      shortDescription: this.model.basicInfo.shortDescription,\r\n      sku: this.model.basicInfo.sku,\r\n      barcode: this.model.basicInfo.barcode,\r\n      price: this.model.pricing.price,\r\n      currency: this.model.pricing.currency,\r\n      compareAtPrice: this.model.pricing.compareAtPrice,\r\n      categoryId: this.model.basicInfo.categoryId,\r\n      subCategoryId: this.model.basicInfo.subCategoryId,\r\n      stock: this.model.pricing.stock,\r\n      lowStockThreshold: this.model.pricing.lowStockThreshold,\r\n      status: this.model.status,\r\n      visibility: this.model.visibility,\r\n      images: this.model.images,\r\n      attributes: Object.entries(this.model.attributes).map(([name, value]) => ({\r\n        name,\r\n        value: String(value),\r\n        type: this.getAttributeType(name)\r\n      })),\r\n      tags: [],\r\n      seo: this.model.seo\r\n    };\r\n\r\n    // Process attributes for specific product types\r\n    this.processTypeSpecificAttributes(productData);\r\n\r\n    // Create or update product\r\n    const request$ = this.isEditMode && this.productId\r\n      ? this.productService.updateProduct({ id: this.productId(), ...productData })\r\n      : this.productService.createProduct(productData); request$.pipe(\r\n        takeUntil(this.destroy$),\r\n        finalize(() => {\r\n          this.isSubmitting = false;\r\n        })\r\n      ).subscribe({\r\n        next: () => {\r\n          const action = this.isEditMode ? 'updated' : 'created';\r\n          this.snackBar.open(`Product ${action} successfully`, 'Close', {\r\n            duration: 3000\r\n          });\r\n\r\n          // Clear any saved form data on successful submission\r\n          this.clearSavedFormData();\r\n\r\n          this.router.navigate(['/products/list']);\r\n        },\r\n        error: (error) => {\r\n          // On error, keep the form data and don't navigate away\r\n          this.errorService.addError({\r\n            code: 'PRODUCT_SUBMISSION_ERROR',\r\n            message: `Failed to ${this.isEditMode ? 'update' : 'create'} product: ${error.message}`,\r\n            severity: 'error'\r\n          });\r\n\r\n          // Save form data to session storage as a backup\r\n          if (!environment.production) {\r\n            this.saveFormData();\r\n            this.snackBar.open('Your data has been preserved. You can continue editing.', 'OK', {\r\n              duration: 5000\r\n            });\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  private validateAllForms(): boolean {\r\n    return (\r\n      this.basicInfoForm.valid &&\r\n      this.pricingForm.valid &&\r\n      this.attributesForm.valid &&\r\n      this.seoForm.valid &&\r\n      this.model.images.length > 0\r\n    );\r\n  }\r\n\r\n  formatAttributeValue(key: string | number | (string | number)[], value: any): string {\r\n    if (value === undefined || value === null) {\r\n      return 'Not specified';\r\n    }\r\n\r\n    if (key === undefined) {\r\n      return String(value);\r\n    }\r\n\r\n    // Find the attribute field\r\n    const field = this.attributesFields.find(f => f.key === key);\r\n    if (!field) return String(value);\r\n\r\n    // Format based on field type\r\n    switch (field.type) {\r\n      case 'checkbox':\r\n        return value ? 'Yes' : 'No';\r\n      case 'select':\r\n        // Handle multiselect\r\n        if (Array.isArray(value)) {\r\n          if (field.props?.options) {\r\n            const options = field.props.options as { label: string, value: any }[];\r\n            return value.map(v => options.find(o => o.value === v)?.label ?? v).join(', ');\r\n          }\r\n          return value.join(', ');\r\n        } else if (field.props?.options) {\r\n          // Single select - find the label for the value\r\n          const options = field.props.options as { label: string, value: any }[];\r\n          const option = options.find(o => o.value === value);\r\n          return option ? option.label : String(value);\r\n        }\r\n        return String(value);\r\n      case 'color-picker':\r\n        // Format color values appropriately\r\n        return `<span style=\"color: ${value}\">■</span> ${value}`;\r\n      default:\r\n        return String(value);\r\n    }\r\n  }\r\n\r\n  formatEnumValue(value: string): string {\r\n    if (!value) return '';\r\n\r\n    // Convert from enum format (e.g., \"OutOfStock\") to display format (e.g., \"Out of Stock\")\r\n    return value\r\n      // Insert space before capitals\r\n      .replace(/([A-Z])/g, ' $1')\r\n      // Handle the first character\r\n      .replace(/^./, str => str.toUpperCase())\r\n      .trim();\r\n  }\r\n\r\n  // Helper method to convert field keys to string representation for use in template\r\n  getKeyAsString(key: string | number | (string | number)[]): string {\r\n    if (typeof key === 'string' || typeof key === 'number') {\r\n      return String(key);\r\n    } else if (Array.isArray(key)) {\r\n      return key.join('.');\r\n    }\r\n    return '';\r\n  }\r\n\r\n  getAttributeType(attributeName: string): string {\r\n    if (!this.selectedProductType) return 'string';\r\n\r\n    const attribute = this.selectedProductType.attributes.find(a => a.id === attributeName);\r\n\r\n    if (!attribute) return 'string';\r\n\r\n    // Map attribute types to API expected types\r\n    switch (attribute.type) {\r\n      case 'number':\r\n        return 'number';\r\n      case 'boolean':\r\n        return 'boolean';\r\n      case 'multiselect':\r\n        return 'array';\r\n      default:\r\n        return 'string';\r\n    }\r\n  }\r\n\r\n  processTypeSpecificAttributes(productData: any): void {\r\n    // This method will process attributes specific to certain product types\r\n    // For example, adding special handling for clothing sizes, electronics specs, etc.\r\n\r\n    if (!this.selectedProductType) return;\r\n\r\n    switch (this.selectedProductType.id) {\r\n      case 'clothing':\r\n        // Process clothing-specific attributes\r\n        this.processClothingAttributes(productData);\r\n        break;\r\n      case 'electronics':\r\n        // Process electronics-specific attributes\r\n        this.processElectronicsAttributes(productData);\r\n        break;\r\n      case 'books':\r\n        // Process book-specific attributes\r\n        this.processBooksAttributes(productData);\r\n        break;\r\n      default:\r\n        // No special processing needed\r\n        break;\r\n    }\r\n  }\r\n\r\n  private processClothingAttributes(productData: any): void {\r\n    // Example: Convert size/color attributes to variants if needed\r\n    const sizes = this.model.attributes['size'];\r\n    const colors = this.model.attributes['color'];\r\n\r\n    if (Array.isArray(sizes) && sizes.length > 0 && colors) {\r\n      // This is just an example of what could be done\r\n      // In a real application, we might create product variants here\r\n      productData.hasVariants = true;\r\n      productData.variantAttributes = ['size', 'color'];\r\n    }\r\n  }\r\n\r\n  private processElectronicsAttributes(productData: any): void {\r\n    // Example: Add technical specifications section\r\n    if (this.model.attributes['brand'] || this.model.attributes['model']) {\r\n      productData.specifications = {\r\n        brand: this.model.attributes['brand'],\r\n        model: this.model.attributes['model'],\r\n        warrantyMonths: this.model.attributes['warranty']\r\n      };\r\n    }\r\n  }\r\n\r\n  private processBooksAttributes(productData: any): void {\r\n    // Example: Add publishing information\r\n    if (this.model.attributes['author']) {\r\n      productData.publishingDetails = {\r\n        author: this.model.attributes['author'],\r\n        isbn: this.model.attributes['isbn'],\r\n        pages: this.model.attributes['pages']\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save the current form data to session storage\r\n   * This is used to preserve data during development when backend errors occur\r\n   */\r\n  private saveFormData(): void {\r\n    try {\r\n      const formData = {\r\n        basicInfo: this.basicInfoForm.value,\r\n        pricing: this.pricingForm.value,\r\n        attributes: this.attributesForm.value,\r\n        seo: this.seoForm.value,\r\n        images: this.model.images,\r\n        status: this.model.status,\r\n        visibility: this.model.visibility,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n      sessionStorage.setItem('product_form_backup', JSON.stringify(formData));\r\n      console.log('Product form data saved to session storage');\r\n    } catch (error) {\r\n      console.error('Failed to save form data to session storage', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load saved form data from session storage\r\n   * Returns true if data was loaded successfully\r\n   */\r\n  private loadSavedFormData(): boolean {\r\n    try {\r\n      const savedData = sessionStorage.getItem('product_form_backup');\r\n      if (!savedData) return false;\r\n\r\n      const formData = JSON.parse(savedData);\r\n\r\n      // Check if the saved data is still relevant (e.g., not too old)\r\n      const savedTime = new Date(formData.timestamp);\r\n      const currentTime = new Date();\r\n      const hoursSinceLastSave = (currentTime.getTime() - savedTime.getTime()) / (1000 * 60 * 60);\r\n\r\n      // Only load data if it's less than 12 hours old\r\n      if (hoursSinceLastSave > 12) {\r\n        this.clearSavedFormData();\r\n        return false;\r\n      }\r\n\r\n      // Update the model with saved data\r\n      if (formData.basicInfo) {\r\n        this.model.basicInfo = { ...this.model.basicInfo, ...formData.basicInfo };\r\n        this.basicInfoForm.patchValue(formData.basicInfo);\r\n      }\r\n\r\n      if (formData.pricing) {\r\n        this.model.pricing = { ...this.model.pricing, ...formData.pricing };\r\n        this.pricingForm.patchValue(formData.pricing);\r\n      }\r\n\r\n      if (formData.attributes) {\r\n        this.model.attributes = { ...formData.attributes };\r\n        this.attributesForm.patchValue(formData.attributes);\r\n      }\r\n\r\n      if (formData.seo) {\r\n        this.model.seo = formData.seo;\r\n        this.seoForm.patchValue(formData.seo);\r\n      }\r\n\r\n      if (formData.images && Array.isArray(formData.images)) {\r\n        this.model.images = formData.images;\r\n      }\r\n\r\n      if (formData.status) {\r\n        this.model.status = formData.status;\r\n      }\r\n\r\n      if (formData.visibility) {\r\n        this.model.visibility = formData.visibility;\r\n      }\r\n\r\n      this.snackBar.open('Form data has been restored from a previous session', 'Dismiss', {\r\n        duration: 5000\r\n      });\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Failed to load form data from session storage', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear any saved form data from session storage\r\n   */\r\n  private clearSavedFormData(): void {\r\n    try {\r\n      sessionStorage.removeItem('product_form_backup');\r\n    } catch (error) {\r\n      console.error('Failed to clear form data from session storage', error);\r\n    }\r\n  }\r\n\r\n}",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | any>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "basicInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductImage[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "pricing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "seo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "visibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductVisibility",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProductImage",
            "id": "interface-ProductImage-ede863e17cfef0da35144ad1c8b7b45ac71aa6d4a3eec2aadc2b9a55128f1f91c97b44d861c3ca428f2c8a0e98d70e67ee84c665783b666e43d517a46ee59d79",
            "file": "src/app/shared/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Category } from \"./category.model\";\r\n\r\n// Enhanced filter options for product queries\r\nexport interface ProductFilters {\r\n    search?: string;\r\n    categoryId?: string;\r\n    subCategoryId?: string;\r\n    minPrice?: number | null;\r\n    maxPrice?: number | null;\r\n    status?: ProductStatus;\r\n    visibility?: ProductVisibility;\r\n    inStock?: boolean | null;\r\n    tags?: string[];\r\n    page?: number;\r\n    pageSize?: number;\r\n    sortColumn?: keyof Product;\r\n    sortDirection?: 'asc' | 'desc';\r\n}\r\n\r\n// Command pattern interface for creating products\r\nexport interface ProductCreateCommand {\r\n    name: string;\r\n    slug?: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    categoryId: string;\r\n    subCategoryId?: string;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    barcode?: string;\r\n    images: ProductImage[];\r\n    status: ProductStatus;\r\n    visibility: ProductVisibility;\r\n    attributes?: Array<{ name: string; value: string; type: string }>;\r\n    tags?: string[];\r\n    seo?: {\r\n        title?: string;\r\n        description?: string;\r\n        keywords?: string[];\r\n    };\r\n    dimensions?: {\r\n        weight: number;\r\n        width: number;\r\n        height: number;\r\n        length: number;\r\n        unit: 'cm' | 'inch';\r\n    };\r\n}\r\n\r\n// Command pattern interface for updating products\r\nexport interface ProductUpdateCommand extends Partial<ProductCreateCommand> {\r\n    id: string;\r\n    newImages?: File[];\r\n    imageIdsToRemove?: string[];\r\n    imageUpdates?: Array<{ id: string; isPrimary?: boolean; sortOrder?: number; alt?: string }>;\r\n}\r\n\r\nexport interface Product {\r\n    id: string;\r\n    name: string;\r\n    slug: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    barcode?: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    category: Category;\r\n    subCategory?: Category;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    status: ProductStatus; // Enum that maps to backend string values\r\n    visibility: ProductVisibility; // Enum that maps to backend string values\r\n    images: ProductImage[];\r\n    variants: ProductVariant[];\r\n    attributes: ProductAttribute[];\r\n    seo?: ProductSeo;\r\n    dimensions?: ProductDimensions;\r\n    tags: string[];\r\n    createdAt: string; // ISO date string\r\n    createdBy?: string;\r\n    lastModifiedAt?: string; // ISO date string\r\n    lastModifiedBy?: string;\r\n    isArchived: boolean;\r\n}\r\n\r\nexport enum ProductStatus {\r\n    Draft = 'draft',\r\n    Active = 'active',\r\n    OutOfStock = 'out_of_stock',\r\n    Discontinued = 'discontinued'\r\n}\r\n\r\nexport enum ProductVisibility {\r\n    Visible = 'visible',\r\n    Hidden = 'hidden',\r\n    Featured = 'featured'\r\n}\r\n\r\nexport interface ProductImage {\r\n    id: string;\r\n    url: string;\r\n    fileName: string;\r\n    size: number;\r\n    isPrimary: boolean;\r\n    sortOrder: number;\r\n    alt?: string;\r\n}\r\n\r\nexport interface ProductVariant {\r\n    id: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    costPrice?: number;\r\n    barcode?: string;\r\n    stock: number;\r\n    trackInventory: boolean;\r\n    allowBackorders: boolean;\r\n    lowStockThreshold?: number;\r\n    sortOrder: number;\r\n    isLowStock: boolean;\r\n    isOutOfStock: boolean;\r\n    attributes: ProductAttribute[];\r\n    images: ProductImage[];\r\n    productId: string;\r\n}\r\n\r\nexport interface ProductAttribute {\r\n    name: string;\r\n    value: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ProductSeo {\r\n    title?: string;\r\n    description?: string;\r\n    keywords: string[];\r\n}\r\n\r\nexport interface ProductDimensions {\r\n    weight: number;\r\n    width: number;\r\n    height: number;\r\n    length: number;\r\n    unit: 'cm' | 'inch';\r\n}\r\n\r\n// Utility functions for mapping API responses to model objects\r\n\r\n/**\r\n * Maps a product from API response format to the Product interface\r\n * @param product The raw product data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted Product object\r\n */\r\nexport function mapProductFromApi(product: any, getFullImageUrl: (url: string) => string): Product {\r\n    return {\r\n        ...product,\r\n        // Map string values to enum values\r\n        status: product.status as ProductStatus,\r\n        visibility: product.visibility as ProductVisibility,\r\n        // Ensure collections are never null and properly format image URLs\r\n        images: (product.images || []).map((img: ProductImage) => ({\r\n            ...img,\r\n            url: getFullImageUrl(img.url)\r\n        })),\r\n        attributes: product.attributes || [],\r\n        tags: product.tags || [],\r\n        // Format dates if needed\r\n        createdAt: product.createdAt,\r\n        lastModifiedAt: product.lastModifiedAt,\r\n        variants: Array.isArray(product.variants)\r\n            ? product.variants.map((v: any) => mapVariantFromApi(v, getFullImageUrl))\r\n            : []\r\n    };\r\n}\r\n\r\n/**\r\n * Maps a product variant from API response format to the ProductVariant interface\r\n * @param variant The raw variant data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted ProductVariant object\r\n */\r\nexport function mapVariantFromApi(variant: any, getFullImageUrl: (url: string) => string): ProductVariant {\r\n    return {\r\n        id: variant.id,\r\n        sku: variant.sku,\r\n        price: variant.price,\r\n        currency: variant.currency || 'USD',\r\n        compareAtPrice: variant.compareAtPrice,\r\n        costPrice: variant.costPrice,\r\n        barcode: variant.barcode,\r\n        stock: variant.stock,\r\n        trackInventory: variant.trackInventory ?? true,\r\n        allowBackorders: variant.allowBackorders ?? false,\r\n        lowStockThreshold: variant.lowStockThreshold,\r\n        sortOrder: variant.sortOrder || 0,\r\n        isLowStock: variant.isLowStock ?? false,\r\n        isOutOfStock: variant.isOutOfStock ?? false,\r\n        attributes: Array.isArray(variant.attributes) ? variant.attributes : [],\r\n        images: Array.isArray(variant.images)\r\n            ? variant.images.map((img: ProductImage) => ({\r\n                ...img,\r\n                url: getFullImageUrl(img.url)\r\n            }))\r\n            : [],\r\n        productId: variant.productId\r\n    };\r\n}",
            "properties": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "fileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "isPrimary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "sortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 108
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProductSeo",
            "id": "interface-ProductSeo-ede863e17cfef0da35144ad1c8b7b45ac71aa6d4a3eec2aadc2b9a55128f1f91c97b44d861c3ca428f2c8a0e98d70e67ee84c665783b666e43d517a46ee59d79",
            "file": "src/app/shared/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Category } from \"./category.model\";\r\n\r\n// Enhanced filter options for product queries\r\nexport interface ProductFilters {\r\n    search?: string;\r\n    categoryId?: string;\r\n    subCategoryId?: string;\r\n    minPrice?: number | null;\r\n    maxPrice?: number | null;\r\n    status?: ProductStatus;\r\n    visibility?: ProductVisibility;\r\n    inStock?: boolean | null;\r\n    tags?: string[];\r\n    page?: number;\r\n    pageSize?: number;\r\n    sortColumn?: keyof Product;\r\n    sortDirection?: 'asc' | 'desc';\r\n}\r\n\r\n// Command pattern interface for creating products\r\nexport interface ProductCreateCommand {\r\n    name: string;\r\n    slug?: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    categoryId: string;\r\n    subCategoryId?: string;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    barcode?: string;\r\n    images: ProductImage[];\r\n    status: ProductStatus;\r\n    visibility: ProductVisibility;\r\n    attributes?: Array<{ name: string; value: string; type: string }>;\r\n    tags?: string[];\r\n    seo?: {\r\n        title?: string;\r\n        description?: string;\r\n        keywords?: string[];\r\n    };\r\n    dimensions?: {\r\n        weight: number;\r\n        width: number;\r\n        height: number;\r\n        length: number;\r\n        unit: 'cm' | 'inch';\r\n    };\r\n}\r\n\r\n// Command pattern interface for updating products\r\nexport interface ProductUpdateCommand extends Partial<ProductCreateCommand> {\r\n    id: string;\r\n    newImages?: File[];\r\n    imageIdsToRemove?: string[];\r\n    imageUpdates?: Array<{ id: string; isPrimary?: boolean; sortOrder?: number; alt?: string }>;\r\n}\r\n\r\nexport interface Product {\r\n    id: string;\r\n    name: string;\r\n    slug: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    barcode?: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    category: Category;\r\n    subCategory?: Category;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    status: ProductStatus; // Enum that maps to backend string values\r\n    visibility: ProductVisibility; // Enum that maps to backend string values\r\n    images: ProductImage[];\r\n    variants: ProductVariant[];\r\n    attributes: ProductAttribute[];\r\n    seo?: ProductSeo;\r\n    dimensions?: ProductDimensions;\r\n    tags: string[];\r\n    createdAt: string; // ISO date string\r\n    createdBy?: string;\r\n    lastModifiedAt?: string; // ISO date string\r\n    lastModifiedBy?: string;\r\n    isArchived: boolean;\r\n}\r\n\r\nexport enum ProductStatus {\r\n    Draft = 'draft',\r\n    Active = 'active',\r\n    OutOfStock = 'out_of_stock',\r\n    Discontinued = 'discontinued'\r\n}\r\n\r\nexport enum ProductVisibility {\r\n    Visible = 'visible',\r\n    Hidden = 'hidden',\r\n    Featured = 'featured'\r\n}\r\n\r\nexport interface ProductImage {\r\n    id: string;\r\n    url: string;\r\n    fileName: string;\r\n    size: number;\r\n    isPrimary: boolean;\r\n    sortOrder: number;\r\n    alt?: string;\r\n}\r\n\r\nexport interface ProductVariant {\r\n    id: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    costPrice?: number;\r\n    barcode?: string;\r\n    stock: number;\r\n    trackInventory: boolean;\r\n    allowBackorders: boolean;\r\n    lowStockThreshold?: number;\r\n    sortOrder: number;\r\n    isLowStock: boolean;\r\n    isOutOfStock: boolean;\r\n    attributes: ProductAttribute[];\r\n    images: ProductImage[];\r\n    productId: string;\r\n}\r\n\r\nexport interface ProductAttribute {\r\n    name: string;\r\n    value: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ProductSeo {\r\n    title?: string;\r\n    description?: string;\r\n    keywords: string[];\r\n}\r\n\r\nexport interface ProductDimensions {\r\n    weight: number;\r\n    width: number;\r\n    height: number;\r\n    length: number;\r\n    unit: 'cm' | 'inch';\r\n}\r\n\r\n// Utility functions for mapping API responses to model objects\r\n\r\n/**\r\n * Maps a product from API response format to the Product interface\r\n * @param product The raw product data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted Product object\r\n */\r\nexport function mapProductFromApi(product: any, getFullImageUrl: (url: string) => string): Product {\r\n    return {\r\n        ...product,\r\n        // Map string values to enum values\r\n        status: product.status as ProductStatus,\r\n        visibility: product.visibility as ProductVisibility,\r\n        // Ensure collections are never null and properly format image URLs\r\n        images: (product.images || []).map((img: ProductImage) => ({\r\n            ...img,\r\n            url: getFullImageUrl(img.url)\r\n        })),\r\n        attributes: product.attributes || [],\r\n        tags: product.tags || [],\r\n        // Format dates if needed\r\n        createdAt: product.createdAt,\r\n        lastModifiedAt: product.lastModifiedAt,\r\n        variants: Array.isArray(product.variants)\r\n            ? product.variants.map((v: any) => mapVariantFromApi(v, getFullImageUrl))\r\n            : []\r\n    };\r\n}\r\n\r\n/**\r\n * Maps a product variant from API response format to the ProductVariant interface\r\n * @param variant The raw variant data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted ProductVariant object\r\n */\r\nexport function mapVariantFromApi(variant: any, getFullImageUrl: (url: string) => string): ProductVariant {\r\n    return {\r\n        id: variant.id,\r\n        sku: variant.sku,\r\n        price: variant.price,\r\n        currency: variant.currency || 'USD',\r\n        compareAtPrice: variant.compareAtPrice,\r\n        costPrice: variant.costPrice,\r\n        barcode: variant.barcode,\r\n        stock: variant.stock,\r\n        trackInventory: variant.trackInventory ?? true,\r\n        allowBackorders: variant.allowBackorders ?? false,\r\n        lowStockThreshold: variant.lowStockThreshold,\r\n        sortOrder: variant.sortOrder || 0,\r\n        isLowStock: variant.isLowStock ?? false,\r\n        isOutOfStock: variant.isOutOfStock ?? false,\r\n        attributes: Array.isArray(variant.attributes) ? variant.attributes : [],\r\n        images: Array.isArray(variant.images)\r\n            ? variant.images.map((img: ProductImage) => ({\r\n                ...img,\r\n                url: getFullImageUrl(img.url)\r\n            }))\r\n            : [],\r\n        productId: variant.productId\r\n    };\r\n}",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 144
                },
                {
                    "name": "keywords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 143
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProductState",
            "id": "interface-ProductState-8fba0bee373ef49cae36f9ed87255a9a7f43ee2a7574516cbd45ce4d683d51dddfe92d04abe4d8132d441f156695494cc7128e02f9feb43a545f7606aa86720e",
            "file": "src/app/store/product/product.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Product } from \"src/app/shared/models/product.model\";\r\n\r\nexport interface ProductState {\r\n    products: Product[];\r\n    selectedProduct: Product | null;\r\n    loading: boolean;\r\n    error: string | null;\r\n    filters: {\r\n        search: string;\r\n        category: string;\r\n        minPrice: number | null;\r\n        maxPrice: number | null;\r\n        inStock: boolean | null;\r\n        page: number;\r\n        pageSize: number;\r\n        sortColumn?: keyof Product;\r\n        sortDirection?: 'asc' | 'desc';\r\n    };\r\n    pagination: {\r\n        currentPage: number;\r\n        pageSize: number;\r\n        totalItems: number;\r\n    };\r\n    optimisticUpdate: {\r\n        originalProduct: Product | null;\r\n        pending: boolean;\r\n    };\r\n    cache: {\r\n        timestamp: number | null;\r\n        duration: number; // cache duration in milliseconds\r\n    };\r\n}\r\n\r\nexport const initialProductState: ProductState = {\r\n    products: [],\r\n    selectedProduct: null,\r\n    loading: false,\r\n    error: null,\r\n    filters: {\r\n        search: '',\r\n        category: '',\r\n        minPrice: null,\r\n        maxPrice: null,\r\n        inStock: null,\r\n        page: 1,\r\n        pageSize: 10,\r\n        sortColumn: undefined,\r\n        sortDirection: undefined\r\n    },\r\n    pagination: {\r\n        currentPage: 1,\r\n        pageSize: 10,\r\n        totalItems: 0\r\n    },\r\n    optimisticUpdate: {\r\n        originalProduct: null,\r\n        pending: false\r\n    },\r\n    cache: {\r\n        timestamp: null,\r\n        duration: 5 * 60 * 1000 // 5 minutes\r\n    }\r\n};",
            "properties": [
                {
                    "name": "cache",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "optimisticUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "products",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "selectedProduct",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProductType",
            "id": "interface-ProductType-051f98bf72e2dd7364d8ac66e9d2d60d9d04bdb8322648cb8075c27521bcb83b95569279bd5f8948ff8848b49ec03d114809e172b9f2e6dfece1410b7c67de8a",
            "file": "src/app/shared/models/product-type.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormlyFieldConfig } from '@ngx-formly/core';\r\n\r\nexport interface ProductType {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    icon: string;\r\n    attributes: ProductTypeAttribute[];\r\n    formConfig: FormlyFieldConfig[];\r\n}\r\n\r\nexport interface ProductTypeAttribute {\r\n    id: string;\r\n    name: string;\r\n    description?: string;\r\n    type: 'text' | 'number' | 'boolean' | 'select' | 'multiselect' | 'color' | 'size' | 'dimension';\r\n    isRequired: boolean;\r\n    defaultValue?: any;\r\n    options?: { label: string, value: any }[];\r\n    validation?: {\r\n        min?: number;\r\n        max?: number;\r\n        pattern?: string;\r\n        message?: string;\r\n    };\r\n    displayOrder: number;\r\n    isFilterable: boolean;\r\n    isComparable: boolean;\r\n}\r\n\r\n// Core product categories with specific attribute sets\r\nexport enum ProductCategory {\r\n    Clothing = 'clothing',\r\n    Electronics = 'electronics',\r\n    Furniture = 'furniture',\r\n    Books = 'books',\r\n    Groceries = 'groceries',\r\n    Beauty = 'beauty',\r\n    Toys = 'toys',\r\n    Other = 'other'\r\n}\r\n\r\n// Specific product types within categories\r\nexport interface ClothingAttributes {\r\n    size?: string[];\r\n    color?: string[];\r\n    material?: string;\r\n    gender?: 'men' | 'women' | 'unisex' | 'boys' | 'girls';\r\n    season?: string[];\r\n    care?: string;\r\n}\r\n\r\nexport interface ElectronicsAttributes {\r\n    brand?: string;\r\n    model?: string;\r\n    specifications?: Record<string, string>;\r\n    warranty?: string;\r\n    powerRequirements?: string;\r\n    connectivity?: string[];\r\n}\r\n\r\nexport interface BookAttributes {\r\n    author?: string;\r\n    publisher?: string;\r\n    isbn?: string;\r\n    language?: string;\r\n    format?: 'hardcover' | 'paperback' | 'ebook' | 'audiobook';\r\n    genre?: string[];\r\n    pages?: number;\r\n}\r\n\r\n// Utility types for product variants\r\nexport interface SizeVariant {\r\n    size: string;\r\n    stock: number;\r\n    price?: number; // Price adjustment if different from base\r\n    sku?: string;\r\n}\r\n\r\nexport interface ColorVariant {\r\n    color: string;\r\n    colorCode: string; // Hex code\r\n    imageUrl?: string;\r\n    stock: number;\r\n    price?: number; // Price adjustment if different from base\r\n    sku?: string;\r\n}\r\n\r\nexport interface SizeColorVariant extends SizeVariant, Omit<ColorVariant, 'stock' | 'price' | 'sku'> {\r\n    // Combined variant with specific stock/price for size+color combination\r\n    stock: number;\r\n    price?: number;\r\n    sku?: string;\r\n\r\n    // Additional properties can be added as needed\r\n    // e.g., discount, promotional price, etc.\r\n    discount?: number;\r\n    promotionalPrice?: number;\r\n    isFeatured?: boolean;\r\n    isAvailable?: boolean;\r\n\r\n}",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductTypeAttribute[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "formConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormlyFieldConfig[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProductTypeAttribute",
            "id": "interface-ProductTypeAttribute-051f98bf72e2dd7364d8ac66e9d2d60d9d04bdb8322648cb8075c27521bcb83b95569279bd5f8948ff8848b49ec03d114809e172b9f2e6dfece1410b7c67de8a",
            "file": "src/app/shared/models/product-type.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormlyFieldConfig } from '@ngx-formly/core';\r\n\r\nexport interface ProductType {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    icon: string;\r\n    attributes: ProductTypeAttribute[];\r\n    formConfig: FormlyFieldConfig[];\r\n}\r\n\r\nexport interface ProductTypeAttribute {\r\n    id: string;\r\n    name: string;\r\n    description?: string;\r\n    type: 'text' | 'number' | 'boolean' | 'select' | 'multiselect' | 'color' | 'size' | 'dimension';\r\n    isRequired: boolean;\r\n    defaultValue?: any;\r\n    options?: { label: string, value: any }[];\r\n    validation?: {\r\n        min?: number;\r\n        max?: number;\r\n        pattern?: string;\r\n        message?: string;\r\n    };\r\n    displayOrder: number;\r\n    isFilterable: boolean;\r\n    isComparable: boolean;\r\n}\r\n\r\n// Core product categories with specific attribute sets\r\nexport enum ProductCategory {\r\n    Clothing = 'clothing',\r\n    Electronics = 'electronics',\r\n    Furniture = 'furniture',\r\n    Books = 'books',\r\n    Groceries = 'groceries',\r\n    Beauty = 'beauty',\r\n    Toys = 'toys',\r\n    Other = 'other'\r\n}\r\n\r\n// Specific product types within categories\r\nexport interface ClothingAttributes {\r\n    size?: string[];\r\n    color?: string[];\r\n    material?: string;\r\n    gender?: 'men' | 'women' | 'unisex' | 'boys' | 'girls';\r\n    season?: string[];\r\n    care?: string;\r\n}\r\n\r\nexport interface ElectronicsAttributes {\r\n    brand?: string;\r\n    model?: string;\r\n    specifications?: Record<string, string>;\r\n    warranty?: string;\r\n    powerRequirements?: string;\r\n    connectivity?: string[];\r\n}\r\n\r\nexport interface BookAttributes {\r\n    author?: string;\r\n    publisher?: string;\r\n    isbn?: string;\r\n    language?: string;\r\n    format?: 'hardcover' | 'paperback' | 'ebook' | 'audiobook';\r\n    genre?: string[];\r\n    pages?: number;\r\n}\r\n\r\n// Utility types for product variants\r\nexport interface SizeVariant {\r\n    size: string;\r\n    stock: number;\r\n    price?: number; // Price adjustment if different from base\r\n    sku?: string;\r\n}\r\n\r\nexport interface ColorVariant {\r\n    color: string;\r\n    colorCode: string; // Hex code\r\n    imageUrl?: string;\r\n    stock: number;\r\n    price?: number; // Price adjustment if different from base\r\n    sku?: string;\r\n}\r\n\r\nexport interface SizeColorVariant extends SizeVariant, Omit<ColorVariant, 'stock' | 'price' | 'sku'> {\r\n    // Combined variant with specific stock/price for size+color combination\r\n    stock: number;\r\n    price?: number;\r\n    sku?: string;\r\n\r\n    // Additional properties can be added as needed\r\n    // e.g., discount, promotional price, etc.\r\n    discount?: number;\r\n    promotionalPrice?: number;\r\n    isFeatured?: boolean;\r\n    isAvailable?: boolean;\r\n\r\n}",
            "properties": [
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "displayOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isComparable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isFilterable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "isRequired",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"text\" | \"number\" | \"boolean\" | \"select\" | \"multiselect\" | \"color\" | \"size\" | \"dimension\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "validation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProductUpdateCommand",
            "id": "interface-ProductUpdateCommand-ede863e17cfef0da35144ad1c8b7b45ac71aa6d4a3eec2aadc2b9a55128f1f91c97b44d861c3ca428f2c8a0e98d70e67ee84c665783b666e43d517a46ee59d79",
            "file": "src/app/shared/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Category } from \"./category.model\";\r\n\r\n// Enhanced filter options for product queries\r\nexport interface ProductFilters {\r\n    search?: string;\r\n    categoryId?: string;\r\n    subCategoryId?: string;\r\n    minPrice?: number | null;\r\n    maxPrice?: number | null;\r\n    status?: ProductStatus;\r\n    visibility?: ProductVisibility;\r\n    inStock?: boolean | null;\r\n    tags?: string[];\r\n    page?: number;\r\n    pageSize?: number;\r\n    sortColumn?: keyof Product;\r\n    sortDirection?: 'asc' | 'desc';\r\n}\r\n\r\n// Command pattern interface for creating products\r\nexport interface ProductCreateCommand {\r\n    name: string;\r\n    slug?: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    categoryId: string;\r\n    subCategoryId?: string;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    barcode?: string;\r\n    images: ProductImage[];\r\n    status: ProductStatus;\r\n    visibility: ProductVisibility;\r\n    attributes?: Array<{ name: string; value: string; type: string }>;\r\n    tags?: string[];\r\n    seo?: {\r\n        title?: string;\r\n        description?: string;\r\n        keywords?: string[];\r\n    };\r\n    dimensions?: {\r\n        weight: number;\r\n        width: number;\r\n        height: number;\r\n        length: number;\r\n        unit: 'cm' | 'inch';\r\n    };\r\n}\r\n\r\n// Command pattern interface for updating products\r\nexport interface ProductUpdateCommand extends Partial<ProductCreateCommand> {\r\n    id: string;\r\n    newImages?: File[];\r\n    imageIdsToRemove?: string[];\r\n    imageUpdates?: Array<{ id: string; isPrimary?: boolean; sortOrder?: number; alt?: string }>;\r\n}\r\n\r\nexport interface Product {\r\n    id: string;\r\n    name: string;\r\n    slug: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    barcode?: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    category: Category;\r\n    subCategory?: Category;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    status: ProductStatus; // Enum that maps to backend string values\r\n    visibility: ProductVisibility; // Enum that maps to backend string values\r\n    images: ProductImage[];\r\n    variants: ProductVariant[];\r\n    attributes: ProductAttribute[];\r\n    seo?: ProductSeo;\r\n    dimensions?: ProductDimensions;\r\n    tags: string[];\r\n    createdAt: string; // ISO date string\r\n    createdBy?: string;\r\n    lastModifiedAt?: string; // ISO date string\r\n    lastModifiedBy?: string;\r\n    isArchived: boolean;\r\n}\r\n\r\nexport enum ProductStatus {\r\n    Draft = 'draft',\r\n    Active = 'active',\r\n    OutOfStock = 'out_of_stock',\r\n    Discontinued = 'discontinued'\r\n}\r\n\r\nexport enum ProductVisibility {\r\n    Visible = 'visible',\r\n    Hidden = 'hidden',\r\n    Featured = 'featured'\r\n}\r\n\r\nexport interface ProductImage {\r\n    id: string;\r\n    url: string;\r\n    fileName: string;\r\n    size: number;\r\n    isPrimary: boolean;\r\n    sortOrder: number;\r\n    alt?: string;\r\n}\r\n\r\nexport interface ProductVariant {\r\n    id: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    costPrice?: number;\r\n    barcode?: string;\r\n    stock: number;\r\n    trackInventory: boolean;\r\n    allowBackorders: boolean;\r\n    lowStockThreshold?: number;\r\n    sortOrder: number;\r\n    isLowStock: boolean;\r\n    isOutOfStock: boolean;\r\n    attributes: ProductAttribute[];\r\n    images: ProductImage[];\r\n    productId: string;\r\n}\r\n\r\nexport interface ProductAttribute {\r\n    name: string;\r\n    value: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ProductSeo {\r\n    title?: string;\r\n    description?: string;\r\n    keywords: string[];\r\n}\r\n\r\nexport interface ProductDimensions {\r\n    weight: number;\r\n    width: number;\r\n    height: number;\r\n    length: number;\r\n    unit: 'cm' | 'inch';\r\n}\r\n\r\n// Utility functions for mapping API responses to model objects\r\n\r\n/**\r\n * Maps a product from API response format to the Product interface\r\n * @param product The raw product data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted Product object\r\n */\r\nexport function mapProductFromApi(product: any, getFullImageUrl: (url: string) => string): Product {\r\n    return {\r\n        ...product,\r\n        // Map string values to enum values\r\n        status: product.status as ProductStatus,\r\n        visibility: product.visibility as ProductVisibility,\r\n        // Ensure collections are never null and properly format image URLs\r\n        images: (product.images || []).map((img: ProductImage) => ({\r\n            ...img,\r\n            url: getFullImageUrl(img.url)\r\n        })),\r\n        attributes: product.attributes || [],\r\n        tags: product.tags || [],\r\n        // Format dates if needed\r\n        createdAt: product.createdAt,\r\n        lastModifiedAt: product.lastModifiedAt,\r\n        variants: Array.isArray(product.variants)\r\n            ? product.variants.map((v: any) => mapVariantFromApi(v, getFullImageUrl))\r\n            : []\r\n    };\r\n}\r\n\r\n/**\r\n * Maps a product variant from API response format to the ProductVariant interface\r\n * @param variant The raw variant data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted ProductVariant object\r\n */\r\nexport function mapVariantFromApi(variant: any, getFullImageUrl: (url: string) => string): ProductVariant {\r\n    return {\r\n        id: variant.id,\r\n        sku: variant.sku,\r\n        price: variant.price,\r\n        currency: variant.currency || 'USD',\r\n        compareAtPrice: variant.compareAtPrice,\r\n        costPrice: variant.costPrice,\r\n        barcode: variant.barcode,\r\n        stock: variant.stock,\r\n        trackInventory: variant.trackInventory ?? true,\r\n        allowBackorders: variant.allowBackorders ?? false,\r\n        lowStockThreshold: variant.lowStockThreshold,\r\n        sortOrder: variant.sortOrder || 0,\r\n        isLowStock: variant.isLowStock ?? false,\r\n        isOutOfStock: variant.isOutOfStock ?? false,\r\n        attributes: Array.isArray(variant.attributes) ? variant.attributes : [],\r\n        images: Array.isArray(variant.images)\r\n            ? variant.images.map((img: ProductImage) => ({\r\n                ...img,\r\n                url: getFullImageUrl(img.url)\r\n            }))\r\n            : [],\r\n        productId: variant.productId\r\n    };\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "imageIdsToRemove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "imageUpdates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "newImages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 58
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Partial"
            ]
        },
        {
            "name": "ProductVariant",
            "id": "interface-ProductVariant-ede863e17cfef0da35144ad1c8b7b45ac71aa6d4a3eec2aadc2b9a55128f1f91c97b44d861c3ca428f2c8a0e98d70e67ee84c665783b666e43d517a46ee59d79",
            "file": "src/app/shared/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Category } from \"./category.model\";\r\n\r\n// Enhanced filter options for product queries\r\nexport interface ProductFilters {\r\n    search?: string;\r\n    categoryId?: string;\r\n    subCategoryId?: string;\r\n    minPrice?: number | null;\r\n    maxPrice?: number | null;\r\n    status?: ProductStatus;\r\n    visibility?: ProductVisibility;\r\n    inStock?: boolean | null;\r\n    tags?: string[];\r\n    page?: number;\r\n    pageSize?: number;\r\n    sortColumn?: keyof Product;\r\n    sortDirection?: 'asc' | 'desc';\r\n}\r\n\r\n// Command pattern interface for creating products\r\nexport interface ProductCreateCommand {\r\n    name: string;\r\n    slug?: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    categoryId: string;\r\n    subCategoryId?: string;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    barcode?: string;\r\n    images: ProductImage[];\r\n    status: ProductStatus;\r\n    visibility: ProductVisibility;\r\n    attributes?: Array<{ name: string; value: string; type: string }>;\r\n    tags?: string[];\r\n    seo?: {\r\n        title?: string;\r\n        description?: string;\r\n        keywords?: string[];\r\n    };\r\n    dimensions?: {\r\n        weight: number;\r\n        width: number;\r\n        height: number;\r\n        length: number;\r\n        unit: 'cm' | 'inch';\r\n    };\r\n}\r\n\r\n// Command pattern interface for updating products\r\nexport interface ProductUpdateCommand extends Partial<ProductCreateCommand> {\r\n    id: string;\r\n    newImages?: File[];\r\n    imageIdsToRemove?: string[];\r\n    imageUpdates?: Array<{ id: string; isPrimary?: boolean; sortOrder?: number; alt?: string }>;\r\n}\r\n\r\nexport interface Product {\r\n    id: string;\r\n    name: string;\r\n    slug: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    barcode?: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    category: Category;\r\n    subCategory?: Category;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n    status: ProductStatus; // Enum that maps to backend string values\r\n    visibility: ProductVisibility; // Enum that maps to backend string values\r\n    images: ProductImage[];\r\n    variants: ProductVariant[];\r\n    attributes: ProductAttribute[];\r\n    seo?: ProductSeo;\r\n    dimensions?: ProductDimensions;\r\n    tags: string[];\r\n    createdAt: string; // ISO date string\r\n    createdBy?: string;\r\n    lastModifiedAt?: string; // ISO date string\r\n    lastModifiedBy?: string;\r\n    isArchived: boolean;\r\n}\r\n\r\nexport enum ProductStatus {\r\n    Draft = 'draft',\r\n    Active = 'active',\r\n    OutOfStock = 'out_of_stock',\r\n    Discontinued = 'discontinued'\r\n}\r\n\r\nexport enum ProductVisibility {\r\n    Visible = 'visible',\r\n    Hidden = 'hidden',\r\n    Featured = 'featured'\r\n}\r\n\r\nexport interface ProductImage {\r\n    id: string;\r\n    url: string;\r\n    fileName: string;\r\n    size: number;\r\n    isPrimary: boolean;\r\n    sortOrder: number;\r\n    alt?: string;\r\n}\r\n\r\nexport interface ProductVariant {\r\n    id: string;\r\n    sku: string;\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    costPrice?: number;\r\n    barcode?: string;\r\n    stock: number;\r\n    trackInventory: boolean;\r\n    allowBackorders: boolean;\r\n    lowStockThreshold?: number;\r\n    sortOrder: number;\r\n    isLowStock: boolean;\r\n    isOutOfStock: boolean;\r\n    attributes: ProductAttribute[];\r\n    images: ProductImage[];\r\n    productId: string;\r\n}\r\n\r\nexport interface ProductAttribute {\r\n    name: string;\r\n    value: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ProductSeo {\r\n    title?: string;\r\n    description?: string;\r\n    keywords: string[];\r\n}\r\n\r\nexport interface ProductDimensions {\r\n    weight: number;\r\n    width: number;\r\n    height: number;\r\n    length: number;\r\n    unit: 'cm' | 'inch';\r\n}\r\n\r\n// Utility functions for mapping API responses to model objects\r\n\r\n/**\r\n * Maps a product from API response format to the Product interface\r\n * @param product The raw product data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted Product object\r\n */\r\nexport function mapProductFromApi(product: any, getFullImageUrl: (url: string) => string): Product {\r\n    return {\r\n        ...product,\r\n        // Map string values to enum values\r\n        status: product.status as ProductStatus,\r\n        visibility: product.visibility as ProductVisibility,\r\n        // Ensure collections are never null and properly format image URLs\r\n        images: (product.images || []).map((img: ProductImage) => ({\r\n            ...img,\r\n            url: getFullImageUrl(img.url)\r\n        })),\r\n        attributes: product.attributes || [],\r\n        tags: product.tags || [],\r\n        // Format dates if needed\r\n        createdAt: product.createdAt,\r\n        lastModifiedAt: product.lastModifiedAt,\r\n        variants: Array.isArray(product.variants)\r\n            ? product.variants.map((v: any) => mapVariantFromApi(v, getFullImageUrl))\r\n            : []\r\n    };\r\n}\r\n\r\n/**\r\n * Maps a product variant from API response format to the ProductVariant interface\r\n * @param variant The raw variant data from API\r\n * @param getFullImageUrl Function to transform image URLs\r\n * @returns A properly formatted ProductVariant object\r\n */\r\nexport function mapVariantFromApi(variant: any, getFullImageUrl: (url: string) => string): ProductVariant {\r\n    return {\r\n        id: variant.id,\r\n        sku: variant.sku,\r\n        price: variant.price,\r\n        currency: variant.currency || 'USD',\r\n        compareAtPrice: variant.compareAtPrice,\r\n        costPrice: variant.costPrice,\r\n        barcode: variant.barcode,\r\n        stock: variant.stock,\r\n        trackInventory: variant.trackInventory ?? true,\r\n        allowBackorders: variant.allowBackorders ?? false,\r\n        lowStockThreshold: variant.lowStockThreshold,\r\n        sortOrder: variant.sortOrder || 0,\r\n        isLowStock: variant.isLowStock ?? false,\r\n        isOutOfStock: variant.isOutOfStock ?? false,\r\n        attributes: Array.isArray(variant.attributes) ? variant.attributes : [],\r\n        images: Array.isArray(variant.images)\r\n            ? variant.images.map((img: ProductImage) => ({\r\n                ...img,\r\n                url: getFullImageUrl(img.url)\r\n            }))\r\n            : [],\r\n        productId: variant.productId\r\n    };\r\n}",
            "properties": [
                {
                    "name": "allowBackorders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductAttribute[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "barcode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "compareAtPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "costPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductImage[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "isLowStock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "isOutOfStock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "lowStockThreshold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "sku",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "sortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "stock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "trackInventory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 125
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "QuickAction",
            "id": "interface-QuickAction-b214d03a52f2836f9f0757df043720a8e672bd9ccca5c9018bbc73e63036b8423cb6a633156096f46fe64fa77edeaceb3f85bd5a979a54e25a58b778668e4c31",
            "file": "src/app/features/home/home.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { Store } from '@ngrx/store';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { ProductService } from '../../core/services/product.service';\r\n\r\ninterface QuickAction {\r\n  title: string;\r\n  icon: string;\r\n  description: string;\r\n  route: string;\r\n  color: string;\r\n}\r\n\r\ninterface DashboardMetric {\r\n  title: string;\r\n  value: number | string;\r\n  icon: string;\r\n  change?: {\r\n    value: number;\r\n    isPositive: boolean;\r\n    label: string;\r\n  };\r\n  color: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    MatTooltipModule\r\n  ],\r\n  template: `\r\n    <div class=\"container mx-auto p-4 md:p-6\">\r\n      <!-- Dashboard Header -->\r\n      <div class=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-6\">\r\n        <div>\r\n          <h1 class=\"text-2xl font-bold text-slate-900 dark:text-white\">Dashboard</h1>\r\n          <p class=\"text-sm text-slate-500 dark:text-slate-400\">Welcome back to your admin dashboard</p>\r\n        </div>\r\n        \r\n        <div class=\"mt-4 md:mt-0 flex items-center space-x-2\">\r\n          <button \r\n            class=\"px-3 py-2 bg-white dark:bg-slate-800 text-slate-600 dark:text-slate-300 border border-slate-200 dark:border-slate-700 rounded-md shadow-sm flex items-center hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\" />\r\n            </svg>\r\n            Export\r\n          </button>\r\n          \r\n          <button \r\n            class=\"px-3 py-2 bg-primary-600 text-white rounded-md shadow-sm flex items-center hover:bg-primary-700 transition-colors\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n            </svg>\r\n            New Report\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Metrics Overview -->\r\n      <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\r\n        <div *ngFor=\"let metric of metrics\" \r\n          class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm p-5 border border-slate-200 dark:border-slate-700\">\r\n          <div class=\"flex justify-between items-start\">\r\n            <div>\r\n              <p class=\"text-sm font-medium text-slate-500 dark:text-slate-400\">{{ metric.title }}</p>\r\n              <p class=\"text-2xl font-bold text-slate-900 dark:text-white mt-1\">{{ metric.value }}</p>\r\n              \r\n              <div *ngIf=\"metric.change\" class=\"flex items-center mt-2\">\r\n                <span \r\n                  [class.text-emerald-600]=\"metric.change.isPositive\"\r\n                  [class.text-rose-600]=\"!metric.change.isPositive\"\r\n                  [class.dark:text-emerald-400]=\"metric.change.isPositive\"\r\n                  [class.dark:text-rose-400]=\"!metric.change.isPositive\"\r\n                  class=\"text-xs font-medium flex items-center\">\r\n                  \r\n                  <svg *ngIf=\"metric.change.isPositive\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-3 w-3 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                    <path fill-rule=\"evenodd\" d=\"M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z\" clip-rule=\"evenodd\" />\r\n                  </svg>\r\n                  \r\n                  <svg *ngIf=\"!metric.change.isPositive\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-3 w-3 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                    <path fill-rule=\"evenodd\" d=\"M12 13a1 1 0 100 2h5a1 1 0 001-1v-5a1 1 0 10-2 0v2.586l-4.293-4.293a1 1 0 00-1.414 0L8 9.586 3.707 5.293a1 1 0 00-1.414 1.414l5 5a1 1 0 001.414 0L11 9.414 14.586 13H12z\" clip-rule=\"evenodd\" />\r\n                  </svg>\r\n                  \r\n                  {{ metric.change.value }}% {{ metric.change.label }}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            \r\n            <div [class]=\"'p-3 rounded-full ' + metric.color\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" [innerHTML]=\"getSvgPath(metric.icon)\"></svg>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Quick Actions -->\r\n      <h2 class=\"text-lg font-semibold text-slate-900 dark:text-white mb-4\">Quick Actions</h2>\r\n      <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mb-8\">\r\n        <div *ngFor=\"let action of quickActions\" \r\n            [routerLink]=\"action.route\"\r\n            class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 overflow-hidden hover:shadow-md transition-shadow cursor-pointer group\">\r\n          <div class=\"p-5\">\r\n            <div class=\"flex items-center mb-4\">\r\n              <div [class]=\"'p-3 rounded-full ' + action.color\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" [innerHTML]=\"getSvgPath(action.icon)\"></svg>\r\n              </div>\r\n              <h3 class=\"ml-3 text-base font-medium text-slate-900 dark:text-white\">{{ action.title }}</h3>\r\n            </div>\r\n            <p class=\"text-sm text-slate-500 dark:text-slate-400\">{{ action.description }}</p>\r\n          </div>\r\n          <div class=\"px-5 py-3 bg-slate-50 dark:bg-slate-700 border-t border-slate-200 dark:border-slate-700\">\r\n            <span class=\"text-sm font-medium text-primary-600 dark:text-primary-400 flex items-center group-hover:translate-x-0.5 transition-transform\">\r\n              Get Started\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 ml-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                <path fill-rule=\"evenodd\" d=\"M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\r\n              </svg>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Recent Activity -->\r\n      <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <!-- Recent Orders -->\r\n        <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 overflow-hidden\">\r\n          <div class=\"px-5 py-4 border-b border-slate-200 dark:border-slate-700 flex justify-between items-center\">\r\n            <h3 class=\"font-medium text-slate-900 dark:text-white\">Recent Orders</h3>\r\n            <a routerLink=\"/orders\" class=\"text-sm font-medium text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300\">\r\n              View All\r\n            </a>\r\n          </div>\r\n          \r\n          <div class=\"p-5\">\r\n            <div *ngIf=\"recentOrders.length === 0\" class=\"text-center py-6\">\r\n              <p class=\"text-slate-500 dark:text-slate-400\">No recent orders found</p>\r\n            </div>\r\n            \r\n            <div *ngFor=\"let order of recentOrders\" class=\"border-b border-slate-200 dark:border-slate-700 last:border-b-0 py-3\">\r\n              <div class=\"flex justify-between items-center\">\r\n                <div>\r\n                  <p class=\"text-sm font-medium text-slate-900 dark:text-white\">#{{ order.id }}</p>\r\n                  <p class=\"text-xs text-slate-500 dark:text-slate-400\">{{ order.date }}</p>\r\n                </div>\r\n                <div>\r\n                  <span [class]=\"getOrderStatusClass(order.status)\">\r\n                    {{ order.status }}\r\n                  </span>\r\n                </div>\r\n                <div class=\"text-right\">\r\n                  <p class=\"text-sm font-medium text-slate-900 dark:text-white\">{{ order.amount }}</p>\r\n                  <p class=\"text-xs text-slate-500 dark:text-slate-400\">{{ order.items }} items</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Low Stock Items -->\r\n        <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 overflow-hidden\">\r\n          <div class=\"px-5 py-4 border-b border-slate-200 dark:border-slate-700 flex justify-between items-center\">\r\n            <h3 class=\"font-medium text-slate-900 dark:text-white\">Low Stock Items</h3>\r\n            <a routerLink=\"/products/list\" class=\"text-sm font-medium text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300\">\r\n              View All\r\n            </a>\r\n          </div>\r\n          \r\n          <div class=\"p-5\">\r\n            <div *ngIf=\"lowStockItems.length === 0\" class=\"text-center py-6\">\r\n              <p class=\"text-slate-500 dark:text-slate-400\">No low stock items found</p>\r\n            </div>\r\n            \r\n            <div *ngFor=\"let item of lowStockItems\" class=\"border-b border-slate-200 dark:border-slate-700 last:border-b-0 py-3\">\r\n              <div class=\"flex items-center\">\r\n                <div class=\"h-10 w-10 bg-slate-100 dark:bg-slate-700 rounded-md flex items-center justify-center\">\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-slate-500 dark:text-slate-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n                  </svg>\r\n                </div>\r\n                <div class=\"ml-3 flex-grow\">\r\n                  <p class=\"text-sm font-medium text-slate-900 dark:text-white\">{{ item.name }}</p>\r\n                  <p class=\"text-xs text-slate-500 dark:text-slate-400\">{{ item.sku }}</p>\r\n                </div>\r\n                <div class=\"text-right\">\r\n                  <p class=\"text-sm font-medium text-amber-600 dark:text-amber-400\">{{ item.stock }} left</p>\r\n                  <p class=\"text-xs text-slate-500 dark:text-slate-400\">Threshold: {{ item.threshold }}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class HomeComponent implements OnInit, OnDestroy {\r\n  metrics: DashboardMetric[] = [\r\n    {\r\n      title: 'Total Products',\r\n      value: 0,\r\n      icon: 'M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4',\r\n      color: 'bg-primary-600'\r\n    },\r\n    {\r\n      title: 'Active Products',\r\n      value: 0,\r\n      icon: 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z',\r\n      color: 'bg-emerald-600'\r\n    },\r\n    {\r\n      title: 'Revenue',\r\n      value: '$0',\r\n      icon: 'M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z',\r\n      color: 'bg-amber-600',\r\n      change: {\r\n        value: 0,\r\n        isPositive: true,\r\n        label: 'vs last month'\r\n      }\r\n    },\r\n    {\r\n      title: 'Orders',\r\n      value: 0,\r\n      icon: 'M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z',\r\n      color: 'bg-purple-600',\r\n      change: {\r\n        value: 0,\r\n        isPositive: false,\r\n        label: 'vs last month'\r\n      }\r\n    }\r\n  ];\r\n\r\n  quickActions: QuickAction[] = [\r\n    {\r\n      title: 'Add Product',\r\n      icon: 'M12 6v6m0 0v6m0-6h6m-6 0H6',\r\n      description: 'Create a new product listing with details and imagery',\r\n      route: '/products/add',\r\n      color: 'bg-primary-600'\r\n    },\r\n    {\r\n      title: 'Manage Orders',\r\n      icon: 'M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z',\r\n      description: 'View and manage customer orders and shipments',\r\n      route: '/orders',\r\n      color: 'bg-amber-600'\r\n    },\r\n    {\r\n      title: 'View Statistics',\r\n      icon: 'M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z',\r\n      description: 'Check your store performance and key metrics',\r\n      route: '/statistics',\r\n      color: 'bg-emerald-600'\r\n    },\r\n    {\r\n      title: 'Manage Categories',\r\n      icon: 'M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z',\r\n      description: 'Organize products with categories and tags',\r\n      route: '/categories',\r\n      color: 'bg-purple-600'\r\n    }\r\n  ];\r\n\r\n  recentOrders: any[] = [];\r\n  lowStockItems: any[] = [];\r\n\r\n  private readonly destroy$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private readonly store: Store,\r\n    private readonly productService: ProductService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    // Load dashboard data\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  loadDashboardData(): void {\r\n    this.productService.getStats().pipe(\r\n      takeUntil(this.destroy$)\r\n    ).subscribe(stats => {\r\n      // Update metrics with real data\r\n      this.updateMetrics(stats);\r\n\r\n      // Create sample recent orders for demo\r\n      this.recentOrders = this.createSampleOrders();\r\n\r\n      // Create sample low stock items for demo\r\n      this.lowStockItems = this.createSampleLowStockItems();\r\n    });\r\n  }\r\n\r\n  private updateMetrics(stats: any): void {\r\n    this.metrics[0].value = stats.totalProducts || 0;\r\n    this.metrics[1].value = stats.activeProductCount || 0;\r\n    this.metrics[2].value = `$${(stats.totalRevenue || 0).toLocaleString()}`;\r\n    this.metrics[2].change = {\r\n      value: stats.revenueChange || 8.2,\r\n      isPositive: (stats.revenueChange || 8.2) >= 0,\r\n      label: 'vs last month'\r\n    };\r\n    this.metrics[3].value = stats.totalOrders || 0;\r\n    this.metrics[3].change = {\r\n      value: stats.ordersChange || -2.5,\r\n      isPositive: (stats.ordersChange || -2.5) >= 0,\r\n      label: 'vs last month'\r\n    };\r\n  }\r\n\r\n  private createSampleOrders(): any[] {\r\n    return [\r\n      { id: '10042', date: '2 hours ago', status: 'Completed', amount: '$245.99', items: 3 },\r\n      { id: '10041', date: '5 hours ago', status: 'Processing', amount: '$129.50', items: 2 },\r\n      { id: '10040', date: 'Yesterday', status: 'Shipped', amount: '$89.99', items: 1 },\r\n      { id: '10039', date: 'Yesterday', status: 'Completed', amount: '$432.25', items: 5 }\r\n    ];\r\n  }\r\n\r\n  private createSampleLowStockItems(): any[] {\r\n    return [\r\n      { name: 'Wireless Headphones', sku: 'WH-12345', stock: 3, threshold: 5 },\r\n      { name: 'Smartphone Case', sku: 'SC-54321', stock: 2, threshold: 10 },\r\n      { name: 'Smart Watch', sku: 'SW-98765', stock: 4, threshold: 8 },\r\n      { name: 'Bluetooth Speaker', sku: 'BS-45678', stock: 1, threshold: 5 }\r\n    ];\r\n  }\r\n\r\n  getOrderStatusClass(status: string): string {\r\n    switch (status.toLowerCase()) {\r\n      case 'completed':\r\n        return 'px-2 py-1 text-xs rounded-full bg-emerald-100 dark:bg-emerald-900/30 text-emerald-700 dark:text-emerald-400';\r\n      case 'processing':\r\n        return 'px-2 py-1 text-xs rounded-full bg-amber-100 dark:bg-amber-900/30 text-amber-700 dark:text-amber-400';\r\n      case 'shipped':\r\n        return 'px-2 py-1 text-xs rounded-full bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400';\r\n      case 'cancelled':\r\n        return 'px-2 py-1 text-xs rounded-full bg-rose-100 dark:bg-rose-900/30 text-rose-700 dark:text-rose-400';\r\n      default:\r\n        return 'px-2 py-1 text-xs rounded-full bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-400';\r\n    }\r\n  }\r\n\r\n  getSvgPath(path: string): string {\r\n    return `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"${path}\" />`;\r\n  }\r\n}",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ReorderCategoryRequest",
            "id": "interface-ReorderCategoryRequest-d4ecbbcce5e1b2c58624242b08061d9461ab1e2000ddbe370518d386762e718ee81fc424c77f8474a05cbcf9a5bedd28bdc906e2fcaa62457cdfe3ad3378bf43",
            "file": "src/app/shared/models/Request.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CreateCategoryRequest {\r\n    name: string;\r\n    description: string;\r\n    imageUrl?: string;\r\n    metaTitle?: string;\r\n    metaDescription?: string;\r\n    parentCategoryId?: string;\r\n}\r\nexport interface UpdateCategoryRequest extends CreateCategoryRequest {\r\n    sortOrder?: number;\r\n}\r\n\r\nexport interface ReorderCategoryRequest {\r\n    categoryId: string;\r\n    newSortOrder: number;\r\n}",
            "properties": [
                {
                    "name": "categoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "newSortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ShippingInfo",
            "id": "interface-ShippingInfo-1198aa1916a0751b277aa2c35b2e0c78ba4bac936c74e8811e4c962271e825a55fed79342872bab606bcb5924a7c4c3c23f2104b2cb32220ef20a9689ed436d7",
            "file": "src/app/shared/models/order.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AuditableEntity } from \"./auditableEntity.model\";\r\nimport { Money, Address } from \"./value-object.model\";\r\n\r\n\r\n// Admin.WebApp/src/app/shared/models/order.model.ts\r\nexport interface Order {\r\n    id: string;\r\n    orderNumber: string;\r\n    customerId: string;\r\n    status: OrderStatus; // Enum mapping to backend string\r\n    subtotal: number;\r\n    shippingCost: number;\r\n    tax: number;\r\n    total: number;\r\n    currency: string;\r\n    shippingAddress: Address;\r\n    billingAddress: Address;\r\n    notes?: string;\r\n    cancelledAt?: string; // ISO date string\r\n    cancellationReason?: string;\r\n    items: OrderItem[];\r\n    payment?: Payment;\r\n    paymentStatus: PaymentStatus; // Enum mapping to backend string\r\n    paymentMethod: string;\r\n    shippingInfo?: ShippingInfo;\r\n    createdAt: string; // ISO date string\r\n    createdBy?: string;\r\n    lastModifiedAt?: string; // ISO date string\r\n    lastModifiedBy?: string;\r\n}\r\nexport interface OrderItem {\r\n    id: string;\r\n    productId: string;\r\n    productName: string;\r\n    sku: string;\r\n    variantId?: string;\r\n    quantity: number;\r\n    unitPrice: number;\r\n    currency: string;\r\n    total: number;\r\n}\r\nexport enum OrderStatus {\r\n    Pending = 'pending',\r\n    Confirmed = 'confirmed',\r\n    Processing = 'processing',\r\n    Shipped = 'shipped',\r\n    Delivered = 'delivered',\r\n    Cancelled = 'cancelled'\r\n}\r\n\r\nexport enum PaymentStatus {\r\n    Pending = 'pending',\r\n    Authorized = 'authorized',\r\n    Paid = 'paid',\r\n    Failed = 'failed',\r\n    Refunded = 'refunded'\r\n}\r\n\r\nexport interface Payment {\r\n    transactionId: string;\r\n    method: string;\r\n    amount: number;\r\n    currency: string;\r\n    status: PaymentStatus;\r\n    processedAt: string; // ISO date string\r\n}\r\nexport interface ShippingInfo {\r\n    carrier: string;\r\n    trackingNumber: string;\r\n    estimatedDeliveryDate: string; // ISO date string\r\n    actualDeliveryDate?: string; // ISO date string\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "actualDeliveryDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "carrier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "estimatedDeliveryDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "trackingNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SizeColorVariant",
            "id": "interface-SizeColorVariant-051f98bf72e2dd7364d8ac66e9d2d60d9d04bdb8322648cb8075c27521bcb83b95569279bd5f8948ff8848b49ec03d114809e172b9f2e6dfece1410b7c67de8a",
            "file": "src/app/shared/models/product-type.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormlyFieldConfig } from '@ngx-formly/core';\r\n\r\nexport interface ProductType {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    icon: string;\r\n    attributes: ProductTypeAttribute[];\r\n    formConfig: FormlyFieldConfig[];\r\n}\r\n\r\nexport interface ProductTypeAttribute {\r\n    id: string;\r\n    name: string;\r\n    description?: string;\r\n    type: 'text' | 'number' | 'boolean' | 'select' | 'multiselect' | 'color' | 'size' | 'dimension';\r\n    isRequired: boolean;\r\n    defaultValue?: any;\r\n    options?: { label: string, value: any }[];\r\n    validation?: {\r\n        min?: number;\r\n        max?: number;\r\n        pattern?: string;\r\n        message?: string;\r\n    };\r\n    displayOrder: number;\r\n    isFilterable: boolean;\r\n    isComparable: boolean;\r\n}\r\n\r\n// Core product categories with specific attribute sets\r\nexport enum ProductCategory {\r\n    Clothing = 'clothing',\r\n    Electronics = 'electronics',\r\n    Furniture = 'furniture',\r\n    Books = 'books',\r\n    Groceries = 'groceries',\r\n    Beauty = 'beauty',\r\n    Toys = 'toys',\r\n    Other = 'other'\r\n}\r\n\r\n// Specific product types within categories\r\nexport interface ClothingAttributes {\r\n    size?: string[];\r\n    color?: string[];\r\n    material?: string;\r\n    gender?: 'men' | 'women' | 'unisex' | 'boys' | 'girls';\r\n    season?: string[];\r\n    care?: string;\r\n}\r\n\r\nexport interface ElectronicsAttributes {\r\n    brand?: string;\r\n    model?: string;\r\n    specifications?: Record<string, string>;\r\n    warranty?: string;\r\n    powerRequirements?: string;\r\n    connectivity?: string[];\r\n}\r\n\r\nexport interface BookAttributes {\r\n    author?: string;\r\n    publisher?: string;\r\n    isbn?: string;\r\n    language?: string;\r\n    format?: 'hardcover' | 'paperback' | 'ebook' | 'audiobook';\r\n    genre?: string[];\r\n    pages?: number;\r\n}\r\n\r\n// Utility types for product variants\r\nexport interface SizeVariant {\r\n    size: string;\r\n    stock: number;\r\n    price?: number; // Price adjustment if different from base\r\n    sku?: string;\r\n}\r\n\r\nexport interface ColorVariant {\r\n    color: string;\r\n    colorCode: string; // Hex code\r\n    imageUrl?: string;\r\n    stock: number;\r\n    price?: number; // Price adjustment if different from base\r\n    sku?: string;\r\n}\r\n\r\nexport interface SizeColorVariant extends SizeVariant, Omit<ColorVariant, 'stock' | 'price' | 'sku'> {\r\n    // Combined variant with specific stock/price for size+color combination\r\n    stock: number;\r\n    price?: number;\r\n    sku?: string;\r\n\r\n    // Additional properties can be added as needed\r\n    // e.g., discount, promotional price, etc.\r\n    discount?: number;\r\n    promotionalPrice?: number;\r\n    isFeatured?: boolean;\r\n    isAvailable?: boolean;\r\n\r\n}",
            "properties": [
                {
                    "name": "discount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "isAvailable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "isFeatured",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "promotionalPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "sku",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "stock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "SizeVariant",
                "Omit"
            ]
        },
        {
            "name": "SizeVariant",
            "id": "interface-SizeVariant-051f98bf72e2dd7364d8ac66e9d2d60d9d04bdb8322648cb8075c27521bcb83b95569279bd5f8948ff8848b49ec03d114809e172b9f2e6dfece1410b7c67de8a",
            "file": "src/app/shared/models/product-type.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormlyFieldConfig } from '@ngx-formly/core';\r\n\r\nexport interface ProductType {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    icon: string;\r\n    attributes: ProductTypeAttribute[];\r\n    formConfig: FormlyFieldConfig[];\r\n}\r\n\r\nexport interface ProductTypeAttribute {\r\n    id: string;\r\n    name: string;\r\n    description?: string;\r\n    type: 'text' | 'number' | 'boolean' | 'select' | 'multiselect' | 'color' | 'size' | 'dimension';\r\n    isRequired: boolean;\r\n    defaultValue?: any;\r\n    options?: { label: string, value: any }[];\r\n    validation?: {\r\n        min?: number;\r\n        max?: number;\r\n        pattern?: string;\r\n        message?: string;\r\n    };\r\n    displayOrder: number;\r\n    isFilterable: boolean;\r\n    isComparable: boolean;\r\n}\r\n\r\n// Core product categories with specific attribute sets\r\nexport enum ProductCategory {\r\n    Clothing = 'clothing',\r\n    Electronics = 'electronics',\r\n    Furniture = 'furniture',\r\n    Books = 'books',\r\n    Groceries = 'groceries',\r\n    Beauty = 'beauty',\r\n    Toys = 'toys',\r\n    Other = 'other'\r\n}\r\n\r\n// Specific product types within categories\r\nexport interface ClothingAttributes {\r\n    size?: string[];\r\n    color?: string[];\r\n    material?: string;\r\n    gender?: 'men' | 'women' | 'unisex' | 'boys' | 'girls';\r\n    season?: string[];\r\n    care?: string;\r\n}\r\n\r\nexport interface ElectronicsAttributes {\r\n    brand?: string;\r\n    model?: string;\r\n    specifications?: Record<string, string>;\r\n    warranty?: string;\r\n    powerRequirements?: string;\r\n    connectivity?: string[];\r\n}\r\n\r\nexport interface BookAttributes {\r\n    author?: string;\r\n    publisher?: string;\r\n    isbn?: string;\r\n    language?: string;\r\n    format?: 'hardcover' | 'paperback' | 'ebook' | 'audiobook';\r\n    genre?: string[];\r\n    pages?: number;\r\n}\r\n\r\n// Utility types for product variants\r\nexport interface SizeVariant {\r\n    size: string;\r\n    stock: number;\r\n    price?: number; // Price adjustment if different from base\r\n    sku?: string;\r\n}\r\n\r\nexport interface ColorVariant {\r\n    color: string;\r\n    colorCode: string; // Hex code\r\n    imageUrl?: string;\r\n    stock: number;\r\n    price?: number; // Price adjustment if different from base\r\n    sku?: string;\r\n}\r\n\r\nexport interface SizeColorVariant extends SizeVariant, Omit<ColorVariant, 'stock' | 'price' | 'sku'> {\r\n    // Combined variant with specific stock/price for size+color combination\r\n    stock: number;\r\n    price?: number;\r\n    sku?: string;\r\n\r\n    // Additional properties can be added as needed\r\n    // e.g., discount, promotional price, etc.\r\n    discount?: number;\r\n    promotionalPrice?: number;\r\n    isFeatured?: boolean;\r\n    isAvailable?: boolean;\r\n\r\n}",
            "properties": [
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "sku",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "stock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Statistics",
            "id": "interface-Statistics-3d85309f1273a5a756574cbdf5b69aedb688a0ce51bd048c437553627ca32ab08fe7f41c789da878ed624cc087ff9df0680f612008599a1e872b4cbe3909dd82",
            "file": "src/app/features/statistics/statistics.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Observable } from 'rxjs';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { StatisticsService } from '../../core/services/statistics.service';\r\n\r\n// Define Statistics interface\r\nexport interface Statistics {\r\n    totalProducts: number;\r\n    activeProductCount: number;\r\n    lowStockCount: number;\r\n    totalCategories: number;\r\n    // Add other properties used in the component as needed\r\n}\r\n\r\n@Component({\r\n    selector: 'app-statistics',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatSelectModule,\r\n        MatMenuModule,\r\n        MatTooltipModule,\r\n        RouterModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    template: `\r\n        <div class=\"container mx-auto p-4 md:p-6\">\r\n            <!-- Dashboard Header -->\r\n            <div class=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-6\">\r\n                <div>\r\n                    <h1 class=\"text-2xl font-bold text-slate-900 dark:text-white\">Statistics</h1>\r\n                    <p class=\"text-sm text-slate-500 dark:text-slate-400\">Track your store performance and insights</p>\r\n                </div>\r\n                \r\n                <div class=\"flex flex-col sm:flex-row gap-3 mt-4 md:mt-0\">\r\n                    <div class=\"inline-flex rounded-md shadow-sm\" role=\"group\">\r\n                        <button \r\n                            (click)=\"setTimeRange('day')\"\r\n                            [class.bg-primary-50]=\"timeRange === 'day'\"\r\n                            [class.text-primary-700]=\"timeRange === 'day'\"\r\n                            [class.dark:bg-slate-700]=\"timeRange === 'day'\"\r\n                            [class.dark:text-primary-400]=\"timeRange === 'day'\"\r\n                            class=\"px-4 py-2 text-sm font-medium text-slate-700 bg-white border border-slate-300 rounded-l-md hover:bg-slate-50 dark:bg-slate-800 dark:border-slate-600 dark:text-slate-300 dark:hover:bg-slate-700\">\r\n                            Today\r\n                        </button>\r\n                        <button \r\n                            (click)=\"setTimeRange('week')\"\r\n                            [class.bg-primary-50]=\"timeRange === 'week'\"\r\n                            [class.text-primary-700]=\"timeRange === 'week'\"\r\n                            [class.dark:bg-slate-700]=\"timeRange === 'week'\"\r\n                            [class.dark:text-primary-400]=\"timeRange === 'week'\"\r\n                            class=\"px-4 py-2 text-sm font-medium text-slate-700 bg-white border-t border-b border-slate-300 hover:bg-slate-50 dark:bg-slate-800 dark:border-slate-600 dark:text-slate-300 dark:hover:bg-slate-700\">\r\n                            Week\r\n                        </button>\r\n                        <button \r\n                            (click)=\"setTimeRange('month')\"\r\n                            [class.bg-primary-50]=\"timeRange === 'month'\"\r\n                            [class.text-primary-700]=\"timeRange === 'month'\"\r\n                            [class.dark:bg-slate-700]=\"timeRange === 'month'\"\r\n                            [class.dark:text-primary-400]=\"timeRange === 'month'\"\r\n                            class=\"px-4 py-2 text-sm font-medium text-slate-700 bg-white border border-slate-300 rounded-r-md hover:bg-slate-50 dark:bg-slate-800 dark:border-slate-600 dark:text-slate-300 dark:hover:bg-slate-700\">\r\n                            Month\r\n                        </button>\r\n                    </div>\r\n                    \r\n                    <button \r\n                        class=\"flex items-center px-4 py-2 text-sm font-medium text-slate-700 bg-white border border-slate-300 rounded-md shadow-sm hover:bg-slate-50 dark:bg-slate-800 dark:border-slate-600 dark:text-slate-300 dark:hover:bg-slate-700\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0l-4 4m4-4v12\" />\r\n                        </svg>\r\n                        Export Data\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            \r\n            <!-- Stats Overview Cards -->\r\n            <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n                <!-- Total Products -->\r\n                <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 p-6\">\r\n                    <div class=\"flex justify-between\">\r\n                        <div>\r\n                            <p class=\"text-sm font-medium text-slate-500 dark:text-slate-400\">Total Products</p>\r\n                            <p class=\"mt-2 text-3xl font-bold text-slate-900 dark:text-white\">\r\n                                {{ (stats$ | async)?.totalProducts || 0 }}\r\n                            </p>\r\n                            <div class=\"mt-2 flex items-center\">\r\n                                <p class=\"text-xs text-slate-500 dark:text-slate-400\">From {{ categoryCount }} categories</p>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"rounded-full bg-primary-100 dark:bg-primary-900/20 p-3 text-primary-700 dark:text-primary-400\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n                            </svg>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"mt-4\">\r\n                        <a routerLink=\"/products/list\" class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 inline-flex items-center\">\r\n                            View All Products\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\r\n                            </svg>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                \r\n                <!-- Active Products -->\r\n                <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 p-6\">\r\n                    <div class=\"flex justify-between\">\r\n                        <div>\r\n                            <p class=\"text-sm font-medium text-slate-500 dark:text-slate-400\">Active Products</p>\r\n                            <p class=\"mt-2 text-3xl font-bold text-slate-900 dark:text-white\">\r\n                                {{ (stats$ | async)?.activeProductCount || 0 }}\r\n                            </p>\r\n                            <div class=\"mt-2 flex items-center\">\r\n                                <p class=\"text-xs text-slate-500 dark:text-slate-400\">\r\n                                    {{ getActivePercentage((stats$ | async)) }}% of total\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"rounded-full bg-emerald-100 dark:bg-emerald-900/20 p-3 text-emerald-700 dark:text-emerald-400\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                            </svg>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"mt-4\">\r\n                        <a routerLink=\"/products/list\" class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 inline-flex items-center\">\r\n                            View Active Products\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\r\n                            </svg>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                \r\n                <!-- Low Stock Items -->\r\n                <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 p-6\">\r\n                    <div class=\"flex justify-between\">\r\n                        <div>\r\n                            <p class=\"text-sm font-medium text-slate-500 dark:text-slate-400\">Low Stock Items</p>\r\n                            <p class=\"mt-2 text-3xl font-bold text-slate-900 dark:text-white\">\r\n                                {{ (stats$ | async)?.lowStockCount || 0 }}\r\n                            </p>\r\n                            <div class=\"mt-2 flex items-center\">\r\n                                <p *ngIf=\"(stats$ | async)?.lowStockCount\" class=\"text-xs text-amber-600 dark:text-amber-400 flex items-center\">\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\r\n                                    </svg>\r\n                                    Needs attention\r\n                                </p>\r\n                                <p *ngIf=\"!(stats$ | async)?.lowStockCount\" class=\"text-xs text-emerald-600 dark:text-emerald-400 flex items-center\">\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\r\n                                    </svg>\r\n                                    Stock levels good\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"rounded-full bg-amber-100 dark:bg-amber-900/20 p-3 text-amber-700 dark:text-amber-400\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z\" />\r\n                            </svg>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"mt-4\">\r\n                        <a routerLink=\"/products/list\" class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 inline-flex items-center\">\r\n                            View Low Stock\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\r\n                            </svg>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                \r\n                <!-- Categories -->\r\n                <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 p-6\">\r\n                    <div class=\"flex justify-between\">\r\n                        <div>\r\n                            <p class=\"text-sm font-medium text-slate-500 dark:text-slate-400\">Categories</p>\r\n                            <p class=\"mt-2 text-3xl font-bold text-slate-900 dark:text-white\">\r\n                                {{ (stats$ | async)?.totalCategories || 0 }}\r\n                            </p>\r\n                            <div class=\"mt-2 flex items-center\">\r\n                                <p class=\"text-xs text-slate-500 dark:text-slate-400\">\r\n                                    {{ getProductsPerCategory((stats$ | async)) }} prods/category\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"rounded-full bg-purple-100 dark:bg-purple-900/20 p-3 text-purple-700 dark:text-purple-400\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\" />\r\n                            </svg>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"mt-4\">\r\n                        <a routerLink=\"/categories\" class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 inline-flex items-center\">\r\n                            Manage Categories\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\r\n                            </svg>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <!-- Charts Section -->\r\n            <div class=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\r\n                <!-- Main Chart -->\r\n                <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 lg:col-span-2\">\r\n                    <div class=\"flex justify-between items-center p-6 border-b border-slate-200 dark:border-slate-700\">\r\n                        <h2 class=\"text-lg font-medium text-slate-900 dark:text-white\">Sales Overview</h2>\r\n                        \r\n                        <div class=\"flex space-x-2\">\r\n                            <button\r\n                                [class.bg-primary-600]=\"chartView === 'revenue'\"\r\n                                [class.text-white]=\"chartView === 'revenue'\"\r\n                                [class.bg-white]=\"chartView !== 'revenue'\"\r\n                                [class.dark:bg-slate-700]=\"chartView !== 'revenue'\"\r\n                                [class.text-slate-700]=\"chartView !== 'revenue'\"\r\n                                [class.dark:text-white]=\"chartView !== 'revenue'\"\r\n                                [class.border-slate-300]=\"chartView !== 'revenue'\"\r\n                                [class.dark:border-slate-600]=\"chartView !== 'revenue'\"\r\n                                class=\"px-3 py-1 text-sm font-medium rounded-md border transition-colors\"\r\n                                (click)=\"setChartView('revenue')\">\r\n                                Revenue\r\n                            </button>\r\n                            <button\r\n                                [class.bg-primary-600]=\"chartView === 'orders'\"\r\n                                [class.text-white]=\"chartView === 'orders'\"\r\n                                [class.bg-white]=\"chartView !== 'orders'\"\r\n                                [class.dark:bg-slate-700]=\"chartView !== 'orders'\"\r\n                                [class.text-slate-700]=\"chartView !== 'orders'\"\r\n                                [class.dark:text-white]=\"chartView !== 'orders'\"\r\n                                [class.border-slate-300]=\"chartView !== 'orders'\"\r\n                                [class.dark:border-slate-600]=\"chartView !== 'orders'\"\r\n                                class=\"px-3 py-1 text-sm font-medium rounded-md border transition-colors\"\r\n                                (click)=\"setChartView('orders')\">\r\n                                Orders\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"p-6\">\r\n                        <!-- Placeholder for chart -->\r\n                        <div class=\"bg-slate-50 dark:bg-slate-700 rounded-lg p-8 h-72 flex items-center justify-center\">\r\n                            <div class=\"text-center\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-16 w-16 mx-auto text-slate-300 dark:text-slate-600 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\r\n                                </svg>\r\n                                <p class=\"text-slate-500 dark:text-slate-400\">\r\n                                    {{ chartView === 'revenue' ? 'Revenue' : 'Orders' }} data visualization will be shown here\r\n                                </p>\r\n                                <button class=\"mt-4 px-4 py-2 bg-primary-600 text-white rounded-md text-sm hover:bg-primary-700 transition-colors\">\r\n                                    Generate Chart\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <!-- Top Products -->\r\n                <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700\">\r\n                    <div class=\"flex justify-between items-center p-6 border-b border-slate-200 dark:border-slate-700\">\r\n                        <h2 class=\"text-lg font-medium text-slate-900 dark:text-white\">Top Products</h2>\r\n                        <select\r\n                            class=\"form-select bg-white dark:bg-slate-700 text-slate-700 dark:text-white border border-slate-300 dark:border-slate-600 rounded-md text-sm transition-all focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500\">\r\n                            <option value=\"sales\">By Sales</option>\r\n                            <option value=\"revenue\">By Revenue</option>\r\n                        </select>\r\n                    </div>\r\n                    \r\n                    <div class=\"px-6 py-4\">\r\n                        <div class=\"divide-y divide-slate-200 dark:divide-slate-700\">\r\n                            <!-- Top product items - this would be populated from API data -->\r\n                            <div class=\"py-3 flex items-center justify-between\">\r\n                                <div class=\"flex items-center\">\r\n                                    <div class=\"h-10 w-10 bg-slate-100 dark:bg-slate-700 rounded-md flex items-center justify-center mr-3\">\r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-slate-400 dark:text-slate-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n                                        </svg>\r\n                                    </div>\r\n                                    <div>\r\n                                        <p class=\"font-medium text-slate-900 dark:text-white\">Wireless Headphones</p>\r\n                                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">Electronics</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"text-right\">\r\n                                    <p class=\"font-medium text-slate-900 dark:text-white\">$1,245.50</p>\r\n                                    <p class=\"text-xs text-emerald-600 dark:text-emerald-400\">+12.5%</p>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div class=\"py-3 flex items-center justify-between\">\r\n                                <div class=\"flex items-center\">\r\n                                    <div class=\"h-10 w-10 bg-slate-100 dark:bg-slate-700 rounded-md flex items-center justify-center mr-3\">\r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-slate-400 dark:text-slate-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n                                        </svg>\r\n                                    </div>\r\n                                    <div>\r\n                                        <p class=\"font-medium text-slate-900 dark:text-white\">Smart Watch</p>\r\n                                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">Wearables</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"text-right\">\r\n                                    <p class=\"font-medium text-slate-900 dark:text-white\">$945.20</p>\r\n                                    <p class=\"text-xs text-emerald-600 dark:text-emerald-400\">+8.3%</p>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div class=\"py-3 flex items-center justify-between\">\r\n                                <div class=\"flex items-center\">\r\n                                    <div class=\"h-10 w-10 bg-slate-100 dark:bg-slate-700 rounded-md flex items-center justify-center mr-3\">\r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-slate-400 dark:text-slate-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n                                        </svg>\r\n                                    </div>\r\n                                    <div>\r\n                                        <p class=\"font-medium text-slate-900 dark:text-white\">Smartphone Case</p>\r\n                                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">Accessories</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"text-right\">\r\n                                    <p class=\"font-medium text-slate-900 dark:text-white\">$625.40</p>\r\n                                    <p class=\"text-xs text-rose-600 dark:text-rose-400\">-2.1%</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"p-6 border-t border-slate-200 dark:border-slate-700\">\r\n                        <a routerLink=\"/products/list\" class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 inline-flex items-center\">\r\n                            View All Products\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\r\n                            </svg>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <!-- Recent Activity -->\r\n            <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 mb-8\">\r\n                <div class=\"flex justify-between items-center p-6 border-b border-slate-200 dark:border-slate-700\">\r\n                    <h2 class=\"text-lg font-medium text-slate-900 dark:text-white\">Recent Activity</h2>\r\n                    <button class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300\">\r\n                        View All\r\n                    </button>\r\n                </div>\r\n                \r\n                <div class=\"p-6\">\r\n                    <div class=\"flow-root\">\r\n                        <ul class=\"-my-5 divide-y divide-slate-200 dark:divide-slate-700\">\r\n                            <li class=\"py-5\">\r\n                                <div class=\"relative flex items-start space-x-4\">\r\n                                    <div class=\"flex-shrink-0\">\r\n                                        <div class=\"bg-emerald-100 dark:bg-emerald-900/20 rounded-full p-2 text-emerald-700 dark:text-emerald-400\">\r\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                                            </svg>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"min-w-0 flex-1\">\r\n                                        <div class=\"text-sm font-medium text-slate-900 dark:text-white\">\r\n                                            New product added: Wireless Headphones\r\n                                        </div>\r\n                                        <p class=\"mt-1 text-sm text-slate-500 dark:text-slate-400\">\r\n                                            Added by John Smith\r\n                                        </p>\r\n                                    </div>\r\n                                    <div class=\"flex-shrink-0 self-center\">\r\n                                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">2 hours ago</p>\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n                            \r\n                            <li class=\"py-5\">\r\n                                <div class=\"relative flex items-start space-x-4\">\r\n                                    <div class=\"flex-shrink-0\">\r\n                                        <div class=\"bg-rose-100 dark:bg-rose-900/20 rounded-full p-2 text-rose-700 dark:text-rose-400\">\r\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V7m-6 4h6m-6 4h6m-6 4h6m-6 4h6m-9-8l3.5 3.5L15 11\" />\r\n                                            </svg>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"min-w-0 flex-1\">\r\n                                        <div class=\"text-sm font-medium text-slate-900 dark:text-white\">\r\n                                            Order #12345 shipped\r\n                                        </div>\r\n                                        <p class=\"mt-1 text-sm text-slate-500 dark:text-slate-400\">\r\n                                            Shipped to Jane Doe\r\n                                        </p>\r\n                                    </div>\r\n                                    <div class=\"flex-shrink-0 self-center\">\r\n                                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">5 hours ago</p>\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n\r\n                            <li class=\"py-5\">\r\n                                <div class=\"relative flex items-start space-x-4\">\r\n                                    <div class=\"flex-shrink-0\">\r\n                                        <div class=\"bg-blue-100 dark:bg-blue-900/20 rounded-full p-2 text-blue-700 dark:text-blue-400\">\r\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6 1a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                                            </svg>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"min-w-0 flex-1\">\r\n                                        <div class=\"text-sm font-medium text-slate-900 dark:text-white\">\r\n                                            Product stock updated: Smart Watch\r\n                                        </div>\r\n                                        <p class=\"mt-1 text-sm text-slate-500 dark:text-slate-400\">\r\n                                            Updated by Sarah Connor\r\n                                        </p>\r\n                                    </div>\r\n                                    <div class=\"flex-shrink-0 self-center\">\r\n                                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">1 day ago</p>\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n\r\n                            <li class=\"py-5\">\r\n                                <div class=\"relative flex items-start space-x-4\">\r\n                                    <div class=\"flex-shrink-0\">\r\n                                        <div class=\"bg-purple-100 dark:bg-purple-900/20 rounded-full p-2 text-purple-700 dark:text-purple-400\">\r\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6 1a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                                            </svg>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"min-w-0 flex-1\">\r\n                                        <div class=\"text-sm font-medium text-slate-900 dark:text-white\">\r\n                                            New category added: Accessories\r\n                                        </div>\r\n                                        <p class=\"mt-1 text-sm text-slate-500 dark:text-slate-400\">\r\n                                            Added by John Smith\r\n                                        </p>\r\n                                    </div>\r\n                                    <div class=\"flex-shrink-0 self-center\">\r\n                                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">2 days ago</p>\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .bg-primary-50 {\r\n            background-color: #f0f9ff;\r\n        }\r\n        .text-primary-700 {\r\n            color: #1d4ed8;\r\n        }\r\n        .dark\\:bg-slate-700 {\r\n            background-color: #374151;\r\n        }\r\n        .dark\\:text-primary-400 {\r\n            color: #60a5fa;\r\n        }\r\n    `]\r\n})\r\nexport class StatisticsComponent implements OnInit {\r\n    stats$: Observable<Statistics> | undefined;\r\n    timeRange: string = 'day';\r\n    chartView: string = 'revenue';\r\n    categoryCount: number = 0;\r\n\r\n\r\n    constructor(private statisticsService: StatisticsService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.stats$ = this.statisticsService.getStatistics();\r\n        this.categoryCount = this.statisticsService.getCategoryCount();\r\n    }\r\n\r\n    setTimeRange(range: string): void {\r\n        this.timeRange = range;\r\n        this.stats$ = this.statisticsService.getStatistics(range);\r\n    }\r\n\r\n    setChartView(view: string): void {\r\n        this.chartView = view;\r\n    }\r\n\r\n    getActivePercentage(stats: any): string {\r\n        return ((stats.activeProductCount / stats.totalProducts) * 100).toFixed(2);\r\n    }\r\n\r\n    getProductsPerCategory(stats: any): string {\r\n        return (stats.totalProducts / stats.totalCategories).toFixed(2);\r\n    }\r\n}",
            "properties": [
                {
                    "name": "activeProductCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "lowStockCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "totalCategories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "totalProducts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "StockAdjustment",
            "id": "interface-StockAdjustment-010ca354de46975eba9c28402d0b02ffaa4edf826241f1969c83c77397998e57ce6a918319d6eae99f03c36de981dcc04b43bcd1789f529020b28167e67df14b",
            "file": "src/app/shared/models/stock.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StockItem {\r\n    id: string;\r\n    productId: string;\r\n    productName: string;\r\n    currentStock: number;\r\n    reservedStock: number;\r\n    availableStock: number;\r\n    lowStockThreshold: number;\r\n    trackInventory: boolean;\r\n    isLowStock: boolean;\r\n    isOutOfStock: boolean;\r\n    reservations: StockReservation[];\r\n}\r\n\r\nexport interface StockReservation {\r\n    id: string;\r\n    orderId: string;\r\n    quantity: number;\r\n    status: 'Pending' | 'Confirmed' | 'Cancelled';\r\n    expiresAt: string; // ISO date string\r\n    confirmedAt?: string; // ISO date string\r\n    cancelledAt?: string; // ISO date string\r\n}\r\n\r\nexport interface StockAdjustment {\r\n    productId: string;\r\n    adjustment: number;\r\n    reason?: string;\r\n}\r\n\r\nexport interface BatchStockAdjustment {\r\n    adjustments: StockAdjustment[];\r\n    reason: string;\r\n}",
            "properties": [
                {
                    "name": "adjustment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "reason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "StockItem",
            "id": "interface-StockItem-010ca354de46975eba9c28402d0b02ffaa4edf826241f1969c83c77397998e57ce6a918319d6eae99f03c36de981dcc04b43bcd1789f529020b28167e67df14b",
            "file": "src/app/shared/models/stock.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StockItem {\r\n    id: string;\r\n    productId: string;\r\n    productName: string;\r\n    currentStock: number;\r\n    reservedStock: number;\r\n    availableStock: number;\r\n    lowStockThreshold: number;\r\n    trackInventory: boolean;\r\n    isLowStock: boolean;\r\n    isOutOfStock: boolean;\r\n    reservations: StockReservation[];\r\n}\r\n\r\nexport interface StockReservation {\r\n    id: string;\r\n    orderId: string;\r\n    quantity: number;\r\n    status: 'Pending' | 'Confirmed' | 'Cancelled';\r\n    expiresAt: string; // ISO date string\r\n    confirmedAt?: string; // ISO date string\r\n    cancelledAt?: string; // ISO date string\r\n}\r\n\r\nexport interface StockAdjustment {\r\n    productId: string;\r\n    adjustment: number;\r\n    reason?: string;\r\n}\r\n\r\nexport interface BatchStockAdjustment {\r\n    adjustments: StockAdjustment[];\r\n    reason: string;\r\n}",
            "properties": [
                {
                    "name": "availableStock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "currentStock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "isLowStock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isOutOfStock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "lowStockThreshold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "productName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "reservations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StockReservation[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "reservedStock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "trackInventory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "StockReservation",
            "id": "interface-StockReservation-010ca354de46975eba9c28402d0b02ffaa4edf826241f1969c83c77397998e57ce6a918319d6eae99f03c36de981dcc04b43bcd1789f529020b28167e67df14b",
            "file": "src/app/shared/models/stock.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StockItem {\r\n    id: string;\r\n    productId: string;\r\n    productName: string;\r\n    currentStock: number;\r\n    reservedStock: number;\r\n    availableStock: number;\r\n    lowStockThreshold: number;\r\n    trackInventory: boolean;\r\n    isLowStock: boolean;\r\n    isOutOfStock: boolean;\r\n    reservations: StockReservation[];\r\n}\r\n\r\nexport interface StockReservation {\r\n    id: string;\r\n    orderId: string;\r\n    quantity: number;\r\n    status: 'Pending' | 'Confirmed' | 'Cancelled';\r\n    expiresAt: string; // ISO date string\r\n    confirmedAt?: string; // ISO date string\r\n    cancelledAt?: string; // ISO date string\r\n}\r\n\r\nexport interface StockAdjustment {\r\n    productId: string;\r\n    adjustment: number;\r\n    reason?: string;\r\n}\r\n\r\nexport interface BatchStockAdjustment {\r\n    adjustments: StockAdjustment[];\r\n    reason: string;\r\n}",
            "properties": [
                {
                    "name": "cancelledAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "confirmedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "expiresAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "orderId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"Pending\" | \"Confirmed\" | \"Cancelled\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "StockState",
            "id": "interface-StockState-19c1a09b8608eb095bcc533bbaf9d09d14b680922c07c345350fba9a9c3e4bbfe792e0d232b43e73480230beeb6091fffdeb97ce27b67059d37c3deb297d5291",
            "file": "src/app/store/stock/stock.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { StockItem } from '../../shared/models/stock.model';\r\n\r\nexport interface StockState {\r\n    items: Record<string, StockItem>;\r\n    loading: boolean;\r\n    error: string | null;\r\n    lowStockAlerts: StockItem[];\r\n    outOfStockAlerts: StockItem[];\r\n}\r\n\r\nexport const initialStockState: StockState = {\r\n    items: {},\r\n    loading: false,\r\n    error: null,\r\n    lowStockAlerts: [],\r\n    outOfStockAlerts: []\r\n};",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | StockItem>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "lowStockAlerts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StockItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "outOfStockAlerts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StockItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SubCategory",
            "id": "interface-SubCategory-a6d88422e4af98150c04a785232992142f7fa1f0b750306b76e96ac9f2144d36daff74b20e48a3f88abe491febef21bb21a6d62d8ea1324b1140143d8dbc4c3b",
            "file": "src/app/shared/models/category.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Category {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    slug: string;\r\n    sortOrder: number;\r\n    metaTitle?: string;\r\n    metaDescription?: string;\r\n    imageUrl?: string;\r\n    parentCategoryId?: string;\r\n    parentCategory?: Category | null;\r\n    subCategories: Category[];\r\n    productCount: number;\r\n    createdAt: string; // ISO date string\r\n    createdBy?: string;\r\n    lastModifiedAt?: string; // ISO date string\r\n    lastModifiedBy?: string;\r\n}\r\n\r\ninterface SubCategory extends Omit<Category, 'parentId'> {\r\n    parentCategoryId: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "parentCategoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Omit"
            ]
        },
        {
            "name": "SubCategory",
            "id": "interface-SubCategory-301c2d72adb7e1f7f138a7d051903165a5469f162b14515cc4c69e93179a248870f66641a76bcea4c61903d0a066f674108e8aee96e6b3e9e02f9abef14dbf96-1",
            "file": "src/app/shared/models/sub-category.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Category } from \"./category.model\";\r\n\r\nexport interface SubCategory extends Omit<Category, 'parentId'> {\r\n    parentCategoryId: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "parentCategoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Omit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SubCategory-1"
        },
        {
            "name": "TokenResponse",
            "id": "interface-TokenResponse-052861d493be537358212d3287080f9e8351a3c9ef476c59623b20372055f9b681db217298021bbecefde0bc8076ea380b40785ddc3a7c2c90f65bf3a998b8f1",
            "file": "src/app/shared/models/auth.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AuthState {\r\n    user: User | null;\r\n    accessToken: string | null;\r\n    isAuthenticated: boolean;\r\n    loading: boolean;\r\n    error: string | null;\r\n    message?: string;\r\n}\r\n\r\nexport interface User {\r\n    id: string;\r\n    username: string;\r\n    email: string;\r\n    firstName?: string;\r\n    lastName?: string;\r\n    roles: string[];\r\n    permissions: string[];\r\n}\r\n\r\nexport interface AuthTokens {\r\n    accessToken: string;\r\n    expiresIn: number;\r\n    tokenType: string;\r\n    scope: string;\r\n    profile: User;\r\n}\r\n\r\nexport interface TokenResponse {\r\n    access_token: string;\r\n    id_token: string;\r\n    expires_in: number;\r\n    token_type: string;\r\n    scope: string;\r\n    profile: User;\r\n}\r\n\r\n// Constants for auth configuration\r\nexport const AUTH_STORAGE_KEYS = {\r\n    ACCESS_TOKEN: 'auth.access_token',\r\n    USER: 'auth.user',\r\n    EXPIRES_AT: 'auth.expires_at'\r\n} as const;\r\n// Common auth error types\r\nexport type AuthError =\r\n    | 'auth/invalid-credentials'\r\n    | 'auth/session-expired'\r\n    | 'auth/network-error'\r\n    | 'auth/unknown-error';\r\n\r\nexport const AUTH_ERROR_MESSAGES: Record<AuthError, string> = {\r\n    'auth/invalid-credentials': 'Invalid username or password',\r\n    'auth/session-expired': 'Your session has expired. Please login again.',\r\n    'auth/network-error': 'Unable to connect to authentication service',\r\n    'auth/unknown-error': 'An unknown error occurred'\r\n};\r\n\r\n\r\n// // Constants for your auth configuration\r\n// export const AUTH_CONFIG: AuthConfig = {\r\n//   authority: 'https://localhost:5001',\r\n//   clientId: 'admin-portal',\r\n//   redirectUri: window.location.origin + '/callback',\r\n//   responseType: 'code',\r\n//   scope: 'openid profile email api.full',\r\n// };",
            "properties": [
                {
                    "name": "access_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "expires_in",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "id_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "scope",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "token_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateCategoryRequest",
            "id": "interface-UpdateCategoryRequest-d4ecbbcce5e1b2c58624242b08061d9461ab1e2000ddbe370518d386762e718ee81fc424c77f8474a05cbcf9a5bedd28bdc906e2fcaa62457cdfe3ad3378bf43",
            "file": "src/app/shared/models/Request.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CreateCategoryRequest {\r\n    name: string;\r\n    description: string;\r\n    imageUrl?: string;\r\n    metaTitle?: string;\r\n    metaDescription?: string;\r\n    parentCategoryId?: string;\r\n}\r\nexport interface UpdateCategoryRequest extends CreateCategoryRequest {\r\n    sortOrder?: number;\r\n}\r\n\r\nexport interface ReorderCategoryRequest {\r\n    categoryId: string;\r\n    newSortOrder: number;\r\n}",
            "properties": [
                {
                    "name": "sortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "CreateCategoryRequest"
            ]
        },
        {
            "name": "UpdateOrderStatusRequest",
            "id": "interface-UpdateOrderStatusRequest-4065c829466e6f05d1a9c250d83cf39dd9d23df3279ac5eca75b250ee0f8e1e08cf4b6eafd5f9cedcc7616ee1503079a61674f421d8d05db60f87220c60e6ce4",
            "file": "src/app/core/services/order.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { map, Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { PagedResponse } from '../../shared/models/paged-response.model';\r\nimport { Order, OrderStatus, PaymentStatus } from '../../shared/models/order.model';\r\n\r\nexport interface OrderListParams {\r\n    searchTerm?: string;\r\n    status?: OrderStatus;\r\n    fromDate?: string;\r\n    toDate?: string;\r\n    minTotal?: number;\r\n    maxTotal?: number;\r\n    sortBy?: string;\r\n    sortDirection?: 'asc' | 'desc';\r\n    page?: number;\r\n    pageSize?: number;\r\n}\r\n\r\nexport interface UpdateOrderStatusRequest {\r\n    newStatus: OrderStatus;\r\n}\r\n\r\nexport interface AddPaymentRequest {\r\n    transactionId: string;\r\n    method: string;\r\n    amount: number;\r\n    currency: string;\r\n    status: PaymentStatus;\r\n}\r\n\r\nexport interface UpdateShippingRequest {\r\n    carrier: string;\r\n    trackingNumber: string;\r\n    shippingCost: number;\r\n    currency: string;\r\n    estimatedDeliveryDate: string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n    private readonly apiUrl = environment.apiUrls.admin.orders;\r\n\r\n    constructor(private readonly http: HttpClient) { }\r\n\r\n    getOrder(id: string): Observable<Order> {\r\n        return this.http.get<any>(`${this.apiUrl}/${id}`).pipe(\r\n            map(this.mapOrderFromApi)\r\n        );\r\n    }\r\n\r\n    getOrders(params: any): Observable<any> {\r\n        return this.http.get<any>(this.apiUrl, { params }).pipe(\r\n            map(response => ({\r\n                ...response,\r\n                items: response.items.map(this.mapOrderFromApi)\r\n            }))\r\n        );\r\n    }\r\n\r\n    private mapOrderFromApi(order: any): Order {\r\n        return {\r\n            id: order.id,\r\n            orderNumber: order.orderNumber,\r\n            customerId: order.customerId,\r\n            status: order.status as OrderStatus,\r\n            subtotal: order.subtotal,\r\n            shippingCost: order.shippingCost,\r\n            tax: order.tax,\r\n            total: order.total,\r\n            currency: order.currency,\r\n            shippingAddress: order.shippingAddress,\r\n            billingAddress: order.billingAddress,\r\n            notes: order.notes,\r\n            cancelledAt: order.cancelledAt,\r\n            cancellationReason: order.cancellationReason,\r\n            items: (order.items || []).map((item: any) => ({\r\n                id: item.id,\r\n                productId: item.productId,\r\n                productName: item.productName,\r\n                sku: item.sku,\r\n                variantId: item.variantId,\r\n                quantity: item.quantity,\r\n                unitPrice: item.unitPrice,\r\n                currency: item.currency,\r\n                total: item.total\r\n            })),\r\n            payment: order.payment ? {\r\n                transactionId: order.payment.transactionId,\r\n                method: order.payment.method,\r\n                amount: order.payment.amount,\r\n                currency: order.payment.currency,\r\n                status: order.payment.status as PaymentStatus,\r\n                processedAt: order.payment.processedAt\r\n            } : undefined,\r\n            paymentStatus: order.paymentStatus as PaymentStatus,\r\n            paymentMethod: order.paymentMethod,\r\n            shippingInfo: order.shippingInfo ? {\r\n                carrier: order.shippingInfo.carrier,\r\n                trackingNumber: order.shippingInfo.trackingNumber,\r\n                estimatedDeliveryDate: order.shippingInfo.estimatedDeliveryDate,\r\n                actualDeliveryDate: order.shippingInfo.actualDeliveryDate\r\n            } : undefined,\r\n            createdAt: order.createdAt,\r\n            createdBy: order.createdBy,\r\n            lastModifiedAt: order.lastModifiedAt,\r\n            lastModifiedBy: order.lastModifiedBy\r\n        };\r\n    }\r\n\r\n    updateOrderStatus(orderId: string, request: UpdateOrderStatusRequest): Observable<void> {\r\n        return this.http.put<void>(`${this.apiUrl}/${orderId}/status`, request);\r\n    }\r\n\r\n    addPayment(orderId: string, payment: AddPaymentRequest): Observable<void> {\r\n        return this.http.post<void>(`${this.apiUrl}/${orderId}/payments`, payment);\r\n    }\r\n\r\n    updateShipping(orderId: string, shipping: UpdateShippingRequest): Observable<void> {\r\n        return this.http.put<void>(`${this.apiUrl}/${orderId}/shipping`, shipping);\r\n    }\r\n}",
            "properties": [
                {
                    "name": "newStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OrderStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateShippingRequest",
            "id": "interface-UpdateShippingRequest-4065c829466e6f05d1a9c250d83cf39dd9d23df3279ac5eca75b250ee0f8e1e08cf4b6eafd5f9cedcc7616ee1503079a61674f421d8d05db60f87220c60e6ce4",
            "file": "src/app/core/services/order.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { map, Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { PagedResponse } from '../../shared/models/paged-response.model';\r\nimport { Order, OrderStatus, PaymentStatus } from '../../shared/models/order.model';\r\n\r\nexport interface OrderListParams {\r\n    searchTerm?: string;\r\n    status?: OrderStatus;\r\n    fromDate?: string;\r\n    toDate?: string;\r\n    minTotal?: number;\r\n    maxTotal?: number;\r\n    sortBy?: string;\r\n    sortDirection?: 'asc' | 'desc';\r\n    page?: number;\r\n    pageSize?: number;\r\n}\r\n\r\nexport interface UpdateOrderStatusRequest {\r\n    newStatus: OrderStatus;\r\n}\r\n\r\nexport interface AddPaymentRequest {\r\n    transactionId: string;\r\n    method: string;\r\n    amount: number;\r\n    currency: string;\r\n    status: PaymentStatus;\r\n}\r\n\r\nexport interface UpdateShippingRequest {\r\n    carrier: string;\r\n    trackingNumber: string;\r\n    shippingCost: number;\r\n    currency: string;\r\n    estimatedDeliveryDate: string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n    private readonly apiUrl = environment.apiUrls.admin.orders;\r\n\r\n    constructor(private readonly http: HttpClient) { }\r\n\r\n    getOrder(id: string): Observable<Order> {\r\n        return this.http.get<any>(`${this.apiUrl}/${id}`).pipe(\r\n            map(this.mapOrderFromApi)\r\n        );\r\n    }\r\n\r\n    getOrders(params: any): Observable<any> {\r\n        return this.http.get<any>(this.apiUrl, { params }).pipe(\r\n            map(response => ({\r\n                ...response,\r\n                items: response.items.map(this.mapOrderFromApi)\r\n            }))\r\n        );\r\n    }\r\n\r\n    private mapOrderFromApi(order: any): Order {\r\n        return {\r\n            id: order.id,\r\n            orderNumber: order.orderNumber,\r\n            customerId: order.customerId,\r\n            status: order.status as OrderStatus,\r\n            subtotal: order.subtotal,\r\n            shippingCost: order.shippingCost,\r\n            tax: order.tax,\r\n            total: order.total,\r\n            currency: order.currency,\r\n            shippingAddress: order.shippingAddress,\r\n            billingAddress: order.billingAddress,\r\n            notes: order.notes,\r\n            cancelledAt: order.cancelledAt,\r\n            cancellationReason: order.cancellationReason,\r\n            items: (order.items || []).map((item: any) => ({\r\n                id: item.id,\r\n                productId: item.productId,\r\n                productName: item.productName,\r\n                sku: item.sku,\r\n                variantId: item.variantId,\r\n                quantity: item.quantity,\r\n                unitPrice: item.unitPrice,\r\n                currency: item.currency,\r\n                total: item.total\r\n            })),\r\n            payment: order.payment ? {\r\n                transactionId: order.payment.transactionId,\r\n                method: order.payment.method,\r\n                amount: order.payment.amount,\r\n                currency: order.payment.currency,\r\n                status: order.payment.status as PaymentStatus,\r\n                processedAt: order.payment.processedAt\r\n            } : undefined,\r\n            paymentStatus: order.paymentStatus as PaymentStatus,\r\n            paymentMethod: order.paymentMethod,\r\n            shippingInfo: order.shippingInfo ? {\r\n                carrier: order.shippingInfo.carrier,\r\n                trackingNumber: order.shippingInfo.trackingNumber,\r\n                estimatedDeliveryDate: order.shippingInfo.estimatedDeliveryDate,\r\n                actualDeliveryDate: order.shippingInfo.actualDeliveryDate\r\n            } : undefined,\r\n            createdAt: order.createdAt,\r\n            createdBy: order.createdBy,\r\n            lastModifiedAt: order.lastModifiedAt,\r\n            lastModifiedBy: order.lastModifiedBy\r\n        };\r\n    }\r\n\r\n    updateOrderStatus(orderId: string, request: UpdateOrderStatusRequest): Observable<void> {\r\n        return this.http.put<void>(`${this.apiUrl}/${orderId}/status`, request);\r\n    }\r\n\r\n    addPayment(orderId: string, payment: AddPaymentRequest): Observable<void> {\r\n        return this.http.post<void>(`${this.apiUrl}/${orderId}/payments`, payment);\r\n    }\r\n\r\n    updateShipping(orderId: string, shipping: UpdateShippingRequest): Observable<void> {\r\n        return this.http.put<void>(`${this.apiUrl}/${orderId}/shipping`, shipping);\r\n    }\r\n}",
            "properties": [
                {
                    "name": "carrier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "estimatedDeliveryDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "shippingCost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "trackingNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-052861d493be537358212d3287080f9e8351a3c9ef476c59623b20372055f9b681db217298021bbecefde0bc8076ea380b40785ddc3a7c2c90f65bf3a998b8f1-1",
            "file": "src/app/shared/models/auth.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AuthState {\r\n    user: User | null;\r\n    accessToken: string | null;\r\n    isAuthenticated: boolean;\r\n    loading: boolean;\r\n    error: string | null;\r\n    message?: string;\r\n}\r\n\r\nexport interface User {\r\n    id: string;\r\n    username: string;\r\n    email: string;\r\n    firstName?: string;\r\n    lastName?: string;\r\n    roles: string[];\r\n    permissions: string[];\r\n}\r\n\r\nexport interface AuthTokens {\r\n    accessToken: string;\r\n    expiresIn: number;\r\n    tokenType: string;\r\n    scope: string;\r\n    profile: User;\r\n}\r\n\r\nexport interface TokenResponse {\r\n    access_token: string;\r\n    id_token: string;\r\n    expires_in: number;\r\n    token_type: string;\r\n    scope: string;\r\n    profile: User;\r\n}\r\n\r\n// Constants for auth configuration\r\nexport const AUTH_STORAGE_KEYS = {\r\n    ACCESS_TOKEN: 'auth.access_token',\r\n    USER: 'auth.user',\r\n    EXPIRES_AT: 'auth.expires_at'\r\n} as const;\r\n// Common auth error types\r\nexport type AuthError =\r\n    | 'auth/invalid-credentials'\r\n    | 'auth/session-expired'\r\n    | 'auth/network-error'\r\n    | 'auth/unknown-error';\r\n\r\nexport const AUTH_ERROR_MESSAGES: Record<AuthError, string> = {\r\n    'auth/invalid-credentials': 'Invalid username or password',\r\n    'auth/session-expired': 'Your session has expired. Please login again.',\r\n    'auth/network-error': 'Unable to connect to authentication service',\r\n    'auth/unknown-error': 'An unknown error occurred'\r\n};\r\n\r\n\r\n// // Constants for your auth configuration\r\n// export const AUTH_CONFIG: AuthConfig = {\r\n//   authority: 'https://localhost:5001',\r\n//   clientId: 'admin-portal',\r\n//   redirectUri: window.location.origin + '/callback',\r\n//   responseType: 'code',\r\n//   scope: 'openid profile email api.full',\r\n// };",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "permissions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        },
        {
            "name": "UserRef",
            "id": "interface-UserRef-9a5077a6325d4fe0e0dc9cfec38379b1fae75078a01804d962f1760fb14e008469b44fe36db96002da9eac04423e67e1539dba8d27ebfcb7a8b367b842b934f8",
            "file": "src/app/shared/models/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserRef {\r\n    id: string;\r\n    username: string;\r\n    email: string;\r\n}",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-e171cb2e17e0de2c9067e01596c9c1fe4ae80547233cf999beaf0413e6068946e81ff271542d615261ea04989d7dbedc53103f471c393ef75187a8b35660adf6",
            "file": "src/app/core/services/auth.service.ts",
            "properties": [
                {
                    "name": "authState$",
                    "defaultValue": "this.authStateSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "authStateSubject",
                    "defaultValue": "new BehaviorSubject<AuthState>({\r\n    user: null,\r\n    accessToken: null,\r\n    isAuthenticated: false,\r\n    loading: false,\r\n    error: null\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "currentUser$",
                    "defaultValue": "this.authState$.pipe(map(state => state.user))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "errorService",
                    "defaultValue": "inject(ErrorService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "isAuthenticated$",
                    "defaultValue": "this.authState$.pipe(map(state => state.isAuthenticated))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "loadingService",
                    "defaultValue": "inject(LoadingService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "refreshTokenTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "userManager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserManager",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearAuthState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "completeAuthentication",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getAccessToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string | null>",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentUserName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleAuthError",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSignOut",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "hasPermission",
                    "args": [
                        {
                            "name": "permission",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "permission",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasRole",
                    "args": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initializeAuth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "processUserLogin",
                    "args": [
                        {
                            "name": "oidcUser",
                            "type": "OidcUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "oidcUser",
                            "type": "OidcUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setLoading",
                    "args": [
                        {
                            "name": "loading",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "loading",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupEventHandlers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "startTokenRefreshTimer",
                    "args": [
                        {
                            "name": "expiresIn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "expiresIn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopTokenRefreshTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, from, of, throwError } from 'rxjs';\r\nimport { catchError, map, tap, switchMap } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\nimport { User, AuthState, AuthError, AUTH_ERROR_MESSAGES } from '../../shared/models/auth.models';\r\nimport { UserManager, User as OidcUser, UserManagerSettings } from 'oidc-client-ts';\r\nimport { environment } from '../../../environments/environment';\r\nimport { ErrorService } from './error.service';\r\nimport { LoadingService } from './loading.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n  private readonly http = inject(HttpClient);\r\n  private readonly router = inject(Router);\r\n  private readonly errorService = inject(ErrorService);\r\n  private readonly loadingService = inject(LoadingService);\r\n\r\n  private readonly userManager: UserManager;\r\n  private readonly authStateSubject = new BehaviorSubject<AuthState>({\r\n    user: null,\r\n    accessToken: null,\r\n    isAuthenticated: false,\r\n    loading: false,\r\n    error: null\r\n  });\r\n\r\n  readonly authState$ = this.authStateSubject.asObservable();\r\n  readonly currentUser$ = this.authState$.pipe(map(state => state.user));\r\n  readonly isAuthenticated$ = this.authState$.pipe(map(state => state.isAuthenticated));\r\n\r\n  private refreshTokenTimeout?: number;\r\n\r\n  constructor() {\r\n    const settings: UserManagerSettings = {\r\n      authority: environment.auth.authority,\r\n      client_id: environment.auth.clientId,\r\n      redirect_uri: environment.auth.redirectUri,\r\n      response_type: environment.auth.responseType,\r\n      scope: environment.auth.scope,\r\n      filterProtocolClaims: true,\r\n      loadUserInfo: true,\r\n      automaticSilentRenew: true,\r\n      includeIdTokenInSilentRenew: true,\r\n      monitorSession: true\r\n    };\r\n\r\n    this.userManager = new UserManager(settings);\r\n    this.init();\r\n\r\n    this.setupEventHandlers();\r\n  }\r\n\r\n  private init() {\r\n    this.initializeAuth().catch(error => this.handleAuthError(error));\r\n  }\r\n\r\n  private async initializeAuth() {\r\n    this.setLoading(true);\r\n    try {\r\n      const user = await this.userManager.getUser();\r\n      if (user?.access_token && user.expires_in !== undefined) {\r\n        this.processUserLogin(user);\r\n        this.startTokenRefreshTimer(user.expires_in);\r\n      }\r\n    } catch (error) {\r\n      this.handleAuthError(error as Error);\r\n    } finally {\r\n      this.setLoading(false);\r\n    }\r\n  }\r\n\r\n  private setupEventHandlers() {\r\n    // Handle silent token renewal errors\r\n    this.userManager.events.addSilentRenewError(error => {\r\n      console.error('Silent renew error:', error);\r\n      this.handleAuthError(error);\r\n    });\r\n\r\n    // Handle user session expiration\r\n    this.userManager.events.addUserSignedOut(() => {\r\n      this.handleSignOut();\r\n    });\r\n  }\r\n\r\n  private processUserLogin(oidcUser: OidcUser) {\r\n    const user: User = {\r\n      id: oidcUser.profile.sub,\r\n      username: oidcUser.profile.preferred_username!,\r\n      email: oidcUser.profile.email!,\r\n      firstName: oidcUser.profile.given_name,\r\n      lastName: oidcUser.profile.family_name,\r\n      roles: (oidcUser.profile['role'] as string[]) || [],\r\n      permissions: (oidcUser.profile['permissions'] as string[]) || []\r\n    };\r\n\r\n    this.authStateSubject.next({\r\n      user,\r\n      accessToken: oidcUser.access_token,\r\n      isAuthenticated: true,\r\n      loading: false,\r\n      error: null\r\n    });\r\n  }\r\n\r\n  login(): Promise<void> {\r\n    return this.userManager.signinRedirect();\r\n  }\r\n\r\n  async completeAuthentication(): Promise<void> {\r\n    this.setLoading(true);\r\n    try {\r\n      const user = await this.userManager.signinRedirectCallback();\r\n      this.processUserLogin(user);\r\n      if (user.expires_in !== undefined) {\r\n        this.startTokenRefreshTimer(user.expires_in);\r\n      }\r\n      await this.router.navigate(['/']);\r\n    } catch (error) {\r\n      this.handleAuthError(error as Error);\r\n      await this.router.navigate(['/login']);\r\n    } finally {\r\n      this.setLoading(false);\r\n    }\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    this.stopTokenRefreshTimer();\r\n    this.clearAuthState();\r\n    await this.userManager.signoutRedirect();\r\n  }\r\n\r\n  private async handleSignOut() {\r\n    this.clearAuthState();\r\n    await this.router.navigate(['/login']);\r\n  }\r\n\r\n  private startTokenRefreshTimer(expiresIn: number) {\r\n    this.stopTokenRefreshTimer();\r\n\r\n    // Refresh 1 minute before expiration\r\n    const timeout = (expiresIn - 60) * 1000;\r\n    this.refreshTokenTimeout = window.setTimeout(() => {\r\n      this.userManager.signinSilent()\r\n        .then(user => {\r\n          if (user) {\r\n            this.processUserLogin(user);\r\n            if (user.expires_in !== undefined) {\r\n              this.startTokenRefreshTimer(user.expires_in);\r\n            }\r\n          }\r\n        })\r\n        .catch(error => this.handleAuthError(error));\r\n    }, timeout);\r\n  }\r\n\r\n  private stopTokenRefreshTimer() {\r\n    if (this.refreshTokenTimeout) {\r\n      window.clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n  }\r\n\r\n  // Token refresh handling\r\n  refreshToken(): Observable<boolean> {\r\n    return from(this.userManager.signinSilent()).pipe(\r\n      map(user => {\r\n        if (user) {\r\n          this.processUserLogin(user);\r\n          if (user.expires_in !== undefined) {\r\n            this.startTokenRefreshTimer(user.expires_in);\r\n          }\r\n          return true;\r\n        }\r\n        return false;\r\n      }),\r\n      catchError(error => {\r\n        this.handleAuthError(error);\r\n        return of(false);\r\n      })\r\n    );\r\n  }\r\n\r\n  private clearAuthState() {\r\n    this.authStateSubject.next({\r\n      user: null,\r\n      accessToken: null,\r\n      isAuthenticated: false,\r\n      loading: false,\r\n      error: null,\r\n      message: 'You have been signed out'\r\n    });\r\n  }\r\n\r\n  private setLoading(loading: boolean, message?: string) {\r\n    const currentState = this.authStateSubject.value;\r\n    this.authStateSubject.next({\r\n      ...currentState,\r\n      loading,\r\n      message\r\n    });\r\n\r\n    // Also update global loading state\r\n    if (loading) {\r\n      this.loadingService.show(message);\r\n    } else {\r\n      this.loadingService.hide();\r\n    }\r\n  }\r\n\r\n  private handleAuthError(error: Error) {\r\n    console.error('Auth error:', error);\r\n\r\n    let errorCode: AuthError = 'auth/unknown-error';\r\n    if (error.message.includes('network')) {\r\n      errorCode = 'auth/network-error';\r\n    } else if (error.message.includes('expired')) {\r\n      errorCode = 'auth/session-expired';\r\n    }\r\n\r\n    const errorMessage = AUTH_ERROR_MESSAGES[errorCode];\r\n\r\n    this.errorService.addError({\r\n      code: errorCode,\r\n      message: errorMessage,\r\n      severity: 'error'\r\n    });\r\n\r\n    this.authStateSubject.next({\r\n      ...this.authStateSubject.value,\r\n      error: errorMessage\r\n    });\r\n  }\r\n\r\n  // Permission checking methods\r\n  hasPermission(permission: string): Observable<boolean> {\r\n    return this.currentUser$.pipe(\r\n      map(user => user?.permissions?.includes(permission) ?? false)\r\n    );\r\n  }\r\n\r\n  hasRole(role: string): Observable<boolean> {\r\n    return this.currentUser$.pipe(\r\n      map(user => user?.roles?.includes(role) ?? false)\r\n    );\r\n  }\r\n\r\n  // Helper methods\r\n  getAccessToken(): Observable<string | null> {\r\n    return from(this.userManager.getUser()).pipe(\r\n      map(user => user?.access_token ?? null)\r\n    );\r\n  }\r\n\r\n  getCurrentUserName(): string {\r\n    const user = this.authStateSubject.value.user;\r\n    return user ? `${user.firstName} ${user.lastName}`.trim() : '';\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 33
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BulkActionsService",
            "id": "injectable-BulkActionsService-cdef515ce3bf8859553e6ae90244a845bbeb4476c4dbb2f9e00991496aaa8da62eb3f2455b392818953b401971a39c9604b937b04dc0fc0793309b73d28de3bb",
            "file": "src/app/core/services/bulk-actions.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUrls.admin.orders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "generateInvoices",
                    "args": [
                        {
                            "name": "orders",
                            "type": "Order[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Blob>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orders",
                            "type": "Order[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generatePackingSlips",
                    "args": [
                        {
                            "name": "orders",
                            "type": "Order[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Blob>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orders",
                            "type": "Order[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateShippingLabels",
                    "args": [
                        {
                            "name": "orders",
                            "type": "Order[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Blob>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orders",
                            "type": "Order[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBulkOperationStatus",
                    "args": [
                        {
                            "name": "operationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "operationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateOrderStatus",
                    "args": [
                        {
                            "name": "orderIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newStatus",
                            "type": "OrderStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orderIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newStatus",
                            "type": "OrderStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateBulkOperation",
                    "args": [
                        {
                            "name": "orders",
                            "type": "Order[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orders",
                            "type": "Order[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, forkJoin } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\nimport { Order, OrderStatus } from '../../shared/models/order.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class BulkActionsService {\r\n    private readonly apiUrl = environment.apiUrls.admin.orders;\r\n\r\n    constructor(private readonly http: HttpClient) { }\r\n\r\n    // Update status for multiple orders\r\n    updateOrderStatus(orderIds: string[], newStatus: OrderStatus): Observable<void> {\r\n        return this.http.post<void>(`${this.apiUrl}/bulk/status`, {\r\n            orderIds,\r\n            newStatus\r\n        });\r\n    }\r\n\r\n    // Generate PDF invoices for selected orders\r\n    generateInvoices(orders: Order[]): Observable<Blob> {\r\n        return this.http.post(`${this.apiUrl}/bulk/invoices`, {\r\n            orderIds: orders.map(order => order.id)\r\n        }, {\r\n            responseType: 'blob'\r\n        });\r\n    }\r\n\r\n    // Generate shipping labels for selected orders\r\n    generateShippingLabels(orders: Order[]): Observable<Blob> {\r\n        return this.http.post(`${this.apiUrl}/bulk/shipping-labels`, {\r\n            orderIds: orders.map(order => order.id)\r\n        }, {\r\n            responseType: 'blob'\r\n        });\r\n    }\r\n\r\n    // Generate packing slips for selected orders\r\n    generatePackingSlips(orders: Order[]): Observable<Blob> {\r\n        return this.http.post(`${this.apiUrl}/bulk/packing-slips`, {\r\n            orderIds: orders.map(order => order.id)\r\n        }, {\r\n            responseType: 'blob'\r\n        });\r\n    }\r\n\r\n    // Validate orders can be processed in bulk\r\n    validateBulkOperation(orders: Order[], operation: string): Observable<{\r\n        valid: boolean;\r\n        invalidOrders: string[];\r\n        reason?: string;\r\n    }> {\r\n        return this.http.post<{\r\n            valid: boolean;\r\n            invalidOrders: string[];\r\n            reason?: string;\r\n        }>(`${this.apiUrl}/bulk/validate`, {\r\n            orderIds: orders.map(order => order.id),\r\n            operation\r\n        });\r\n    }\r\n\r\n    // Get bulk operation status (for long-running operations)\r\n    getBulkOperationStatus(operationId: string): Observable<{\r\n        status: 'pending' | 'processing' | 'completed' | 'failed';\r\n        progress: number;\r\n        error?: string;\r\n    }> {\r\n        return this.http.get<{\r\n            status: 'pending' | 'processing' | 'completed' | 'failed';\r\n            progress: number;\r\n            error?: string;\r\n        }>(`${this.apiUrl}/bulk/status/${operationId}`);\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CategoryEffects",
            "id": "injectable-CategoryEffects-3e513e57797f6ebcd9be7d286cc822453b11614e30cfd1185287aac8cd88c79189003f4498112f9ee7078e59f343ff16fb2e8e25459eebc812dd607d468e9c06",
            "file": "src/app/store/category/category.effects.ts",
            "properties": [
                {
                    "name": "actions$",
                    "defaultValue": "inject(Actions)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "categoryService",
                    "defaultValue": "inject(CategoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "createCategory$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(CategoryActions.createCategory),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action =>\r\n                this.categoryService.createCategory(action.request).pipe(\r\n                    map(category => {\r\n                        this.loadingService.hide();\r\n                        return CategoryActions.createCategorySuccess({ category });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            message: 'Failed to create category',\r\n                            code: error.code || 'CREATE_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(CategoryActions.createCategoryFailure({\r\n                            error: error.message || 'Failed to create category'\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "deleteCategory$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(CategoryActions.deleteCategory),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action =>\r\n                this.categoryService.deleteCategory(action.id).pipe(\r\n                    map(() => {\r\n                        this.loadingService.hide();\r\n                        return CategoryActions.deleteCategorySuccess({ id: action.id });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        let errorMessage = 'Failed to delete category';\r\n\r\n                        if (error.code === 'Category.HasProducts') {\r\n                            errorMessage = 'Cannot delete category with associated products';\r\n                        }\r\n\r\n                        this.errorService.addError({\r\n                            message: errorMessage,\r\n                            code: error.code || 'DELETE_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(CategoryActions.deleteCategoryFailure({\r\n                            error: error.message || errorMessage\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "errorService",
                    "defaultValue": "inject(ErrorService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadCategories$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(CategoryActions.loadCategories),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(() =>\r\n                this.categoryService.getCategories().pipe(\r\n                    map(categories => {\r\n                        this.loadingService.hide();\r\n                        return CategoryActions.loadCategoriesSuccess({ categories });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            message: 'Failed to load categories',\r\n                            code: error.code || 'LOAD_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(CategoryActions.loadCategoriesFailure({\r\n                            error: error.message || 'Failed to load categories'\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loadingService",
                    "defaultValue": "inject(LoadingService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "reloadAfterOperation$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(\r\n                CategoryActions.createCategorySuccess,\r\n                CategoryActions.updateCategorySuccess,\r\n                CategoryActions.deleteCategorySuccess,\r\n                CategoryActions.reorderCategoriesSuccess\r\n            ),\r\n            map(() => CategoryActions.loadCategories())\r\n        );\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "reorderCategories$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(CategoryActions.reorderCategories),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action =>\r\n                this.categoryService.reorderCategories(action.requests).pipe(\r\n                    map(() => {\r\n                        this.loadingService.hide();\r\n                        return CategoryActions.reorderCategoriesSuccess();\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            message: 'Failed to reorder categories',\r\n                            code: error.code || 'REORDER_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(CategoryActions.reorderCategoriesFailure({\r\n                            error: error.message || 'Failed to reorder categories'\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateCategory$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(CategoryActions.updateCategory),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action =>\r\n                this.categoryService.updateCategory(action.id, action.request).pipe(\r\n                    map(category => {\r\n                        this.loadingService.hide();\r\n                        return CategoryActions.updateCategorySuccess({ category });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            message: 'Failed to update category',\r\n                            code: error.code || 'UPDATE_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(CategoryActions.updateCategoryFailure({\r\n                            error: error.message || 'Failed to update category'\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { of } from 'rxjs';\r\nimport { map, mergeMap, catchError, withLatestFrom, tap } from 'rxjs/operators';\r\nimport { CategoryService } from '../../core/services/category.service';\r\nimport { CategoryActions } from './category.actions';\r\nimport { selectCategoryState } from './category.selectors';\r\nimport { LoadingService } from '../../core/services/loading.service';\r\nimport { ErrorService } from '../../core/services/error.service';\r\n\r\n@Injectable()\r\nexport class CategoryEffects {\r\n    private actions$ = inject(Actions);\r\n    private store = inject(Store);\r\n    private categoryService = inject(CategoryService);\r\n    private loadingService = inject(LoadingService);\r\n    private errorService = inject(ErrorService);\r\n\r\n    loadCategories$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(CategoryActions.loadCategories),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(() =>\r\n                this.categoryService.getCategories().pipe(\r\n                    map(categories => {\r\n                        this.loadingService.hide();\r\n                        return CategoryActions.loadCategoriesSuccess({ categories });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            message: 'Failed to load categories',\r\n                            code: error.code || 'LOAD_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(CategoryActions.loadCategoriesFailure({\r\n                            error: error.message || 'Failed to load categories'\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    });\r\n\r\n    createCategory$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(CategoryActions.createCategory),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action =>\r\n                this.categoryService.createCategory(action.request).pipe(\r\n                    map(category => {\r\n                        this.loadingService.hide();\r\n                        return CategoryActions.createCategorySuccess({ category });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            message: 'Failed to create category',\r\n                            code: error.code || 'CREATE_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(CategoryActions.createCategoryFailure({\r\n                            error: error.message || 'Failed to create category'\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    });\r\n\r\n    updateCategory$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(CategoryActions.updateCategory),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action =>\r\n                this.categoryService.updateCategory(action.id, action.request).pipe(\r\n                    map(category => {\r\n                        this.loadingService.hide();\r\n                        return CategoryActions.updateCategorySuccess({ category });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            message: 'Failed to update category',\r\n                            code: error.code || 'UPDATE_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(CategoryActions.updateCategoryFailure({\r\n                            error: error.message || 'Failed to update category'\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    });\r\n\r\n    deleteCategory$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(CategoryActions.deleteCategory),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action =>\r\n                this.categoryService.deleteCategory(action.id).pipe(\r\n                    map(() => {\r\n                        this.loadingService.hide();\r\n                        return CategoryActions.deleteCategorySuccess({ id: action.id });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        let errorMessage = 'Failed to delete category';\r\n\r\n                        if (error.code === 'Category.HasProducts') {\r\n                            errorMessage = 'Cannot delete category with associated products';\r\n                        }\r\n\r\n                        this.errorService.addError({\r\n                            message: errorMessage,\r\n                            code: error.code || 'DELETE_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(CategoryActions.deleteCategoryFailure({\r\n                            error: error.message || errorMessage\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    });\r\n\r\n    reorderCategories$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(CategoryActions.reorderCategories),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action =>\r\n                this.categoryService.reorderCategories(action.requests).pipe(\r\n                    map(() => {\r\n                        this.loadingService.hide();\r\n                        return CategoryActions.reorderCategoriesSuccess();\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            message: 'Failed to reorder categories',\r\n                            code: error.code || 'REORDER_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(CategoryActions.reorderCategoriesFailure({\r\n                            error: error.message || 'Failed to reorder categories'\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    });\r\n\r\n    // Reload categories after successful operations\r\n    reloadAfterOperation$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(\r\n                CategoryActions.createCategorySuccess,\r\n                CategoryActions.updateCategorySuccess,\r\n                CategoryActions.deleteCategorySuccess,\r\n                CategoryActions.reorderCategoriesSuccess\r\n            ),\r\n            map(() => CategoryActions.loadCategories())\r\n        );\r\n    });\r\n}",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CategoryService",
            "id": "injectable-CategoryService-a09321554dc3e4d125a472b077a811bd36db0824a6de365e55de57a007a3f15f86cc0dcff23a88f339198451da449d6d89be3d8aadacb8781573e32d786d7479",
            "file": "src/app/core/services/category.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUrls.admin.categories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "hubConnection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "signalR.HubConnection | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createCategory",
                    "args": [
                        {
                            "name": "request",
                            "type": "CreateCategoryRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Category>",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "CreateCategoryRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createConnection",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCategory",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Category[]>",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCategory",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Category>",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeSignalR",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mapCategoryFromApi",
                    "args": [
                        {
                            "name": "category",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Category",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reorderCategories",
                    "args": [
                        {
                            "name": "requests",
                            "type": "ReorderCategoryRequest[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "requests",
                            "type": "ReorderCategoryRequest[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupHubListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateCategory",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "request",
                            "type": "UpdateCategoryRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Category>",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "request",
                            "type": "UpdateCategoryRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject, OnDestroy } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map, shareReplay } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\nimport { Category } from 'src/app/shared/models/category.model';\r\nimport {\r\n    CreateCategoryRequest,\r\n    UpdateCategoryRequest,\r\n    ReorderCategoryRequest\r\n} from 'src/app/shared/models/Request.model';\r\nimport { Store } from '@ngrx/store';\r\nimport * as signalR from '@microsoft/signalr';\r\nimport { CategoryActions } from 'src/app/store/category/category.actions';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CategoryService implements OnDestroy {\r\n    private readonly apiUrl = environment.apiUrls.admin.categories;\r\n    private hubConnection: signalR.HubConnection | undefined;\r\n    private readonly authService = inject(AuthService);\r\n\r\n    constructor(\r\n        private readonly http: HttpClient,\r\n        private readonly store: Store\r\n    ) {\r\n        this.initializeSignalR();\r\n    }\r\n    private mapCategoryFromApi(category: any): Category {\r\n        return {\r\n            ...category,\r\n            // Ensure collections are never null\r\n            subCategories: category.subCategories || [],\r\n            // Convert dates if needed\r\n            createdAt: category.createdAt,\r\n            lastModifiedAt: category.lastModifiedAt,\r\n            // Convert parent category recursively if it exists\r\n            parentCategory: category.parentCategory ? this.mapCategoryFromApi(category.parentCategory) : null\r\n        };\r\n    }\r\n    private initializeSignalR() {\r\n        this.authService.getAccessToken().subscribe(token => {\r\n            if (!token) {\r\n                console.warn('No auth token available for Category SignalR connection');\r\n                return;\r\n            }\r\n\r\n            this.hubConnection = new signalR.HubConnectionBuilder()\r\n                .withUrl(environment.signalR.category, {\r\n                    accessTokenFactory: () => token\r\n                })\r\n                .withAutomaticReconnect()\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(err => console.error('Error starting SignalR:', err));\r\n\r\n            this.hubConnection.on('CategoryCreated', (category: Category) => {\r\n                this.store.dispatch(CategoryActions.createCategorySuccess({ category }));\r\n            });\r\n\r\n            this.hubConnection.on('CategoryUpdated', (category: Category) => {\r\n                this.store.dispatch(CategoryActions.updateCategorySuccess({ category }));\r\n            });\r\n\r\n            this.hubConnection.on('CategoryDeleted', (categoryId: string) => {\r\n                this.store.dispatch(CategoryActions.deleteCategorySuccess({ id: categoryId }));\r\n            });\r\n        });\r\n\r\n        // Recreate connection when auth state changes\r\n        this.authService.authState$.subscribe(state => {\r\n            if (state.isAuthenticated && state.accessToken && (!this.hubConnection || this.hubConnection.state === signalR.HubConnectionState.Disconnected)) {\r\n                this.createConnection(state.accessToken);\r\n            }\r\n        });\r\n    }\r\n\r\n    private createConnection(token: string) {\r\n        // Close existing connection if open\r\n        if (this.hubConnection) {\r\n            this.hubConnection.stop().catch(err => console.error('Error stopping connection:', err));\r\n        }\r\n\r\n        this.hubConnection = new signalR.HubConnectionBuilder()\r\n            .withUrl(environment.signalR.category, {\r\n                accessTokenFactory: () => token\r\n            })\r\n            .withAutomaticReconnect()\r\n            .build();\r\n\r\n        this.setupHubListeners();\r\n        this.hubConnection.start().catch(err => console.error('Error starting SignalR:', err));\r\n    }\r\n\r\n    private setupHubListeners() {\r\n        if (!this.hubConnection) return;\r\n\r\n        this.hubConnection.on('CategoryCreated', (category: Category) => {\r\n            this.store.dispatch(CategoryActions.createCategorySuccess({ category }));\r\n        });\r\n\r\n        this.hubConnection.on('CategoryUpdated', (category: Category) => {\r\n            this.store.dispatch(CategoryActions.updateCategorySuccess({ category }));\r\n        });\r\n\r\n        this.hubConnection.on('CategoryDeleted', (categoryId: string) => {\r\n            this.store.dispatch(CategoryActions.deleteCategorySuccess({ id: categoryId }));\r\n        });\r\n    }\r\n\r\n    getCategories(): Observable<Category[]> {\r\n        return this.http.get<any[]>(this.apiUrl).pipe(\r\n            map(categories => categories.map(this.mapCategoryFromApi))\r\n        );\r\n    }\r\n\r\n    getCategory(id: string): Observable<Category> {\r\n        return this.http.get<any>(`${this.apiUrl}/${id}`).pipe(\r\n            map(this.mapCategoryFromApi)\r\n        );\r\n    }\r\n\r\n    createCategory(request: CreateCategoryRequest): Observable<Category> {\r\n        return this.http.post<Category>(this.apiUrl, request).pipe(\r\n            catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n    updateCategory(id: string, request: UpdateCategoryRequest): Observable<Category> {\r\n        return this.http.put<Category>(`${this.apiUrl}/${id}`, request).pipe(\r\n            catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n    deleteCategory(id: string): Observable<void> {\r\n        return this.http.delete<void>(`${this.apiUrl}/${id}`).pipe(\r\n            catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n    reorderCategories(requests: ReorderCategoryRequest[]): Observable<void> {\r\n        return this.http.post<void>(`${this.apiUrl}/reorder`, requests).pipe(\r\n            catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n    private handleError(error: any): Observable<never> {\r\n        let errorMessage = 'An unknown error occurred';\r\n\r\n        if (error.error instanceof ErrorEvent) {\r\n            // Client-side error\r\n            errorMessage = error.error.message;\r\n        } else {\r\n            // Server-side error\r\n            if (error.status === 400 && error.error?.code === 'Category.HasProducts') {\r\n                errorMessage = 'Cannot delete category with associated products';\r\n            } else if (error.status === 400 && error.error?.code === 'Category.CircularReference') {\r\n                errorMessage = 'Cannot create circular reference in category hierarchy';\r\n            } else {\r\n                errorMessage = error.error?.message || 'Server error';\r\n            }\r\n        }\r\n\r\n        console.error('Category service error:', error);\r\n        return throwError(() => new Error(errorMessage));\r\n    }\r\n\r\n    // Clean up SignalR connection\r\n    ngOnDestroy() {\r\n        if (this.hubConnection) {\r\n            this.hubConnection.stop();\r\n        }\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DashboardEffects",
            "id": "injectable-DashboardEffects-1f0077d0dc0db9a583b18a47c6ea5b525b4fb8ac4dbb258b0e280e83c7b98866b9ab0439855d8b48a7e98608e9aca20ad01964d649a81d848f2a443f19787789",
            "file": "src/app/store/dashboard/dashboard.effects.ts",
            "properties": [
                {
                    "name": "loadStats$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(DashboardActions.loadStats),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(() =>\r\n                this.dashboardService.getDashboardStats().pipe(\r\n                    map(stats => {\r\n                        this.loadingService.hide();\r\n                        return DashboardActions.loadStatsSuccess({ stats });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            message: 'Failed to load dashboard stats',\r\n                            code: error.code || 'LOAD_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(DashboardActions.loadStatsFailure({\r\n                            error: error.message || 'Failed to load dashboard stats'\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { of } from 'rxjs';\r\nimport { map, mergeMap, catchError, tap } from 'rxjs/operators';\r\nimport { DashboardService } from '../../core/services/dashboard.service';\r\nimport { DashboardActions } from './dashboard.actions';\r\nimport { ErrorService } from '../../core/services/error.service';\r\nimport { LoadingService } from '../../core/services/loading.service';\r\n\r\n@Injectable()\r\nexport class DashboardEffects {\r\n    constructor(\r\n        private readonly actions$: Actions,\r\n        private readonly dashboardService: DashboardService,\r\n        private readonly errorService: ErrorService,\r\n        private readonly loadingService: LoadingService\r\n    ) { }\r\n\r\n    loadStats$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(DashboardActions.loadStats),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(() =>\r\n                this.dashboardService.getDashboardStats().pipe(\r\n                    map(stats => {\r\n                        this.loadingService.hide();\r\n                        return DashboardActions.loadStatsSuccess({ stats });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            message: 'Failed to load dashboard stats',\r\n                            code: error.code || 'LOAD_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(DashboardActions.loadStatsFailure({\r\n                            error: error.message || 'Failed to load dashboard stats'\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    });\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dashboardService",
                        "type": "DashboardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loadingService",
                        "type": "LoadingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dashboardService",
                        "type": "DashboardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loadingService",
                        "type": "LoadingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DashboardService",
            "id": "injectable-DashboardService-bc5954db38f3f2107f463dea48d3008e4d302ea2eeec0eac9d0d0941f3fabcd1ae2bbcdb36bacbe7a346e2e0b71abb0ed7e9358f26ff31cf20591fd096df4b15",
            "file": "src/app/core/services/dashboard.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUrls.admin.dashboard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getDashboardStats",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DashboardStats>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getInventoryStats",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getOrderStats",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getRevenueStats",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getShippingStats",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getStatusColor",
                    "args": [
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\n\r\nexport interface DashboardStats {\r\n    revenue: {\r\n        total: number;\r\n        trend: Array<{\r\n            date: string;\r\n            amount: number;\r\n        }>;\r\n    };\r\n    orders: {\r\n        total: number;\r\n        trend: Array<{\r\n            date: string;\r\n            count: number;\r\n        }>;\r\n        byStatus: Array<{\r\n            status: string;\r\n            value: number;\r\n            color: string;\r\n        }>;\r\n    };\r\n    inventory: {\r\n        lowStock: number;\r\n        outOfStock: number;\r\n        items: Array<{\r\n            id: string;\r\n            name: string;\r\n            sku: string;\r\n            currentStock: number;\r\n            minimumStock: number;\r\n        }>;\r\n    };\r\n    shipping: {\r\n        pending: number;\r\n        late: number;\r\n        pendingOrders: Array<{\r\n            id: string;\r\n            orderNumber: string;\r\n            createdAt: string;\r\n            status: string;\r\n        }>;\r\n    };\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DashboardService {\r\n    private readonly apiUrl = environment.apiUrls.admin.dashboard;\r\n\r\n    constructor(private readonly http: HttpClient) { }\r\n\r\n    // Get complete dashboard stats\r\n    getDashboardStats(): Observable<DashboardStats> {\r\n        return combineLatest([\r\n            this.getRevenueStats(),\r\n            this.getOrderStats(),\r\n            this.getInventoryStats(),\r\n            this.getShippingStats()\r\n        ]).pipe(\r\n            map(([revenue, orders, inventory, shipping]) => ({\r\n                revenue,\r\n                orders,\r\n                inventory,\r\n                shipping\r\n            }))\r\n        );\r\n    }\r\n\r\n    // Get revenue statistics\r\n    private getRevenueStats(): Observable<DashboardStats['revenue']> {\r\n        return this.http.get<DashboardStats['revenue']>(`${this.apiUrl}/revenue`);\r\n    }\r\n\r\n    // Get order statistics\r\n    private getOrderStats(): Observable<DashboardStats['orders']> {\r\n        return this.http.get<DashboardStats['orders']>(`${this.apiUrl}/orders`).pipe(\r\n            map(stats => ({\r\n                ...stats,\r\n                byStatus: stats.byStatus.map(status => ({\r\n                    ...status,\r\n                    color: this.getStatusColor(status.status)\r\n                }))\r\n            }))\r\n        );\r\n    }\r\n\r\n    // Get inventory alerts\r\n    private getInventoryStats(): Observable<DashboardStats['inventory']> {\r\n        return this.http.get<DashboardStats['inventory']>(`${this.apiUrl}/inventory`);\r\n    }\r\n\r\n    // Get shipping statistics\r\n    private getShippingStats(): Observable<DashboardStats['shipping']> {\r\n        return this.http.get<DashboardStats['shipping']>(`${this.apiUrl}/shipping`);\r\n    }\r\n\r\n    // Helper method to get consistent colors for order statuses\r\n    private getStatusColor(status: string): string {\r\n        const colorMap: { [key: string]: string } = {\r\n            'pending': '#FCD34D',   // Yellow\r\n            'confirmed': '#60A5FA', // Blue\r\n            'processing': '#818CF8', // Indigo\r\n            'shipped': '#34D399',   // Green\r\n            'delivered': '#10B981', // Emerald\r\n            'cancelled': '#EF4444', // Red\r\n            'refunded': '#F87171'   // Light Red\r\n        };\r\n\r\n        return colorMap[status.toLowerCase()] || '#6B7280'; // Gray default\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DialogService",
            "id": "injectable-DialogService-a5de268e7648022aaf1d807d1763c05fd5cb27e9ece0a7cdc5e08054563c3dcb9d233a5ee575b3e37976fa274f76826192580cb7af3b341f515ab2f3914a2c5f",
            "file": "src/app/core/services/dialog.service.ts",
            "properties": [
                {
                    "name": "dialog$",
                    "defaultValue": "this.dialogSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dialogSubject",
                    "defaultValue": "new BehaviorSubject<DialogConfig | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "isDialogActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resolveRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Confirm'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Confirm'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleAction",
                    "args": [
                        {
                            "name": "confirmed",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmed",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "config",
                            "type": "DialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "DialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport interface DialogConfig {\r\n    title: string;\r\n    message: string;\r\n    confirmText?: string;\r\n    cancelText?: string;\r\n    type?: 'info' | 'warning' | 'error' | 'confirm' | 'preview';\r\n    data?: any; // Added for preview type dialogs\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DialogService {\r\n    private readonly dialogSubject = new BehaviorSubject<DialogConfig | null>(null);\r\n    dialog$ = this.dialogSubject.asObservable();\r\n\r\n    private resolveRef: ((value: boolean) => void) | null = null;\r\n    private isDialogActive = false;\r\n\r\n    show(config: DialogConfig): Promise<boolean> {\r\n        // If a dialog is already active, close it first\r\n        if (this.isDialogActive) {\r\n            this.dialogSubject.next(null);\r\n        }\r\n\r\n        this.isDialogActive = true;\r\n        this.dialogSubject.next(config);\r\n\r\n        return new Promise((resolve) => {\r\n            this.resolveRef = resolve;\r\n        });\r\n    }\r\n\r\n    confirm(message: string, title = 'Confirm'): Promise<boolean> {\r\n        return this.show({\r\n            title,\r\n            message,\r\n            type: 'confirm',\r\n            confirmText: 'Confirm',\r\n            cancelText: 'Cancel'\r\n        });\r\n    }\r\n\r\n    handleAction(confirmed: boolean) {\r\n        if (this.resolveRef) {\r\n            this.resolveRef(confirmed);\r\n            this.resolveRef = null;\r\n        }\r\n        this.isDialogActive = false;\r\n        this.dialogSubject.next(null);\r\n    }\r\n}",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ErrorService",
            "id": "injectable-ErrorService-c064822636262629ab6b86801703ba808a5190f76c696bbf628b2dd82964cd83441c6ee0535416fc7552b340de8b6e188b0b55783251833aa833d5e43f2d1f58",
            "file": "src/app/core/services/error.service.ts",
            "properties": [
                {
                    "name": "ERROR_CATEGORIES",
                    "defaultValue": "{\r\n        VALIDATION: ['VALIDATION_ERROR', 'INVALID_INPUT'],\r\n        NETWORK: ['NETWORK_ERROR', 'TIMEOUT'],\r\n        AUTH: ['UNAUTHORIZED', 'FORBIDDEN'],\r\n        SERVER: ['SERVER_ERROR', 'DATABASE_ERROR'],\r\n        BUSINESS: ['BUSINESS_RULE_VIOLATION', 'INSUFFICIENT_STOCK']\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "errors$",
                    "defaultValue": "this.errorSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "errorSubject",
                    "defaultValue": "new BehaviorSubject<ApiError[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "validationErrors$",
                    "defaultValue": "this.validationErrorsSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "validationErrorsSubject",
                    "defaultValue": "new BehaviorSubject<ValidationError[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addError",
                    "args": [
                        {
                            "name": "error",
                            "type": "Omit<ApiError | \"id\" | \"timestamp\">",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Omit<ApiError | \"id\" | \"timestamp\">",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearAllErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createApiError",
                    "args": [
                        {
                            "name": "httpError",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ApiError",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpError",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultMessage",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDismissDelay",
                    "args": [
                        {
                            "name": "severity",
                            "type": "ApiError",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "severity",
                            "type": "ApiError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorCodeFromStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSeverityFromStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleHttpError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleValidationError",
                    "args": [
                        {
                            "name": "errorResponse",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "errorResponse",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseValidationErrors",
                    "args": [
                        {
                            "name": "errorResponse",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationError[]",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "errorResponse",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeError",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { ApiError, ValidationError } from '../../shared/models/error.models';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ErrorService {\r\n    private readonly errorSubject = new BehaviorSubject<ApiError[]>([]);\r\n    readonly errors$ = this.errorSubject.asObservable();\r\n\r\n    // Keep track of validation errors separately\r\n    private readonly validationErrorsSubject = new BehaviorSubject<ValidationError[]>([]);\r\n    readonly validationErrors$ = this.validationErrorsSubject.asObservable();\r\n\r\n    // Error Categories - helps with error handling strategies\r\n    private readonly ERROR_CATEGORIES = {\r\n        VALIDATION: ['VALIDATION_ERROR', 'INVALID_INPUT'],\r\n        NETWORK: ['NETWORK_ERROR', 'TIMEOUT'],\r\n        AUTH: ['UNAUTHORIZED', 'FORBIDDEN'],\r\n        SERVER: ['SERVER_ERROR', 'DATABASE_ERROR'],\r\n        BUSINESS: ['BUSINESS_RULE_VIOLATION', 'INSUFFICIENT_STOCK']\r\n    };\r\n\r\n    handleHttpError(error: HttpErrorResponse): void {\r\n        if (error.status === 422) {\r\n            // Handle validation errors\r\n            this.handleValidationError(error.error);\r\n        } else {\r\n            const apiError = this.createApiError(error);\r\n            this.addError(apiError);\r\n        }\r\n    }\r\n\r\n    private handleValidationError(errorResponse: any): void {\r\n        const validationErrors = this.parseValidationErrors(errorResponse);\r\n        this.validationErrorsSubject.next(validationErrors);\r\n    }\r\n\r\n    private parseValidationErrors(errorResponse: any): ValidationError[] {\r\n        if (Array.isArray(errorResponse.errors)) {\r\n            return errorResponse.errors.map((error: any) => ({\r\n                field: error.field,\r\n                message: error.message,\r\n                code: error.code || 'VALIDATION_ERROR'\r\n            }));\r\n        }\r\n        return [];\r\n    }\r\n\r\n    addError(error: Omit<ApiError, 'id' | 'timestamp'>): void {\r\n        const apiError: ApiError = {\r\n            id: uuidv4(),\r\n            timestamp: new Date(),\r\n            ...error\r\n        };\r\n\r\n        const currentErrors = this.errorSubject.value;\r\n        this.errorSubject.next([...currentErrors, apiError]);\r\n\r\n        // Auto-dismiss after delay based on severity\r\n        const dismissDelay = this.getDismissDelay(error.severity);\r\n        if (dismissDelay) {\r\n            setTimeout(() => this.removeError(apiError.id), dismissDelay);\r\n        }\r\n    }\r\n\r\n    private getDismissDelay(severity: ApiError['severity']): number {\r\n        switch (severity) {\r\n            case 'error': return 0;  // Don't auto-dismiss errors\r\n            case 'warning': return 5000;  // 5 seconds\r\n            case 'info': return 3000;  // 3 seconds\r\n            default: return 3000;\r\n        }\r\n    }\r\n\r\n    removeError(id: string): void {\r\n        const currentErrors = this.errorSubject.value;\r\n        this.errorSubject.next(currentErrors.filter(error => error.id !== id));\r\n    }\r\n\r\n    clearAllErrors(): void {\r\n        this.errorSubject.next([]);\r\n        this.validationErrorsSubject.next([]);\r\n    }\r\n\r\n    private createApiError(httpError: HttpErrorResponse): ApiError {\r\n        const errorResponse = httpError.error;\r\n\r\n        return {\r\n            id: uuidv4(),\r\n            code: errorResponse.code || this.getErrorCodeFromStatus(httpError.status),\r\n            message: errorResponse.message || this.getDefaultMessage(httpError),\r\n            details: errorResponse.details,\r\n            timestamp: new Date(),\r\n            severity: this.getSeverityFromStatus(httpError.status),\r\n            correlationId: errorResponse.correlationId\r\n        };\r\n    }\r\n\r\n    private getErrorCodeFromStatus(status: number): string {\r\n        switch (status) {\r\n            case 400: return 'BAD_REQUEST';\r\n            case 401: return 'UNAUTHORIZED';\r\n            case 403: return 'FORBIDDEN';\r\n            case 404: return 'NOT_FOUND';\r\n            case 500: return 'SERVER_ERROR';\r\n            default: return 'UNKNOWN_ERROR';\r\n        }\r\n    }\r\n\r\n    private getDefaultMessage(error: HttpErrorResponse): string {\r\n        switch (error.status) {\r\n            case 400: return 'Invalid request. Please check your input.';\r\n            case 401: return 'You need to log in to access this resource.';\r\n            case 403: return 'You don\\'t have permission to access this resource.';\r\n            case 404: return 'The requested resource was not found.';\r\n            case 500: return 'An unexpected server error occurred.';\r\n            default: return 'An unexpected error occurred.';\r\n        }\r\n    }\r\n\r\n    private getSeverityFromStatus(status: number): ApiError['severity'] {\r\n        if (status >= 500) return 'error';\r\n        if (status >= 400) return 'warning';\r\n        return 'info';\r\n    }\r\n}",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LoadingService",
            "id": "injectable-LoadingService-60f89c91c08d2d37ad3054b16e496ceeae7ea890526f0d2bf32df8c4f32528e8508d6317907f174db791b61a08beb5777575dd38d57a7d98768b8204d9dce0b6",
            "file": "src/app/core/services/loading.service.ts",
            "properties": [
                {
                    "name": "loading$",
                    "defaultValue": "this.loadingSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loadingCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadingSubject",
                    "defaultValue": "new BehaviorSubject<LoadingState>({\r\n        loading: false,\r\n        message: null\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport interface LoadingState {\r\n    loading: boolean;\r\n    message?: string | null;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class LoadingService {\r\n    private loadingSubject = new BehaviorSubject<LoadingState>({\r\n        loading: false,\r\n        message: null\r\n    });\r\n\r\n    loading$ = this.loadingSubject.asObservable();\r\n    private loadingCount = 0;\r\n\r\n    show(message?: string) {\r\n        this.loadingCount++;\r\n        if (this.loadingCount === 1) {\r\n            this.loadingSubject.next({\r\n                loading: true,\r\n                message\r\n            });\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        this.loadingCount--;\r\n        if (this.loadingCount <= 0) {\r\n            this.loadingCount = 0;\r\n            this.loadingSubject.next({\r\n                loading: false,\r\n                message: null\r\n            });\r\n        }\r\n    }\r\n\r\n    // Force reset loading state\r\n    reset() {\r\n        this.loadingCount = 0;\r\n        this.loadingSubject.next({\r\n            loading: false,\r\n            message: null\r\n        });\r\n    }\r\n}",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "OrderEffects",
            "id": "injectable-OrderEffects-cd953472d2c889baf85d0cdbc2c34aae2d860e56d48e3b54ed719c5ba13730c2b854fb1d75f8b61fdce9e1b08f4d8945b16ea15bafe8e61b1388fecc5eaf5c3b",
            "file": "src/app/store/order/order.effects.ts",
            "properties": [
                {
                    "name": "actions$",
                    "defaultValue": "inject(Actions)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "errorService",
                    "defaultValue": "inject(ErrorService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "loadingService",
                    "defaultValue": "inject(LoadingService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "loadOrders$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(OrderActions.loadOrders),\r\n            tap(() => this.loadingService.show()),\r\n            withLatestFrom(this.store.select(selectOrderFilters)),\r\n            mergeMap(([action, stateFilters]) =>\r\n                this.orderService.getOrders({ ...stateFilters, ...action.params }).pipe(\r\n                    map(response => {\r\n                        this.loadingService.hide();\r\n                        return OrderActions.loadOrdersSuccess({\r\n                            orders: response.items,\r\n                            totalItems: response.totalCount\r\n                        });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            message: 'Failed to load orders: ' + error.message,\r\n                            code: error.code || 'LOAD_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(OrderActions.loadOrdersFailure({\r\n                            error: error.message\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "orderService",
                    "defaultValue": "inject(OrderService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "updateStatus$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(OrderActions.updateStatus),\r\n            mergeMap(action =>\r\n                this.orderService.updateOrderStatus(action.orderId, {\r\n                    newStatus: action.newStatus as OrderStatus\r\n                }).pipe(\r\n                    map(() => OrderActions.updateStatusSuccess({\r\n                        order: { id: action.orderId, status: action.newStatus } as any\r\n                    })),\r\n                    catchError(error => {\r\n                        this.errorService.addError({\r\n                            message: 'Failed to update order status: ' + error.message,\r\n                            code: error.code || 'UPDATE_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(OrderActions.updateStatusFailure({\r\n                            error: error.message\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { of } from 'rxjs';\r\nimport { map, mergeMap, catchError, withLatestFrom, tap } from 'rxjs/operators';\r\nimport { OrderService } from '../../core/services/order.service';\r\nimport { OrderActions } from './order.actions';\r\nimport { selectOrderFilters } from './order.selectors';\r\nimport { ErrorService } from '../../core/services/error.service';\r\nimport { LoadingService } from '../../core/services/loading.service';\r\nimport { OrderStatus } from 'src/app/shared/models/order.model';\r\n\r\n@Injectable()\r\nexport class OrderEffects {\r\n    // constructor(\r\n    //     private readonly actions$: Actions,\r\n    //     private readonly store: Store,\r\n    //     private readonly orderService: OrderService,\r\n    //     private readonly errorService: ErrorService,\r\n    //     private readonly loadingService: LoadingService\r\n    // ) { }\r\n    private readonly actions$ = inject(Actions);\r\n    private readonly store = inject(Store);\r\n    private readonly orderService = inject(OrderService);\r\n    private readonly errorService = inject(ErrorService);\r\n    private readonly loadingService = inject(LoadingService);\r\n\r\n    loadOrders$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(OrderActions.loadOrders),\r\n            tap(() => this.loadingService.show()),\r\n            withLatestFrom(this.store.select(selectOrderFilters)),\r\n            mergeMap(([action, stateFilters]) =>\r\n                this.orderService.getOrders({ ...stateFilters, ...action.params }).pipe(\r\n                    map(response => {\r\n                        this.loadingService.hide();\r\n                        return OrderActions.loadOrdersSuccess({\r\n                            orders: response.items,\r\n                            totalItems: response.totalCount\r\n                        });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            message: 'Failed to load orders: ' + error.message,\r\n                            code: error.code || 'LOAD_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(OrderActions.loadOrdersFailure({\r\n                            error: error.message\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    });\r\n\r\n    updateStatus$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(OrderActions.updateStatus),\r\n            mergeMap(action =>\r\n                this.orderService.updateOrderStatus(action.orderId, {\r\n                    newStatus: action.newStatus as OrderStatus\r\n                }).pipe(\r\n                    map(() => OrderActions.updateStatusSuccess({\r\n                        order: { id: action.orderId, status: action.newStatus } as any\r\n                    })),\r\n                    catchError(error => {\r\n                        this.errorService.addError({\r\n                            message: 'Failed to update order status: ' + error.message,\r\n                            code: error.code || 'UPDATE_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(OrderActions.updateStatusFailure({\r\n                            error: error.message\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    });\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "OrderService",
            "id": "injectable-OrderService-4065c829466e6f05d1a9c250d83cf39dd9d23df3279ac5eca75b250ee0f8e1e08cf4b6eafd5f9cedcc7616ee1503079a61674f421d8d05db60f87220c60e6ce4",
            "file": "src/app/core/services/order.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUrls.admin.orders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addPayment",
                    "args": [
                        {
                            "name": "orderId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payment",
                            "type": "AddPaymentRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orderId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payment",
                            "type": "AddPaymentRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOrder",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Order>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOrders",
                    "args": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapOrderFromApi",
                    "args": [
                        {
                            "name": "order",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Order",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "order",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateOrderStatus",
                    "args": [
                        {
                            "name": "orderId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "request",
                            "type": "UpdateOrderStatusRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orderId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "request",
                            "type": "UpdateOrderStatusRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateShipping",
                    "args": [
                        {
                            "name": "orderId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "shipping",
                            "type": "UpdateShippingRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orderId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shipping",
                            "type": "UpdateShippingRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { map, Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { PagedResponse } from '../../shared/models/paged-response.model';\r\nimport { Order, OrderStatus, PaymentStatus } from '../../shared/models/order.model';\r\n\r\nexport interface OrderListParams {\r\n    searchTerm?: string;\r\n    status?: OrderStatus;\r\n    fromDate?: string;\r\n    toDate?: string;\r\n    minTotal?: number;\r\n    maxTotal?: number;\r\n    sortBy?: string;\r\n    sortDirection?: 'asc' | 'desc';\r\n    page?: number;\r\n    pageSize?: number;\r\n}\r\n\r\nexport interface UpdateOrderStatusRequest {\r\n    newStatus: OrderStatus;\r\n}\r\n\r\nexport interface AddPaymentRequest {\r\n    transactionId: string;\r\n    method: string;\r\n    amount: number;\r\n    currency: string;\r\n    status: PaymentStatus;\r\n}\r\n\r\nexport interface UpdateShippingRequest {\r\n    carrier: string;\r\n    trackingNumber: string;\r\n    shippingCost: number;\r\n    currency: string;\r\n    estimatedDeliveryDate: string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n    private readonly apiUrl = environment.apiUrls.admin.orders;\r\n\r\n    constructor(private readonly http: HttpClient) { }\r\n\r\n    getOrder(id: string): Observable<Order> {\r\n        return this.http.get<any>(`${this.apiUrl}/${id}`).pipe(\r\n            map(this.mapOrderFromApi)\r\n        );\r\n    }\r\n\r\n    getOrders(params: any): Observable<any> {\r\n        return this.http.get<any>(this.apiUrl, { params }).pipe(\r\n            map(response => ({\r\n                ...response,\r\n                items: response.items.map(this.mapOrderFromApi)\r\n            }))\r\n        );\r\n    }\r\n\r\n    private mapOrderFromApi(order: any): Order {\r\n        return {\r\n            id: order.id,\r\n            orderNumber: order.orderNumber,\r\n            customerId: order.customerId,\r\n            status: order.status as OrderStatus,\r\n            subtotal: order.subtotal,\r\n            shippingCost: order.shippingCost,\r\n            tax: order.tax,\r\n            total: order.total,\r\n            currency: order.currency,\r\n            shippingAddress: order.shippingAddress,\r\n            billingAddress: order.billingAddress,\r\n            notes: order.notes,\r\n            cancelledAt: order.cancelledAt,\r\n            cancellationReason: order.cancellationReason,\r\n            items: (order.items || []).map((item: any) => ({\r\n                id: item.id,\r\n                productId: item.productId,\r\n                productName: item.productName,\r\n                sku: item.sku,\r\n                variantId: item.variantId,\r\n                quantity: item.quantity,\r\n                unitPrice: item.unitPrice,\r\n                currency: item.currency,\r\n                total: item.total\r\n            })),\r\n            payment: order.payment ? {\r\n                transactionId: order.payment.transactionId,\r\n                method: order.payment.method,\r\n                amount: order.payment.amount,\r\n                currency: order.payment.currency,\r\n                status: order.payment.status as PaymentStatus,\r\n                processedAt: order.payment.processedAt\r\n            } : undefined,\r\n            paymentStatus: order.paymentStatus as PaymentStatus,\r\n            paymentMethod: order.paymentMethod,\r\n            shippingInfo: order.shippingInfo ? {\r\n                carrier: order.shippingInfo.carrier,\r\n                trackingNumber: order.shippingInfo.trackingNumber,\r\n                estimatedDeliveryDate: order.shippingInfo.estimatedDeliveryDate,\r\n                actualDeliveryDate: order.shippingInfo.actualDeliveryDate\r\n            } : undefined,\r\n            createdAt: order.createdAt,\r\n            createdBy: order.createdBy,\r\n            lastModifiedAt: order.lastModifiedAt,\r\n            lastModifiedBy: order.lastModifiedBy\r\n        };\r\n    }\r\n\r\n    updateOrderStatus(orderId: string, request: UpdateOrderStatusRequest): Observable<void> {\r\n        return this.http.put<void>(`${this.apiUrl}/${orderId}/status`, request);\r\n    }\r\n\r\n    addPayment(orderId: string, payment: AddPaymentRequest): Observable<void> {\r\n        return this.http.post<void>(`${this.apiUrl}/${orderId}/payments`, payment);\r\n    }\r\n\r\n    updateShipping(orderId: string, shipping: UpdateShippingRequest): Observable<void> {\r\n        return this.http.put<void>(`${this.apiUrl}/${orderId}/shipping`, shipping);\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProductEffects",
            "id": "injectable-ProductEffects-a96df442f81df6eba57fd158bf9268df50ac91b42c7f09990cd17868475839b3a1dbee3a2f419dead54652899ce048f54a411fcb655cd9500a7602961c6b63ce",
            "file": "src/app/store/product/product.effects.ts",
            "properties": [
                {
                    "name": "actions$",
                    "defaultValue": "inject(Actions)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "addProduct$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(ProductActions.addProduct),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action =>\r\n                this.productService.createProduct({ ...action.product, categoryId: action.product.category.id }).pipe(\r\n                    map(product => {\r\n                        this.loadingService.hide();\r\n                        return ProductActions.addProductSuccess({ product });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            code: '',\r\n                            message: 'Failed to add product: ' + error.message,\r\n                            severity: 'error'\r\n                        });\r\n                        return of(ProductActions.addProductFailure({ error: error.message }));\r\n                    })\r\n                )\r\n            )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "deleteProduct$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(ProductActions.deleteProduct),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action =>\r\n                this.productService.deleteProduct(action.id).pipe(\r\n                    map(() => {\r\n                        this.loadingService.hide();\r\n                        return ProductActions.deleteProductSuccess({ id: action.id });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            code: '',\r\n                            message: 'Failed to delete product: ' + error.message,\r\n                            severity: 'error'\r\n                        });\r\n                        return of(ProductActions.deleteProductFailure({ error: error.message }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "errorService",
                    "defaultValue": "inject(ErrorService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "loadingService",
                    "defaultValue": "inject(LoadingService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "loadProducts$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(ProductActions.loadProducts),\r\n            tap(() => this.loadingService.show()),\r\n            withLatestFrom(this.store.select(selectProductFilters)),\r\n            mergeMap(([action, stateFilters]) =>\r\n                this.productService.getProducts({ ...stateFilters, ...action.filters }).pipe(\r\n                    map(response => {\r\n                        this.loadingService.hide();\r\n                        return ProductActions.loadProductsSuccess({\r\n                            products: response.items,\r\n                            totalItems: response.totalCount\r\n                        });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            code: '',\r\n                            message: 'Failed to load products: ' + error.message,\r\n                            severity: 'error'\r\n                        });\r\n                        return of(ProductActions.loadProductsFailure({ error: error.message }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "productService",
                    "defaultValue": "inject(ProductService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "updateProduct$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(ProductActions.updateProduct),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action => {\r\n                this.store.dispatch(ProductActions.optimisticUpdateProduct({\r\n                    id: action.id,\r\n                    changes: action.product\r\n                }));\r\n\r\n                return this.productService.updateProduct({ ...action.product, id: action.id }).pipe(\r\n                    map(product => {\r\n                        this.loadingService.hide();\r\n                        return ProductActions.updateProductSuccess({ product });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.store.dispatch(ProductActions.revertOptimisticUpdate());\r\n                        this.errorService.addError({\r\n                            code: '',\r\n                            message: 'Failed to update product: ' + error.message,\r\n                            severity: 'error'\r\n                        });\r\n                        return of(ProductActions.updateProductFailure({ error: error.message }));\r\n                    })\r\n                );\r\n            })\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { of } from 'rxjs';\r\nimport { map, mergeMap, catchError, withLatestFrom, tap } from 'rxjs/operators';\r\nimport { ProductService } from '../../core/services/product.service';\r\nimport { ProductActions } from './product.actions';\r\nimport { selectProductFilters } from './product.selectors';\r\nimport { ErrorService } from '../../core/services/error.service';\r\nimport { LoadingService } from '../../core/services/loading.service';\r\n\r\n@Injectable()\r\nexport class ProductEffects {\r\n    private readonly actions$ = inject(Actions);\r\n    private readonly store = inject(Store);\r\n    private readonly productService = inject(ProductService);\r\n    private readonly errorService = inject(ErrorService);\r\n    private readonly loadingService = inject(LoadingService);\r\n\r\n\r\n    loadProducts$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(ProductActions.loadProducts),\r\n            tap(() => this.loadingService.show()),\r\n            withLatestFrom(this.store.select(selectProductFilters)),\r\n            mergeMap(([action, stateFilters]) =>\r\n                this.productService.getProducts({ ...stateFilters, ...action.filters }).pipe(\r\n                    map(response => {\r\n                        this.loadingService.hide();\r\n                        return ProductActions.loadProductsSuccess({\r\n                            products: response.items,\r\n                            totalItems: response.totalCount\r\n                        });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            code: '',\r\n                            message: 'Failed to load products: ' + error.message,\r\n                            severity: 'error'\r\n                        });\r\n                        return of(ProductActions.loadProductsFailure({ error: error.message }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    });\r\n\r\n    addProduct$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(ProductActions.addProduct),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action =>\r\n                this.productService.createProduct({ ...action.product, categoryId: action.product.category.id }).pipe(\r\n                    map(product => {\r\n                        this.loadingService.hide();\r\n                        return ProductActions.addProductSuccess({ product });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            code: '',\r\n                            message: 'Failed to add product: ' + error.message,\r\n                            severity: 'error'\r\n                        });\r\n                        return of(ProductActions.addProductFailure({ error: error.message }));\r\n                    })\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    updateProduct$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(ProductActions.updateProduct),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action => {\r\n                this.store.dispatch(ProductActions.optimisticUpdateProduct({\r\n                    id: action.id,\r\n                    changes: action.product\r\n                }));\r\n\r\n                return this.productService.updateProduct({ ...action.product, id: action.id }).pipe(\r\n                    map(product => {\r\n                        this.loadingService.hide();\r\n                        return ProductActions.updateProductSuccess({ product });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.store.dispatch(ProductActions.revertOptimisticUpdate());\r\n                        this.errorService.addError({\r\n                            code: '',\r\n                            message: 'Failed to update product: ' + error.message,\r\n                            severity: 'error'\r\n                        });\r\n                        return of(ProductActions.updateProductFailure({ error: error.message }));\r\n                    })\r\n                );\r\n            })\r\n        )\r\n    );\r\n\r\n    deleteProduct$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(ProductActions.deleteProduct),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action =>\r\n                this.productService.deleteProduct(action.id).pipe(\r\n                    map(() => {\r\n                        this.loadingService.hide();\r\n                        return ProductActions.deleteProductSuccess({ id: action.id });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            code: '',\r\n                            message: 'Failed to delete product: ' + error.message,\r\n                            severity: 'error'\r\n                        });\r\n                        return of(ProductActions.deleteProductFailure({ error: error.message }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    });\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProductService",
            "id": "injectable-ProductService-a5faa1792ca5e59314e966292fdbca297344efb2b99d8a9ccf6d1373f7202de293e0239417f8aa93faab7f444b05259a3bff223a37aa0e729d3d6d23bf6f4f80",
            "file": "src/app/core/services/product.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUrls.admin.products",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "blobStorageUrl",
                    "defaultValue": "environment.azure.blobStorage.containerUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "categoriesUrl",
                    "defaultValue": "environment.apiUrls.admin.categories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "productsContainer",
                    "defaultValue": "environment.azure.blobStorage.productsContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "productsSubject",
                    "defaultValue": "new BehaviorSubject<Product[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createProduct",
                    "args": [
                        {
                            "name": "command",
                            "type": "ProductCreateCommand",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates a new product\n",
                    "description": "<p>Creates a new product</p>\n",
                    "jsdoctags": [
                        {
                            "name": "command",
                            "type": "ProductCreateCommand",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteImages",
                    "args": [
                        {
                            "name": "imageIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes product images\n",
                    "description": "<p>Deletes product images</p>\n",
                    "jsdoctags": [
                        {
                            "name": "imageIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes a product\n",
                    "description": "<p>Deletes a product</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateSlug",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerates a URL-friendly slug from a string\n",
                    "description": "<p>Generates a URL-friendly slug from a string</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Category[]>",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets all product categories\n",
                    "description": "<p>Gets all product categories</p>\n"
                },
                {
                    "name": "getFullImageUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnsures image URLs are properly formatted with the base URL if needed\n",
                    "description": "<p>Ensures image URLs are properly formatted with the base URL if needed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets a product by its ID\n",
                    "description": "<p>Gets a product by its ID</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProducts",
                    "args": [
                        {
                            "name": "filters",
                            "type": "ProductFilters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets a list of products based on filter criteria\n",
                    "description": "<p>Gets a list of products based on filter criteria</p>\n",
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "ProductFilters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStats",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DashboardStats>",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets product statistics for dashboard\n",
                    "description": "<p>Gets product statistics for dashboard</p>\n"
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard error handler for HTTP requests\n",
                    "description": "<p>Standard error handler for HTTP requests</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProduct",
                    "args": [
                        {
                            "name": "command",
                            "type": "ProductUpdateCommand",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates an existing product\n",
                    "description": "<p>Updates an existing product</p>\n",
                    "jsdoctags": [
                        {
                            "name": "command",
                            "type": "ProductUpdateCommand",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadImages",
                    "args": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ProductImage[]>",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUploads product images\n",
                    "description": "<p>Uploads product images</p>\n",
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\r\nimport { map, tap, catchError, switchMap, shareReplay } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\nimport { AuthService } from './auth.service';\r\nimport {\r\n    Product,\r\n    ProductFilters,\r\n    ProductCreateCommand,\r\n    ProductUpdateCommand,\r\n    ProductImage,\r\n    ProductVariant,\r\n    mapProductFromApi,\r\n    mapVariantFromApi\r\n} from '../../shared/models/product.model';\r\nimport { Category } from 'src/app/shared/models/category.model';\r\nimport { DashboardStats } from './statistics.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n    private readonly productsSubject = new BehaviorSubject<Product[]>([]);\r\n    private readonly apiUrl = environment.apiUrls.admin.products;\r\n    private readonly categoriesUrl = environment.apiUrls.admin.categories;\r\n    private readonly blobStorageUrl = environment.azure.blobStorage.containerUrl;\r\n    private readonly productsContainer = environment.azure.blobStorage.productsContainer;\r\n\r\n    constructor(\r\n        private readonly http: HttpClient,\r\n        private readonly authService: AuthService\r\n    ) { }\r\n\r\n    // Core CRUD Operations\r\n    /**\r\n     * Gets a product by its ID\r\n     */\r\n    getProduct(id: string): Observable<Product> {\r\n        return this.http.get<any>(`${this.apiUrl}/${id}`).pipe(\r\n            map(product => mapProductFromApi(product, this.getFullImageUrl.bind(this)))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets a list of products based on filter criteria\r\n     */\r\n    getProducts(filters?: ProductFilters): Observable<{\r\n        items: Product[];\r\n        totalCount: number;\r\n        page: number;\r\n        pageSize: number;\r\n        totalPages: number;\r\n    }> {\r\n        return this.http.get<any>(this.apiUrl, { params: filters as any }).pipe(\r\n            map(response => ({\r\n                ...response,\r\n                items: response.items.map((item: any) =>\r\n                    mapProductFromApi(item, this.getFullImageUrl.bind(this)))\r\n            }))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a new product\r\n     */\r\n    createProduct(command: ProductCreateCommand): Observable<Product> {\r\n        // Generate slug if not provided\r\n        if (!command.slug) {\r\n            command.slug = this.generateSlug(command.name);\r\n        }\r\n\r\n        return this.http.post<Product>(this.apiUrl, command).pipe(\r\n            map(product => mapProductFromApi(product, this.getFullImageUrl.bind(this))),\r\n            tap(product => {\r\n                const currentProducts = this.productsSubject.value;\r\n                this.productsSubject.next([...currentProducts, product]);\r\n            }),\r\n            catchError(error => {\r\n                console.error('Error creating product:', error);\r\n                return throwError(() => new Error('Failed to create product: ' + error.message));\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Updates an existing product\r\n     */\r\n    updateProduct(command: ProductUpdateCommand): Observable<Product> {\r\n        return this.http.put<Product>(`${this.apiUrl}/${command.id}`, command).pipe(\r\n            map(product => mapProductFromApi(product, this.getFullImageUrl.bind(this))),\r\n            tap(updatedProduct => {\r\n                const currentProducts = this.productsSubject.value;\r\n                const index = currentProducts.findIndex(p => p.id === updatedProduct.id);\r\n                if (index !== -1) {\r\n                    currentProducts[index] = updatedProduct;\r\n                    this.productsSubject.next([...currentProducts]);\r\n                }\r\n            }),\r\n            catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Deletes a product\r\n     */\r\n    deleteProduct(id: string): Observable<void> {\r\n        return this.http.delete<void>(`${this.apiUrl}/${id}`).pipe(\r\n            tap(() => {\r\n                const currentProducts = this.productsSubject.value;\r\n                this.productsSubject.next(currentProducts.filter(p => p.id !== id));\r\n            }),\r\n            catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n    // Image Operations\r\n    /**\r\n     * Uploads product images\r\n     */\r\n    uploadImages(files: File[]): Observable<ProductImage[]> {\r\n        const formData = new FormData();\r\n        files.forEach(file => formData.append('files', file));\r\n\r\n        return this.authService.getAccessToken().pipe(\r\n            switchMap(token => {\r\n                if (!token) throw new Error('No authentication token available');\r\n\r\n                const headers = new HttpHeaders()\r\n                    .set('Authorization', `Bearer ${token}`);\r\n\r\n                return this.http.post<ProductImage[]>(\r\n                    `${this.apiUrl}/upload-images`,\r\n                    formData,\r\n                    { headers }\r\n                ).pipe(shareReplay(1));\r\n            }),\r\n            catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Deletes product images\r\n     */\r\n    deleteImages(imageIds: string[]): Observable<void> {\r\n        return this.http.post<void>(\r\n            `${this.apiUrl}/delete-images`,\r\n            { imageIds }\r\n        ).pipe(\r\n            catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n    // Category Operations\r\n    /**\r\n     * Gets all product categories\r\n     */\r\n    getCategories(): Observable<Category[]> {\r\n        return this.http.get<Category[]>(this.categoriesUrl).pipe(\r\n            catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n    // Stats Operations\r\n    /**\r\n     * Gets product statistics for dashboard\r\n     */\r\n    getStats(): Observable<DashboardStats> {\r\n        return this.http.get<DashboardStats>(`${this.apiUrl}/stats`).pipe(\r\n            catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n    // Helper methods\r\n    /**\r\n     * Ensures image URLs are properly formatted with the base URL if needed\r\n     */\r\n    getFullImageUrl(url: string): string {\r\n        if (!url) return '';\r\n\r\n        // Check if the URL already contains http:// or https:// protocol\r\n        if (url.startsWith('http://') || url.startsWith('https://')) {\r\n            return url;\r\n        }\r\n\r\n        // If it's just a filename, prepend the blob storage URL and container\r\n        return `${this.blobStorageUrl}/${this.productsContainer}/${url}`;\r\n    }\r\n\r\n    /**\r\n     * Generates a URL-friendly slug from a string\r\n     */\r\n    private generateSlug(name: string): string {\r\n        return name\r\n            .toLowerCase()\r\n            .replace(/[^a-z0-9]+/g, '-')\r\n            .replace(/(^-|-$)/g, '');\r\n    }\r\n\r\n    /**\r\n     * Standard error handler for HTTP requests\r\n     */\r\n    private handleError(error: any): Observable<never> {\r\n        console.error('An error occurred:', error);\r\n        return throwError(() => error);\r\n    }\r\n\r\n    // Observable for components to subscribe to\r\n    get products$(): Observable<Product[]> {\r\n        return this.productsSubject.asObservable();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "products$": {
                    "name": "products$",
                    "getSignature": {
                        "name": "products$",
                        "type": "",
                        "returnType": "Observable<Product[]>",
                        "line": 209
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProductTypeService",
            "id": "injectable-ProductTypeService-4c1a07eb362075c268865b9f99580e7781776935baf144c5a7b7231ddb8cb14b10dda42712c2a66e1e186c5bab56f54f20efae8d1c37b99c561060d0c241749b",
            "file": "src/app/core/services/product-type.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "`${environment.apiUrls.admin.products}/types`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "cachedProductTypes",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ProductType[]> | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lastCacheUpdate",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "cacheExpired",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "generateFormConfigFromAttributes",
                    "args": [
                        {
                            "name": "attributes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormlyFieldConfig[]",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "attributes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAttributeFieldsByType",
                    "args": [
                        {
                            "name": "typeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<FormlyFieldConfig[]>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "typeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductTypeById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ProductType | undefined>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductTypes",
                    "args": [
                        {
                            "name": "forceRefresh",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ProductType[]>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "forceRefresh",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStaticProductTypes",
                    "args": [],
                    "optional": false,
                    "returnType": "ProductType[]",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, shareReplay, tap } from 'rxjs/operators';\r\nimport { FormlyFieldConfig } from '@ngx-formly/core';\r\nimport { ProductType, ProductTypeAttribute } from '../../shared/models/product-type.model';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ProductTypeService {\r\n    private readonly apiUrl = `${environment.apiUrls.admin.products}/types`;\r\n    private cachedProductTypes: Observable<ProductType[]> | null = null;\r\n    private lastCacheUpdate: number = 0; // Add this line\r\n\r\n    constructor(private readonly http: HttpClient) { } // Add readonly here\r\n\r\n    getProductTypes(forceRefresh: boolean = false): Observable<ProductType[]> {\r\n        if (!this.cachedProductTypes || forceRefresh || this.cacheExpired()) {\r\n            this.cachedProductTypes = this.http.get<ProductType[]>(this.apiUrl, {\r\n                headers: {\r\n                    'api-version': '1.0'\r\n                }\r\n            }).pipe(\r\n                map(types => types.map(type => ({\r\n                    ...type,\r\n                    formConfig: this.generateFormConfigFromAttributes(type.attributes)\r\n                }))),\r\n                tap(() => {\r\n                    this.lastCacheUpdate = Date.now(); // This line will now work\r\n                }),\r\n                catchError(error => {\r\n                    console.error('Error fetching product types:', error);\r\n                    return of(this.getStaticProductTypes());\r\n                }),\r\n                shareReplay(1)\r\n            );\r\n        }\r\n        return this.cachedProductTypes;\r\n    }\r\n\r\n    private cacheExpired(): boolean {\r\n        const now = Date.now();\r\n        const cacheLifetime = environment.cache.productTypesTTL || 3600000; // 1 hour default\r\n        // Check if lastCacheUpdate is 0 (never updated) or if the cache lifetime has passed\r\n        return this.lastCacheUpdate === 0 || (this.lastCacheUpdate + cacheLifetime < now); // This line will now work\r\n    }\r\n\r\n    getProductTypeById(id: string): Observable<ProductType | undefined> {\r\n        return this.getProductTypes().pipe(\r\n            map(types => types.find(type => type.id === id))\r\n        );\r\n    }\r\n\r\n    getAttributeFieldsByType(typeId: string): Observable<FormlyFieldConfig[]> {\r\n        return this.getProductTypeById(typeId).pipe(\r\n            map(type => type?.formConfig || [])\r\n        );\r\n    }\r\n\r\n    // For development/fallback use\r\n    private getStaticProductTypes(): ProductType[] {\r\n        type AttributeType = ProductTypeAttribute['type'];\r\n\r\n        return [\r\n            {\r\n                id: 'clothing',\r\n                name: 'Clothing',\r\n                description: 'Apparel items including shirts, pants, dresses, etc.',\r\n                icon: 'checkroom',\r\n                attributes: [\r\n                    {\r\n                        id: 'size',\r\n                        name: 'Sizes',\r\n                        type: 'multiselect' as AttributeType,\r\n                        isRequired: true,\r\n                        options: [\r\n                            { label: 'One size', value: 'one_size' },\r\n                            { label: 'XS', value: 'XS' },\r\n                            { label: 'S', value: 'S' },\r\n                            { label: 'M', value: 'M' },\r\n                            { label: 'L', value: 'L' },\r\n                            { label: 'XL', value: 'XL' },\r\n                            { label: 'XXL', value: 'XXL' }\r\n                        ],\r\n                        displayOrder: 1,\r\n                        isFilterable: true,\r\n                        isComparable: false\r\n                    },\r\n                    {\r\n                        id: 'color',\r\n                        name: 'Colors',\r\n                        type: 'color' as AttributeType,\r\n                        isRequired: true,\r\n                        displayOrder: 2,\r\n                        isFilterable: true,\r\n                        isComparable: false\r\n                    },\r\n                    {\r\n                        id: 'material',\r\n                        name: 'Material',\r\n                        type: 'text' as AttributeType,\r\n                        isRequired: false,\r\n                        displayOrder: 3,\r\n                        isFilterable: true,\r\n                        isComparable: true\r\n                    },\r\n                    {\r\n                        id: 'gender',\r\n                        name: 'Gender',\r\n                        type: 'select' as AttributeType,\r\n                        isRequired: true,\r\n                        options: [\r\n                            { label: 'Men', value: 'men' },\r\n                            { label: 'Women', value: 'women' },\r\n                            { label: 'Unisex', value: 'unisex' },\r\n                            { label: 'Boys', value: 'boys' },\r\n                            { label: 'Girls', value: 'girls' }\r\n                        ],\r\n                        displayOrder: 4,\r\n                        isFilterable: true,\r\n                        isComparable: false\r\n                    }\r\n                ],\r\n                formConfig: [] // Will be generated dynamically based on attributes\r\n            },\r\n            {\r\n                id: 'electronics',\r\n                name: 'Electronics',\r\n                description: 'Electronic devices and accessories',\r\n                icon: 'devices',\r\n                attributes: [\r\n                    {\r\n                        id: 'brand',\r\n                        name: 'Brand',\r\n                        type: 'text' as AttributeType,\r\n                        isRequired: true,\r\n                        displayOrder: 1,\r\n                        isFilterable: true,\r\n                        isComparable: true\r\n                    },\r\n                    {\r\n                        id: 'model',\r\n                        name: 'Model',\r\n                        type: 'text' as AttributeType,\r\n                        isRequired: true,\r\n                        displayOrder: 2,\r\n                        isFilterable: true,\r\n                        isComparable: true\r\n                    },\r\n                    {\r\n                        id: 'warranty',\r\n                        name: 'Warranty Period (months)',\r\n                        type: 'number' as AttributeType,\r\n                        isRequired: false,\r\n                        displayOrder: 3,\r\n                        isFilterable: true,\r\n                        isComparable: true\r\n                    }\r\n                ],\r\n                formConfig: [] // Will be generated dynamically based on attributes\r\n            },\r\n            {\r\n                id: 'books',\r\n                name: 'Books',\r\n                description: 'Books, publications, and literature',\r\n                icon: 'menu_book',\r\n                attributes: [\r\n                    {\r\n                        id: 'author',\r\n                        name: 'Author',\r\n                        type: 'text' as AttributeType,\r\n                        isRequired: true,\r\n                        displayOrder: 1,\r\n                        isFilterable: true,\r\n                        isComparable: false\r\n                    },\r\n                    {\r\n                        id: 'isbn',\r\n                        name: 'ISBN',\r\n                        type: 'text' as AttributeType,\r\n                        isRequired: true,\r\n                        displayOrder: 2,\r\n                        isFilterable: false,\r\n                        isComparable: false,\r\n                        validation: {\r\n                            pattern: '^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$',\r\n                            message: 'Please enter a valid ISBN'\r\n                        }\r\n                    },\r\n                    {\r\n                        id: 'pages',\r\n                        name: 'Page Count',\r\n                        type: 'number' as AttributeType,\r\n                        isRequired: false,\r\n                        displayOrder: 3,\r\n                        isFilterable: false,\r\n                        isComparable: true\r\n                    }\r\n                ],\r\n                formConfig: [] // Will be generated dynamically based on attributes\r\n            }\r\n        ].map(type => ({\r\n            ...type,\r\n            formConfig: this.generateFormConfigFromAttributes(type.attributes)\r\n        }));\r\n    }\r\n\r\n    // Dynamically converts ProductTypeAttributes to FormlyFieldConfig objects\r\n    private generateFormConfigFromAttributes(attributes: any[]): FormlyFieldConfig[] {\r\n        return attributes.map(attr => {\r\n            const baseField: FormlyFieldConfig = {\r\n                key: attr.id,\r\n                props: {\r\n                    label: attr.name,\r\n                    description: attr.description,\r\n                    required: attr.isRequired,\r\n                    options: attr.options\r\n                }\r\n            };\r\n\r\n            // Set field type based on attribute type\r\n            switch (attr.type) {\r\n                case 'text':\r\n                    baseField.type = 'input';\r\n                    break;\r\n                case 'number':\r\n                    baseField.type = 'input';\r\n                    baseField.props = {\r\n                        ...baseField.props,\r\n                        type: 'number',\r\n                        min: attr.validation?.min,\r\n                        max: attr.validation?.max\r\n                    };\r\n                    break;\r\n                case 'boolean':\r\n                    baseField.type = 'checkbox';\r\n                    break;\r\n                case 'select':\r\n                    baseField.type = 'select';\r\n                    break;\r\n                case 'multiselect':\r\n                    baseField.type = 'select';\r\n                    baseField.props = {\r\n                        ...baseField.props,\r\n                        multiple: true\r\n                    };\r\n                    break;\r\n                case 'color':\r\n                    baseField.type = 'color-picker'; // Custom field type\r\n                    break;\r\n                case 'size':\r\n                    baseField.type = 'size-matrix'; // Custom field type\r\n                    break;\r\n                case 'dimension':\r\n                    baseField.type = 'dimension'; // Custom field type\r\n                    break;\r\n                default:\r\n                    baseField.type = 'input';\r\n            }\r\n\r\n            // Add validation if provided\r\n            if (attr.validation) {\r\n                baseField.validation = {\r\n                    messages: {}\r\n                };\r\n\r\n                if (attr.validation.pattern) {\r\n                    baseField.validators = {\r\n                        pattern: {\r\n                            expression: (c: any) => !c.value || new RegExp(attr.validation.pattern).test(c.value),\r\n                            message: attr.validation.message || `${attr.name} is not in a valid format`\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n\r\n            return baseField;\r\n        });\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SignalRFactoryService",
            "id": "injectable-SignalRFactoryService-2a3d3d48b4d40080ed575940775bd0358bb43ea9f9d88c95289e7e541184907c4a4ea5de27b254a20249218d0c41ebab6746d69ff2bb483060edb364b87ef0c6",
            "file": "src/app/core/services/signalr-factory.service.ts",
            "properties": [
                {
                    "name": "hubConnections",
                    "defaultValue": "new Map<string, BehaviorSubject<{\r\n        connection: signalR.HubConnection;\r\n        status: 'connected' | 'disconnected' | 'connecting' | 'error';\r\n    }>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createHubConnection",
                    "args": [
                        {
                            "name": "hubUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "signalR.HubConnection",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "hubUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConnectionStatus",
                    "args": [
                        {
                            "name": "hubUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hubUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHubConnection",
                    "args": [
                        {
                            "name": "hubUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<signalR.HubConnection>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hubUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeConnection",
                    "args": [
                        {
                            "name": "hubUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "hubUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, BehaviorSubject, of, throwError } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport * as signalR from '@microsoft/signalr';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SignalRFactoryService {\r\n    private hubConnections = new Map<string, BehaviorSubject<{\r\n        connection: signalR.HubConnection;\r\n        status: 'connected' | 'disconnected' | 'connecting' | 'error';\r\n    }>>();\r\n\r\n    constructor(private authService: AuthService) { }\r\n\r\n    getHubConnection(hubUrl: string): Observable<signalR.HubConnection> {\r\n        // Create a subject for this hub if it doesn't exist\r\n        if (!this.hubConnections.has(hubUrl)) {\r\n            const connectionSubject = new BehaviorSubject<{\r\n                connection: signalR.HubConnection;\r\n                status: 'connected' | 'disconnected' | 'connecting' | 'error';\r\n            }>({\r\n                connection: this.createHubConnection(hubUrl),\r\n                status: 'disconnected'\r\n            });\r\n\r\n            this.hubConnections.set(hubUrl, connectionSubject);\r\n            this.initializeConnection(hubUrl);\r\n        }\r\n\r\n        // Return the connection\r\n        return this.hubConnections.get(hubUrl)!.pipe(\r\n            map(info => {\r\n                if (info.status === 'error') {\r\n                    throw new Error(`Failed to connect to ${hubUrl}`);\r\n                }\r\n                return info.connection;\r\n            })\r\n        );\r\n    }\r\n\r\n    getConnectionStatus(hubUrl: string): Observable<string> {\r\n        if (!this.hubConnections.has(hubUrl)) {\r\n            return of('not_initialized');\r\n        }\r\n\r\n        return this.hubConnections.get(hubUrl)!.pipe(\r\n            map(info => info.status)\r\n        );\r\n    }\r\n\r\n    private createHubConnection(hubUrl: string): signalR.HubConnection {\r\n        return new signalR.HubConnectionBuilder()\r\n            .withUrl(hubUrl, {\r\n                accessTokenFactory: () => '' // Will be set later\r\n            })\r\n            .withAutomaticReconnect()\r\n            .build();\r\n    }\r\n\r\n    private initializeConnection(hubUrl: string): void {\r\n        const subject = this.hubConnections.get(hubUrl)!;\r\n\r\n        // Update status to connecting\r\n        subject.next({\r\n            ...subject.value,\r\n            status: 'connecting'\r\n        });\r\n\r\n        // Get auth token and connect\r\n        this.authService.getAccessToken().subscribe({\r\n            next: token => {\r\n                if (!token) {\r\n                    subject.next({\r\n                        ...subject.value,\r\n                        status: 'error'\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                // Set the token factory\r\n                const connection = subject.value.connection;\r\n                (connection as any).httpConnectionOptions = {\r\n                    ...(connection as any).httpConnectionOptions,\r\n                    accessTokenFactory: () => token\r\n                };\r\n\r\n                // Start the connection\r\n                connection.start()\r\n                    .then(() => {\r\n                        console.log(`Connected to ${hubUrl}`);\r\n                        subject.next({\r\n                            connection,\r\n                            status: 'connected'\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(`Error connecting to ${hubUrl}:`, err);\r\n                        subject.next({\r\n                            ...subject.value,\r\n                            status: 'error'\r\n                        });\r\n                    });\r\n            },\r\n            error: err => {\r\n                console.error(`Error getting auth token for ${hubUrl}:`, err);\r\n                subject.next({\r\n                    ...subject.value,\r\n                    status: 'error'\r\n                });\r\n            }\r\n        });\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SignalRService",
            "id": "injectable-SignalRService-921d43707c6be1a81af3a621b00cde5a8963c624a99b439db7376aadec54c579e1381ff6bd148d7a2a863faaa2369a90b2834cfc022f6370d94e883aae578f67",
            "file": "src/app/core/services/signalr.service.ts",
            "properties": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "hubConnection",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "signalR.HubConnection | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "messages$",
                    "defaultValue": "new BehaviorSubject<string[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createConnection",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initConnection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sendMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "start",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\nimport * as signalR from '@microsoft/signalr';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SignalRService {\r\n  private hubConnection: signalR.HubConnection | null = null;\r\n  public messages$ = new BehaviorSubject<string[]>([]);\r\n  private readonly authService = inject(AuthService);\r\n\r\n  constructor() {\r\n    this.initConnection();\r\n  }\r\n\r\n  private initConnection() {\r\n    this.authService.getAccessToken().subscribe(token => {\r\n      if (token) {\r\n        this.createConnection(token);\r\n        this.start();\r\n      } else {\r\n        console.warn('No auth token available for SignalR connection');\r\n      }\r\n    });\r\n\r\n    // Listen for auth state changes to recreate connection if needed\r\n    this.authService.authState$.subscribe(state => {\r\n      if (state.isAuthenticated && state.accessToken && (!this.hubConnection || this.hubConnection.state === signalR.HubConnectionState.Disconnected)) {\r\n        this.createConnection(state.accessToken);\r\n        this.start();\r\n      }\r\n    });\r\n  }\r\n\r\n  private createConnection(token: string) {\r\n    // Close existing connection if open\r\n    if (this.hubConnection) {\r\n      this.hubConnection.off('ReceiveMessage');\r\n      this.hubConnection.stop().catch(err => console.error('Error stopping connection:', err));\r\n    }\r\n\r\n    // Create new connection with auth token\r\n    this.hubConnection = new signalR.HubConnectionBuilder()\r\n      .withUrl('https://localhost:7048/hubs/notification', {\r\n        accessTokenFactory: () => token\r\n      })\r\n      .withAutomaticReconnect()\r\n      .build();\r\n\r\n    // Set up message handler\r\n    this.hubConnection.on('ReceiveMessage', (message: string) => {\r\n      const currentMessages = this.messages$.value;\r\n      this.messages$.next([...currentMessages, message]);\r\n    });\r\n  }\r\n\r\n  private async start() {\r\n    if (!this.hubConnection) {\r\n      console.error('Cannot start SignalR: No connection created');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await this.hubConnection.start();\r\n      console.log('SignalR Connected!');\r\n    } catch (err) {\r\n      console.error('SignalR Connection Error: ', err);\r\n      setTimeout(() => this.start(), 5000);\r\n    }\r\n  }\r\n\r\n  async sendMessage(message: string) {\r\n    if (!this.hubConnection || this.hubConnection.state !== signalR.HubConnectionState.Connected) {\r\n      console.error('Cannot send message: SignalR connection not established');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await this.hubConnection.invoke('SendMessage', message);\r\n    } catch (err) {\r\n      console.error('Error sending message: ', err);\r\n    }\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "StatisticsService",
            "id": "injectable-StatisticsService-499fa72c119ac6db5c93eb9f080b4e711b86e287801abd1a85950ef4defb009e177828e0c03879bd036a112f18c824aa5f43387d267a8a8fef319883490fe95e",
            "file": "src/app/core/services/statistics.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "`${environment.apiUrls.admin.baseUrl}/statistics`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "categoryCount",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mockStats",
                    "defaultValue": "{\r\n        totalProducts: 145,\r\n        lowStockCount: 12,\r\n        totalCategories: 8,\r\n        activeProductCount: 132,\r\n        totalRevenue: 24680,\r\n        revenueChange: 12.5,\r\n        totalOrders: 389,\r\n        ordersChange: 8.3\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DashboardStats",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCategoryCount",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the count of categories\n",
                    "description": "<p>Get the count of categories</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2435,
                                "end": 2442,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Number of categories</p>\n"
                        }
                    ]
                },
                {
                    "name": "getLowStockProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any[]>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet products with low stock\n",
                    "description": "<p>Get products with low stock</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2606,
                                "end": 2613,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable of products with low stock</p>\n"
                        }
                    ]
                },
                {
                    "name": "getRecentActivity",
                    "args": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any[]>",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet recent activity items\n",
                    "description": "<p>Get recent activity items</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4439,
                                "end": 4444,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "limit"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5",
                            "tagName": {
                                "pos": 4433,
                                "end": 4438,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Maximum number of activity items to return</li>\n</ul>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4499,
                                "end": 4506,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable of recent activity items</p>\n"
                        }
                    ]
                },
                {
                    "name": "getStatistics",
                    "args": [
                        {
                            "name": "timeRange",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'day'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DashboardStats>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet statistics data from the API\n",
                    "description": "<p>Get statistics data from the API</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1161,
                                "end": 1170,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "timeRange"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'day'",
                            "tagName": {
                                "pos": 1155,
                                "end": 1160,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Optional time range filter (day, week, month)</li>\n</ul>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1228,
                                "end": 1235,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable of statistics data</p>\n"
                        }
                    ]
                },
                {
                    "name": "getTopProducts",
                    "args": [
                        {
                            "name": "metric",
                            "type": "\"sales\" | \"revenue\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'sales'"
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any[]>",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet top selling products\n",
                    "description": "<p>Get top selling products</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3152,
                                "end": 3158,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "metric"
                            },
                            "type": "\"sales\" | \"revenue\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'sales'",
                            "tagName": {
                                "pos": 3146,
                                "end": 3151,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The metric to sort by (sales or revenue)</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 3217,
                                "end": 3222,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "limit"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5",
                            "tagName": {
                                "pos": 3211,
                                "end": 3216,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Maximum number of products to return</li>\n</ul>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3271,
                                "end": 3278,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable of top products</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\n\r\nexport interface DashboardStats {\r\n    totalProducts: number;\r\n    lowStockCount: number;\r\n    totalCategories: number;\r\n    activeProductCount: number;\r\n    totalRevenue?: number;\r\n    revenueChange?: number;\r\n    totalOrders?: number;\r\n    ordersChange?: number;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class StatisticsService {\r\n    private apiUrl = `${environment.apiUrls.admin.baseUrl}/statistics`;\r\n\r\n    // Mock data for development/demo purposes\r\n    private mockStats: DashboardStats = {\r\n        totalProducts: 145,\r\n        lowStockCount: 12,\r\n        totalCategories: 8,\r\n        activeProductCount: 132,\r\n        totalRevenue: 24680,\r\n        revenueChange: 12.5,\r\n        totalOrders: 389,\r\n        ordersChange: 8.3\r\n    };\r\n\r\n    private categoryCount = 8;\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    /**\r\n     * Get statistics data from the API\r\n     * @param timeRange - Optional time range filter (day, week, month)\r\n     * @returns Observable of statistics data\r\n     */\r\n    getStatistics(timeRange: string = 'day'): Observable<DashboardStats> {\r\n        // In a production environment, you would use the HTTP client to fetch data from your API\r\n        // return this.http.get<DashboardStats>(`${this.apiUrl}?timeRange=${timeRange}`)\r\n        //   .pipe(\r\n        //     catchError(error => {\r\n        //       console.error('Error fetching statistics:', error);\r\n        //       return of(this.mockStats);\r\n        //     })\r\n        //   );\r\n\r\n        // For demo purposes, return mock data with slight variations based on the time range\r\n        const mockVariation = timeRange === 'day' ? 1 :\r\n            timeRange === 'week' ? 1.5 : 2;\r\n\r\n        return of({\r\n            ...this.mockStats,\r\n            totalRevenue: Math.round((this.mockStats.totalRevenue ?? 0) * mockVariation),\r\n            totalOrders: Math.round((this.mockStats.totalOrders ?? 0) * mockVariation),\r\n            revenueChange: (this.mockStats.revenueChange ?? 0) * (mockVariation * 0.8),\r\n            ordersChange: (this.mockStats.ordersChange ?? 0) * (mockVariation * 0.9)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the count of categories\r\n     * @returns Number of categories\r\n     */\r\n    getCategoryCount(): number {\r\n        return this.categoryCount;\r\n    }\r\n\r\n    /**\r\n     * Get products with low stock\r\n     * @returns Observable of products with low stock\r\n     */\r\n    getLowStockProducts(): Observable<any[]> {\r\n        // In production, use:\r\n        // return this.http.get<any[]>(`${this.apiUrl}/low-stock`);\r\n\r\n        // Mock data\r\n        return of([\r\n            { id: 1, name: 'Wireless Headphones', stock: 3, minStock: 5 },\r\n            { id: 2, name: 'Smart Watch', stock: 2, minStock: 10 },\r\n            { id: 3, name: 'Bluetooth Speaker', stock: 4, minStock: 8 }\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Get top selling products\r\n     * @param metric - The metric to sort by (sales or revenue)\r\n     * @param limit - Maximum number of products to return\r\n     * @returns Observable of top products\r\n     */\r\n    getTopProducts(metric: 'sales' | 'revenue' = 'sales', limit: number = 5): Observable<any[]> {\r\n        // In production, use:\r\n        // return this.http.get<any[]>(`${this.apiUrl}/top-products?metric=${metric}&limit=${limit}`);\r\n\r\n        // Mock data\r\n        const products = [\r\n            { id: 1, name: 'Wireless Headphones', category: 'Electronics', sales: 145, revenue: 1245.50, change: 12.5 },\r\n            { id: 2, name: 'Smart Watch', category: 'Wearables', sales: 98, revenue: 945.20, change: 8.3 },\r\n            { id: 3, name: 'Smartphone Case', category: 'Accessories', sales: 312, revenue: 625.40, change: -2.1 },\r\n            { id: 4, name: 'USB-C Cable', category: 'Accessories', sales: 254, revenue: 510.30, change: 5.2 },\r\n            { id: 5, name: 'Bluetooth Speaker', category: 'Electronics', sales: 87, revenue: 870.00, change: 3.7 }\r\n        ];\r\n\r\n        // Sort by the specified metric\r\n        const sortedProducts = [...products].sort((a, b) => b[metric] - a[metric]);\r\n\r\n        return of(sortedProducts.slice(0, limit));\r\n    }\r\n\r\n    /**\r\n     * Get recent activity items\r\n     * @param limit - Maximum number of activity items to return\r\n     * @returns Observable of recent activity items\r\n     */\r\n    getRecentActivity(limit: number = 5): Observable<any[]> {\r\n        // In production, use:\r\n        // return this.http.get<any[]>(`${this.apiUrl}/recent-activity?limit=${limit}`);\r\n\r\n        // Mock data\r\n        const activities = [\r\n            { id: 1, type: 'product_add', title: 'New product added: Wireless Headphones', user: 'John Smith', timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000) },\r\n            { id: 2, type: 'order_ship', title: 'Order #12345 shipped', description: 'Shipped to Jane Doe', timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000) },\r\n            { id: 3, type: 'stock_update', title: 'Product stock updated: Smart Watch', user: 'Sarah Connor', timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000) },\r\n            { id: 4, type: 'category_add', title: 'New category added: Accessories', user: 'John Smith', timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) }\r\n        ];\r\n\r\n        return of(activities.slice(0, limit));\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "StockEffects",
            "id": "injectable-StockEffects-456811e3e41a2ba0e64b06307d0500c4dbb5987766d5c367bbce34a4e6ae9407520b220d8422c37edbcefd7996a2291b37ba3837610304384b8e6227109a5fe2",
            "file": "src/app/store/stock/stock.effects.ts",
            "properties": [
                {
                    "name": "actions$",
                    "defaultValue": "inject(Actions)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "adjustStock$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(StockActions.adjustStock),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action =>\r\n                this.stockService.adjustStock(action.adjustment).pipe(\r\n                    mergeMap(() =>\r\n                        this.stockService.getStockLevel(action.adjustment.productId).pipe(\r\n                            map(stock => {\r\n                                this.loadingService.hide();\r\n                                return StockActions.adjustStockSuccess({ stock });\r\n                            })\r\n                        )\r\n                    ),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            message: 'Failed to adjust stock',\r\n                            code: error.code || 'ADJUST_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(StockActions.adjustStockFailure({\r\n                            error: error.message || 'Failed to adjust stock'\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "errorService",
                    "defaultValue": "inject(ErrorService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "loadingService",
                    "defaultValue": "inject(LoadingService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "loadLowStockItems$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(StockActions.loadLowStockItems),\r\n            mergeMap(() =>\r\n                this.stockService.getLowStockItems().pipe(\r\n                    map(items => StockActions.loadLowStockItemsSuccess({ items })),\r\n                    catchError(error => of(StockActions.loadLowStockItemsFailure({\r\n                        error: error.message || 'Failed to load low stock items'\r\n                    })))\r\n                )\r\n            )\r\n        );\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "loadOutOfStockItems$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(StockActions.loadOutOfStockItems),\r\n            mergeMap(() =>\r\n                this.stockService.getOutOfStockItems().pipe(\r\n                    map(items => StockActions.loadOutOfStockItemsSuccess({ items })),\r\n                    catchError(error => of(StockActions.loadOutOfStockItemsFailure({\r\n                        error: error.message || 'Failed to load out of stock items'\r\n                    })))\r\n                )\r\n            )\r\n        );\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "loadStock$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(StockActions.loadStock),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action =>\r\n                this.stockService.getStockLevel(action.productId).pipe(\r\n                    map(stock => {\r\n                        this.loadingService.hide();\r\n                        return StockActions.loadStockSuccess({ stock });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            message: 'Failed to load stock information',\r\n                            code: error.code || 'LOAD_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(StockActions.loadStockFailure({\r\n                            error: error.message || 'Failed to load stock information'\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "stockService",
                    "defaultValue": "inject(StockService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { of } from 'rxjs';\r\nimport { map, mergeMap, catchError, tap } from 'rxjs/operators';\r\nimport { StockService } from 'src/app/core/services/stock.service';\r\nimport { StockActions } from './stock.actions';\r\nimport { ErrorService } from '../../core/services/error.service';\r\nimport { LoadingService } from '../../core/services/loading.service';\r\n\r\n\r\n@Injectable()\r\nexport class StockEffects {\r\n\r\n    private readonly actions$ = inject(Actions);\r\n    private readonly stockService = inject(StockService);\r\n    private readonly errorService = inject(ErrorService);\r\n    private readonly loadingService = inject(LoadingService);\r\n    private readonly store = inject(Store)\r\n\r\n    loadStock$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(StockActions.loadStock),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action =>\r\n                this.stockService.getStockLevel(action.productId).pipe(\r\n                    map(stock => {\r\n                        this.loadingService.hide();\r\n                        return StockActions.loadStockSuccess({ stock });\r\n                    }),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            message: 'Failed to load stock information',\r\n                            code: error.code || 'LOAD_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(StockActions.loadStockFailure({\r\n                            error: error.message || 'Failed to load stock information'\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    });\r\n\r\n    adjustStock$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(StockActions.adjustStock),\r\n            tap(() => this.loadingService.show()),\r\n            mergeMap(action =>\r\n                this.stockService.adjustStock(action.adjustment).pipe(\r\n                    mergeMap(() =>\r\n                        this.stockService.getStockLevel(action.adjustment.productId).pipe(\r\n                            map(stock => {\r\n                                this.loadingService.hide();\r\n                                return StockActions.adjustStockSuccess({ stock });\r\n                            })\r\n                        )\r\n                    ),\r\n                    catchError(error => {\r\n                        this.loadingService.hide();\r\n                        this.errorService.addError({\r\n                            message: 'Failed to adjust stock',\r\n                            code: error.code || 'ADJUST_ERROR',\r\n                            severity: 'error'\r\n                        });\r\n                        return of(StockActions.adjustStockFailure({\r\n                            error: error.message || 'Failed to adjust stock'\r\n                        }));\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    });\r\n\r\n    loadLowStockItems$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(StockActions.loadLowStockItems),\r\n            mergeMap(() =>\r\n                this.stockService.getLowStockItems().pipe(\r\n                    map(items => StockActions.loadLowStockItemsSuccess({ items })),\r\n                    catchError(error => of(StockActions.loadLowStockItemsFailure({\r\n                        error: error.message || 'Failed to load low stock items'\r\n                    })))\r\n                )\r\n            )\r\n        );\r\n    });\r\n\r\n    loadOutOfStockItems$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(StockActions.loadOutOfStockItems),\r\n            mergeMap(() =>\r\n                this.stockService.getOutOfStockItems().pipe(\r\n                    map(items => StockActions.loadOutOfStockItemsSuccess({ items })),\r\n                    catchError(error => of(StockActions.loadOutOfStockItemsFailure({\r\n                        error: error.message || 'Failed to load out of stock items'\r\n                    })))\r\n                )\r\n            )\r\n        );\r\n    });\r\n}",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "StockService",
            "id": "injectable-StockService-1c68e56645d3cd95eda8b0ee3c1a4cec6d669b409a82baac0025cf1f83fbe71c576c6489cc9777481d4137e6d8805b0c87777a6387ef0a8f55fc2f44bd24fc9c",
            "file": "src/app/core/services/stock.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUrls.admin.stock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "connectionStatus$",
                    "defaultValue": "this.connectionStatusSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "connectionStatusSubject",
                    "defaultValue": "new BehaviorSubject<string>('disconnected')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "connectionSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hubConnection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "signalR.HubConnection",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "pollingSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "stockHubUrl",
                    "defaultValue": "environment.signalR.stock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "adjustStock",
                    "args": [
                        {
                            "name": "adjustment",
                            "type": "StockAdjustment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "adjustment",
                            "type": "StockAdjustment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "batchAdjustStock",
                    "args": [
                        {
                            "name": "adjustments",
                            "type": "BatchStockAdjustment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "adjustments",
                            "type": "BatchStockAdjustment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createConnection",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLowStockItems",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<StockItem[]>",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getOutOfStockItems",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<StockItem[]>",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getStockLevel",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StockItem>",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeSignalR",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mapStockItemFromApi",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "StockItem",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshAllStockData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setupHubListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "startPolling",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "stopPolling",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscribeToProductStock",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unsubscribeFromProductStock",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable, OnDestroy } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, Subscription, of, throwError, timer } from 'rxjs';\r\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\nimport * as signalR from '@microsoft/signalr';\r\nimport { Store } from '@ngrx/store';\r\nimport { StockActions } from '../../store/stock/stock.actions';\r\nimport { BatchStockAdjustment, StockAdjustment, StockItem } from 'src/app/shared/models/stock.model';\r\nimport { SignalRFactoryService } from './signalr-factory.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class StockService implements OnDestroy {\r\n    private readonly apiUrl = environment.apiUrls.admin.stock;\r\n    private readonly stockHubUrl = environment.signalR.stock;\r\n    private readonly authService = inject(AuthService); // Inject AuthService\r\n    private hubConnection?: signalR.HubConnection;\r\n    private connectionSubscription?: Subscription;\r\n    private pollingSubscription?: Subscription;\r\n\r\n    // Connection status observable\r\n    private readonly connectionStatusSubject = new BehaviorSubject<string>('disconnected');\r\n    public readonly connectionStatus$ = this.connectionStatusSubject.asObservable();\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private store: Store,\r\n        private signalRFactory: SignalRFactoryService\r\n    ) {\r\n        this.initializeSignalR();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.connectionSubscription) {\r\n            this.connectionSubscription.unsubscribe();\r\n        }\r\n        this.stopPolling();\r\n    }\r\n    private initializeSignalR() {\r\n        this.authService.getAccessToken().subscribe(token => {\r\n            if (!token) {\r\n                console.warn('No auth token available for Stock SignalR connection');\r\n                return;\r\n            }\r\n\r\n            this.hubConnection = new signalR.HubConnectionBuilder()\r\n                .withUrl(environment.signalR.category, {\r\n                    accessTokenFactory: () => token\r\n                })\r\n                .withAutomaticReconnect()\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(err => console.error('Error starting SignalR:', err));\r\n\r\n\r\n        });\r\n        // Recreate connection when auth state changes\r\n        this.authService.authState$.subscribe(state => {\r\n            if (state.isAuthenticated && state.accessToken && (!this.hubConnection || this.hubConnection.state === signalR.HubConnectionState.Disconnected)) {\r\n                this.createConnection(state.accessToken);\r\n            }\r\n        });\r\n    }\r\n    private createConnection(token: string) {\r\n        // Close existing connection if open\r\n        if (this.hubConnection) {\r\n            this.hubConnection.stop().catch(err => console.error('Error stopping connection:', err));\r\n        }\r\n\r\n        this.hubConnection = new signalR.HubConnectionBuilder()\r\n            .withUrl(environment.signalR.stock, {\r\n                accessTokenFactory: () => token\r\n            })\r\n            .withAutomaticReconnect()\r\n            .build();\r\n\r\n        this.setupHubListeners();\r\n        this.hubConnection.start().catch(err => console.error('Error starting SignalR:', err));\r\n    }\r\n    // private initializeSignalR(): void {\r\n    //     // Get connection from factory\r\n    //     this.connectionSubscription = this.signalRFactory.getHubConnection(this.stockHubUrl)\r\n    //         .pipe(\r\n    //             tap(connection => {\r\n    //                 this.hubConnection = connection;\r\n    //                 this.setupHubListeners();\r\n    //                 this.connectionStatusSubject.next('connected');\r\n    //                 this.stopPolling(); // Stop polling when connected\r\n    //             }),\r\n    //             catchError(error => {\r\n    //                 console.error('Error getting stock hub connection:', error);\r\n    //                 this.connectionStatusSubject.next('error');\r\n    //                 this.startPolling(); // Start polling when connection fails\r\n    //                 return of(null);\r\n    //             })\r\n    //         )\r\n    //         .subscribe();\r\n\r\n    //     // Also monitor connection status\r\n    //     this.signalRFactory.getConnectionStatus(this.stockHubUrl)\r\n    //         .subscribe(status => {\r\n    //             this.connectionStatusSubject.next(status);\r\n    //             if (status === 'disconnected' || status === 'error') {\r\n    //                 this.startPolling();\r\n    //             } else if (status === 'connected') {\r\n    //                 this.stopPolling();\r\n    //             }\r\n    //         });\r\n    // }\r\n\r\n    // Subscribe to stock updates for a specific product\r\n    subscribeToProductStock(productId: string): void {\r\n        if (this.hubConnection && this.hubConnection.state === signalR.HubConnectionState.Connected) {\r\n            this.hubConnection.invoke('SubscribeToProductStock', productId)\r\n                .catch(err => console.error(`Error subscribing to product stock ${productId}:`, err));\r\n        }\r\n    }\r\n\r\n    // Unsubscribe from stock updates for a specific product\r\n    unsubscribeFromProductStock(productId: string): void {\r\n        if (this.hubConnection && this.hubConnection.state === signalR.HubConnectionState.Connected) {\r\n            this.hubConnection.invoke('UnsubscribeFromProductStock', productId)\r\n                .catch(err => console.error(`Error unsubscribing from product stock ${productId}:`, err));\r\n        }\r\n    }\r\n\r\n    // Setup SignalR event listeners\r\n    private setupHubListeners(): void {\r\n        if (!this.hubConnection) return;\r\n\r\n        // Handle stock updates\r\n        this.hubConnection.on('StockUpdated', (stockItem: StockItem) => {\r\n            if (stockItem) {\r\n                this.store.dispatch(StockActions.stockUpdated({ stock: stockItem }));\r\n            } else {\r\n                // Null means \"refresh all stock data\"\r\n                this.refreshAllStockData();\r\n            }\r\n        });\r\n\r\n        // Handle low stock alerts\r\n        this.hubConnection.on('LowStockAlert', (stockItem: StockItem) => {\r\n            this.store.dispatch(StockActions.lowStockAlert({ stock: stockItem }));\r\n        });\r\n\r\n        // Handle out of stock alerts\r\n        this.hubConnection.on('OutOfStockAlert', (stockItem: StockItem) => {\r\n            // Add this action if not already in your store\r\n            this.store.dispatch(StockActions.outOfStockAlert({ stock: stockItem }));\r\n        });\r\n    }\r\n\r\n    // Start polling as a fallback when SignalR is disconnected\r\n    private startPolling(): void {\r\n        if (this.pollingSubscription) return;\r\n\r\n        this.pollingSubscription = timer(0, 30000) // Initial delay 0, then every 30 seconds\r\n            .pipe(\r\n                switchMap(() => this.refreshAllStockData())\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    // Stop polling when SignalR is connected\r\n    private stopPolling(): void {\r\n        if (this.pollingSubscription) {\r\n            this.pollingSubscription.unsubscribe();\r\n            this.pollingSubscription = undefined;\r\n        }\r\n    }\r\n\r\n    // Refresh all stock data\r\n    private refreshAllStockData(): Observable<any> {\r\n        return this.getLowStockItems().pipe(\r\n            tap(items => {\r\n                this.store.dispatch(StockActions.loadLowStockItemsSuccess({ items }));\r\n            }),\r\n            switchMap(() => this.getOutOfStockItems()),\r\n            tap(items => {\r\n                this.store.dispatch(StockActions.loadOutOfStockItemsSuccess({ items }));\r\n            }),\r\n            catchError(error => {\r\n                console.error('Error refreshing stock data:', error);\r\n                return of(null);\r\n            })\r\n        );\r\n    }\r\n\r\n    // API methods\r\n    getStockLevel(productId: string): Observable<StockItem> {\r\n        return this.http.get<StockItem>(`${this.apiUrl}/${productId}`).pipe(\r\n            catchError(error => {\r\n                if (error.status === 404) {\r\n                    // If stock item is not found, return a default one\r\n                    console.warn(`Stock item not found for product ${productId}, using default`);\r\n                    const defaultStock: StockItem = {\r\n                        id: '00000000-0000-0000-0000-000000000000', // Placeholder ID\r\n                        productId: productId,\r\n                        productName: 'Unknown Product',\r\n                        currentStock: 0,\r\n                        reservedStock: 0,\r\n                        availableStock: 0,\r\n                        lowStockThreshold: 5,\r\n                        trackInventory: true,\r\n                        isLowStock: true,\r\n                        isOutOfStock: true,\r\n                        reservations: []\r\n                    };\r\n                    return of(defaultStock);\r\n                }\r\n                return throwError(() => error);\r\n            })\r\n        );\r\n    }\r\n\r\n    getLowStockItems(): Observable<StockItem[]> {\r\n        return this.http.get<any[]>(`${this.apiUrl}/low-stock`).pipe(\r\n            map(items => items.map(this.mapStockItemFromApi))\r\n        );\r\n    }\r\n\r\n    getOutOfStockItems(): Observable<StockItem[]> {\r\n        return this.http.get<any[]>(`${this.apiUrl}/out-of-stock`).pipe(\r\n            map(items => items.map(this.mapStockItemFromApi))\r\n        );\r\n    }\r\n\r\n    adjustStock(adjustment: StockAdjustment): Observable<void> {\r\n        return this.http.post<void>(`${this.apiUrl}/${adjustment.productId}/adjust`, adjustment);\r\n    }\r\n\r\n    batchAdjustStock(adjustments: BatchStockAdjustment): Observable<void> {\r\n        return this.http.post<void>(`${this.apiUrl}/batch-adjust`, adjustments);\r\n    }\r\n\r\n    private mapStockItemFromApi(item: any): StockItem {\r\n        return {\r\n            id: item.id,\r\n            productId: item.productId,\r\n            productName: item.productName || 'Unknown Product',\r\n            currentStock: item.currentStock,\r\n            reservedStock: item.reservedStock || 0,\r\n            availableStock: item.availableStock,\r\n            lowStockThreshold: item.lowStockThreshold,\r\n            trackInventory: item.trackInventory,\r\n            isLowStock: item.isLowStock,\r\n            isOutOfStock: item.isOutOfStock,\r\n            reservations: item.reservations?.map((r: any) => ({\r\n                id: r.id,\r\n                orderId: r.orderId,\r\n                quantity: r.quantity,\r\n                status: r.status,\r\n                expiresAt: r.expiresAt,\r\n                confirmedAt: r.confirmedAt,\r\n                cancelledAt: r.cancelledAt\r\n            })) || []\r\n        };\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signalRFactory",
                        "type": "SignalRFactoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signalRFactory",
                        "type": "SignalRFactoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-7214afd6e7051a356427c9e7c9c1f2c36e1f20853c2bea79929d05da17e04a539cfeb08c1b5dfc2d2c815c3e4ef0a140ea366d0ad4c2e495c5c9f82fb151b898",
            "file": "src/app/core/services/theme.service.ts",
            "properties": [
                {
                    "name": "darkTheme",
                    "defaultValue": "new BehaviorSubject<boolean>(this.getStoredTheme())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "theme$",
                    "defaultValue": "this.darkTheme.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "applyThemeToOverlay",
                    "args": [
                        {
                            "name": "isDark",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "isDark",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStoredTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initializeTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isDarkTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prefersDarkMode",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "isDark",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDark",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { OverlayContainer } from '@angular/cdk/overlay';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ThemeService {\r\n  private darkTheme = new BehaviorSubject<boolean>(this.getStoredTheme());\r\n  theme$ = this.darkTheme.asObservable();\r\n\r\n  constructor(private overlayContainer: OverlayContainer) {\r\n    this.initializeTheme();\r\n  }\r\n\r\n  private getStoredTheme(): boolean {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    return savedTheme ? savedTheme === 'dark' : this.prefersDarkMode();\r\n  }\r\n\r\n  private prefersDarkMode(): boolean {\r\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n  }\r\n\r\n  isDarkTheme(): boolean {\r\n    return this.darkTheme.value;\r\n  }\r\n\r\n  setTheme(isDark: boolean) {\r\n    this.darkTheme.next(isDark);\r\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\r\n\r\n    // Toggle Tailwind dark mode class\r\n    if (isDark) {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n\r\n    // Apply theme to overlay container (for modals, dialogs, etc.)\r\n    this.applyThemeToOverlay(isDark);\r\n  }\r\n\r\n  toggleTheme() {\r\n    this.setTheme(!this.isDarkTheme());\r\n  }\r\n\r\n  initializeTheme() {\r\n    this.setTheme(this.getStoredTheme());\r\n\r\n    // Listen for system theme changes\r\n    window.matchMedia('(prefers-color-scheme: dark)')\r\n      .addEventListener('change', e => {\r\n        if (!localStorage.getItem('theme')) {\r\n          this.setTheme(e.matches);\r\n        }\r\n      });\r\n  }\r\n\r\n  private applyThemeToOverlay(isDark: boolean) {\r\n    const overlayContainerClasses = this.overlayContainer.getContainerElement().classList;\r\n\r\n    if (isDark) {\r\n      overlayContainerClasses.add('dark-theme');\r\n      overlayContainerClasses.remove('light-theme');\r\n    } else {\r\n      overlayContainerClasses.add('light-theme');\r\n      overlayContainerClasses.remove('dark-theme');\r\n    }\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlayContainer",
                        "type": "OverlayContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "overlayContainer",
                        "type": "OverlayContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "BaseCrudService",
            "id": "class-BaseCrudService-cc866891767fe62359daae39dd9332d1ec354053b76429e73fe47690cead6aa564c9b7608ec96167fa564a0ffa3a16492411ef65b9800681771013bfd223540e",
            "file": "src/app/core/services/base-crud.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\nimport { inject } from '@angular/core';\r\n\r\nexport abstract class BaseCrudService<T, ID> {\r\n    protected http = inject(HttpClient);\r\n    protected apiUrlBase = environment.apiUrls.admin.baseUrl;\r\n    protected abstract endpoint: string; // To be defined by subclasses (e.g., 'categories', 'products')\r\n\r\n    protected get apiUrl(): string {\r\n        return `${this.apiUrlBase}/${this.endpoint}`;\r\n    }\r\n\r\n    getAll(): Observable<T[]> {\r\n        return this.http.get<T[]>(this.apiUrl).pipe(catchError(this.handleError));\r\n    }\r\n\r\n    getById(id: ID): Observable<T> {\r\n        return this.http\r\n            .get<T>(`${this.apiUrl}/${id}`)\r\n            .pipe(catchError(this.handleError));\r\n    }\r\n\r\n    create(item: Partial<T>): Observable<T> {\r\n        // Use Partial<T> for creation if not all fields are required initially\r\n        return this.http\r\n            .post<T>(this.apiUrl, item)\r\n            .pipe(catchError(this.handleError));\r\n    }\r\n\r\n    update(id: ID, item: T): Observable<T> {\r\n        return this.http\r\n            .put<T>(`${this.apiUrl}/${id}`, item)\r\n            .pipe(catchError(this.handleError));\r\n    }\r\n\r\n    delete(id: ID): Observable<void> {\r\n        return this.http\r\n            .delete<void>(`${this.apiUrl}/${id}`)\r\n            .pipe(catchError(this.handleError));\r\n    }\r\n\r\n    protected handleError(error: HttpErrorResponse) {\r\n        // Basic error handling, can be expanded\r\n        console.error(\r\n            `Backend returned code ${error.status}, body was: `, error.error\r\n        );\r\n        // Return an observable with a user-facing error message.\r\n        return throwError(\r\n            () => new Error('Something bad happened; please try again later.')\r\n        );\r\n    }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "apiUrlBase",
                    "defaultValue": "environment.apiUrls.admin.baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "endpoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        124,
                        128
                    ]
                },
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "item",
                            "type": "Partial<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Partial<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "accessors": {
                "apiUrl": {
                    "name": "apiUrl",
                    "getSignature": {
                        "name": "apiUrl",
                        "type": "string",
                        "returnType": "string",
                        "line": 12
                    }
                }
            },
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "FileValueAccessor",
            "id": "directive-FileValueAccessor-74a3f7123ccc7480bc18f18e99e3fafd898b3a1d5228b83de4c945ade3fb02cc6a4d253b84636167c5a1d1808300b45dcbd2437496c09686bcf490a7491b9299",
            "file": "src/app/shared/formly/file-value-accessor.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core'; import { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\n@Directive({\r\n    //eslint-disable-next-line\r\n    selector: 'input[type=file]',\r\n    host: { '(change)': 'onChange($event.target.files)', '(blur)': 'onTouched()', },\r\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: FileValueAccessor, multi: true }],\r\n    standalone: true,\r\n})\r\n// https://github.com/angular/angular/issues/7341 \r\nexport class FileValueAccessor implements ControlValueAccessor { value: any; onChange = (_: any) => { }; onTouched = () => { }; writeValue(_value: any) { } registerOnChange(fn: any) { this.onChange = fn; } registerOnTouched(fn: any) { this.onTouched = fn; } }",
            "selector": "input[type=file]",
            "providers": [
                {
                    "name": "{ provide: NG_VALUE_ACCESSOR, useExisting: FileValueAccessor, multi: true }"
                }
            ],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "_value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ]
        },
        {
            "name": "HasPermissionDirective",
            "id": "directive-HasPermissionDirective-a27dd74495bd21e189a3c12a7ecfcbfc3173d9fa48ff478baa1cf1ab26d52029c854bc36609d3788aacf7b4c49eabddf00e8ec5c0e7bf402d845c8f8d579aa22",
            "file": "src/app/shared/directives/has-permission.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, OnInit, TemplateRef, ViewContainerRef, OnDestroy } from '@angular/core';\r\nimport { AuthService } from 'src/app/core/services/auth.service';\r\nimport { Subject, takeUntil } from 'rxjs';\r\n\r\n@Directive({\r\n    selector: '[appHasPermission]',\r\n    standalone: true\r\n})\r\nexport class HasPermissionDirective implements OnInit, OnDestroy {\r\n    @Input('appHasPermission') permission!: string;\r\n\r\n    private destroy$ = new Subject<void>();\r\n\r\n    constructor(\r\n        private templateRef: TemplateRef<any>,\r\n        private viewContainer: ViewContainerRef,\r\n        private authService: AuthService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.authService.hasPermission(this.permission)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(hasPermission => {\r\n                if (hasPermission) {\r\n                    this.viewContainer.createEmbeddedView(this.templateRef);\r\n                } else {\r\n                    this.viewContainer.clear();\r\n                }\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n\r\n",
            "selector": "[appHasPermission]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "appHasPermission",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "HasPermissionDirective",
            "id": "directive-HasPermissionDirective-01f3192c60b4c4d363fc4454c1579dfb85aaa74f06ccb0d1a54eebbffece7a42b302f90726c3138b31ab2ac08895b9fd3727bc7f115f2f990c84ba2b4fbc3a9e-1",
            "file": "src/app/shared/directives/permission.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n    Directive,\r\n    Input,\r\n    OnInit,\r\n    TemplateRef,\r\n    ViewContainerRef,\r\n    OnDestroy\r\n} from '@angular/core';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { AuthService } from '../../core/services/auth.service';\r\n\r\n@Directive({\r\n    selector: '[appHasPermission]',\r\n    standalone: true\r\n})\r\nexport class HasPermissionDirective implements OnInit, OnDestroy {\r\n    @Input('appHasPermission') permission!: string;\r\n    @Input('appHasPermissionElse') elseTemplateRef?: TemplateRef<any>;\r\n\r\n    private destroy$ = new Subject<void>();\r\n    private hasView = false;\r\n\r\n    constructor(\r\n        private templateRef: TemplateRef<any>,\r\n        private viewContainer: ViewContainerRef,\r\n        private authService: AuthService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.authService.hasPermission(this.permission)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(hasPermission => {\r\n                if (hasPermission && !this.hasView) {\r\n                    this.viewContainer.clear();\r\n                    this.viewContainer.createEmbeddedView(this.templateRef);\r\n                    this.hasView = true;\r\n                } else if (!hasPermission && this.hasView) {\r\n                    this.viewContainer.clear();\r\n                    if (this.elseTemplateRef) {\r\n                        this.viewContainer.createEmbeddedView(this.elseTemplateRef);\r\n                    }\r\n                    this.hasView = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[appHasRole]',\r\n    standalone: true\r\n})\r\nexport class HasRoleDirective implements OnInit, OnDestroy {\r\n    @Input('appHasRole') role!: string;\r\n    @Input('appHasRoleElse') elseTemplateRef?: TemplateRef<any>;\r\n\r\n    private destroy$ = new Subject<void>();\r\n    private hasView = false;\r\n\r\n    constructor(\r\n        private templateRef: TemplateRef<any>,\r\n        private viewContainer: ViewContainerRef,\r\n        private authService: AuthService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.authService.hasRole(this.role)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(hasRole => {\r\n                if (hasRole && !this.hasView) {\r\n                    this.viewContainer.clear();\r\n                    this.viewContainer.createEmbeddedView(this.templateRef);\r\n                    this.hasView = true;\r\n                } else if (!hasRole && this.hasView) {\r\n                    this.viewContainer.clear();\r\n                    if (this.elseTemplateRef) {\r\n                        this.viewContainer.createEmbeddedView(this.elseTemplateRef);\r\n                    }\r\n                    this.hasView = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}",
            "selector": "[appHasPermission]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "appHasPermission",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "appHasPermissionElse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hasView",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HasPermissionDirective-1"
        },
        {
            "name": "HasRoleDirective",
            "id": "directive-HasRoleDirective-01f3192c60b4c4d363fc4454c1579dfb85aaa74f06ccb0d1a54eebbffece7a42b302f90726c3138b31ab2ac08895b9fd3727bc7f115f2f990c84ba2b4fbc3a9e",
            "file": "src/app/shared/directives/permission.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n    Directive,\r\n    Input,\r\n    OnInit,\r\n    TemplateRef,\r\n    ViewContainerRef,\r\n    OnDestroy\r\n} from '@angular/core';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { AuthService } from '../../core/services/auth.service';\r\n\r\n@Directive({\r\n    selector: '[appHasPermission]',\r\n    standalone: true\r\n})\r\nexport class HasPermissionDirective implements OnInit, OnDestroy {\r\n    @Input('appHasPermission') permission!: string;\r\n    @Input('appHasPermissionElse') elseTemplateRef?: TemplateRef<any>;\r\n\r\n    private destroy$ = new Subject<void>();\r\n    private hasView = false;\r\n\r\n    constructor(\r\n        private templateRef: TemplateRef<any>,\r\n        private viewContainer: ViewContainerRef,\r\n        private authService: AuthService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.authService.hasPermission(this.permission)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(hasPermission => {\r\n                if (hasPermission && !this.hasView) {\r\n                    this.viewContainer.clear();\r\n                    this.viewContainer.createEmbeddedView(this.templateRef);\r\n                    this.hasView = true;\r\n                } else if (!hasPermission && this.hasView) {\r\n                    this.viewContainer.clear();\r\n                    if (this.elseTemplateRef) {\r\n                        this.viewContainer.createEmbeddedView(this.elseTemplateRef);\r\n                    }\r\n                    this.hasView = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[appHasRole]',\r\n    standalone: true\r\n})\r\nexport class HasRoleDirective implements OnInit, OnDestroy {\r\n    @Input('appHasRole') role!: string;\r\n    @Input('appHasRoleElse') elseTemplateRef?: TemplateRef<any>;\r\n\r\n    private destroy$ = new Subject<void>();\r\n    private hasView = false;\r\n\r\n    constructor(\r\n        private templateRef: TemplateRef<any>,\r\n        private viewContainer: ViewContainerRef,\r\n        private authService: AuthService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.authService.hasRole(this.role)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(hasRole => {\r\n                if (hasRole && !this.hasView) {\r\n                    this.viewContainer.clear();\r\n                    this.viewContainer.createEmbeddedView(this.templateRef);\r\n                    this.hasView = true;\r\n                } else if (!hasRole && this.hasView) {\r\n                    this.viewContainer.clear();\r\n                    if (this.elseTemplateRef) {\r\n                        this.viewContainer.createEmbeddedView(this.elseTemplateRef);\r\n                    }\r\n                    this.hasView = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}",
            "selector": "[appHasRole]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "appHasRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "appHasRoleElse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hasView",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AddNoteDialogComponent",
            "id": "component-AddNoteDialogComponent-183753658879523a80e69aa0a86860651e60de103346145e07265c2281e12f70df73fb60e8ba0b7c100c1b3d502850006a8d41cbf56b30c517456184303a1a4a",
            "file": "src/app/features/orders/components/add-note-dialog/add-note-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-note-dialog",
            "styleUrls": [],
            "styles": [
                "\n        .form-fields {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n            min-width: 400px;\n            max-width: 600px;\n        }\n\n        textarea {\n            min-height: 100px;\n        }\n\n        ::ng-deep {\n            .mat-mdc-form-field-subscript-wrapper {\n                display: flex;\n                justify-content: space-between;\n            }\n        }\n    "
            ],
            "template": "<h2 mat-dialog-title>Add Admin Note</h2>\n\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n    <mat-dialog-content>\n        <div class=\"form-fields\">\n            <mat-form-field >\n                <mat-label>Note Type</mat-label>\n                <mat-select formControlName=\"type\">\n                    <mat-option value=\"general\">General Note</mat-option>\n                    <mat-option value=\"customer_service\">Customer Service</mat-option>\n                    <mat-option value=\"shipping\">Shipping</mat-option>\n                    <mat-option value=\"payment\">Payment</mat-option>\n                </mat-select>\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('type')?.errors?.['required']\">\n                    Note type is required\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field >\n                <mat-label>Note Content</mat-label>\n                <textarea matInput formControlName=\"content\"\n                          placeholder=\"Enter note content\"\n                          rows=\"4\"></textarea>\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('content')?.errors?.['required']\">\n                    Note content is required\n                </mat-error>\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('content')?.errors?.['minlength']\">\n                    Note must be at least 3 characters\n                </mat-error>\n                <mat-hint class=\"text-xs text-orange-500\" align=\"end\">\n                    {{form.get('content')?.value?.length || 0}}/1000\n                </mat-hint>\n            </mat-form-field>\n\n            <mat-form-field >\n                <mat-label>Visibility</mat-label>\n                <mat-select formControlName=\"isInternal\">\n                    <mat-option [value]=\"true\">Internal Only</mat-option>\n                    <mat-option [value]=\"false\">Visible to Customer</mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions align=\"end\">\n        <button mat-button type=\"button\" (click)=\"onCancel()\">Cancel</button>\n        <button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"form.invalid || form.pristine\">\n            Add Note\n        </button>\n    </mat-dialog-actions>\n</form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 100
                }
            ],
            "methodsClass": [
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\n@Component({\r\n    selector: 'app-add-note-dialog',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        MatDialogModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule\r\n    ],\r\n    template: `\r\n        <h2 mat-dialog-title>Add Admin Note</h2>\r\n        \r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <mat-dialog-content>\r\n                <div class=\"form-fields\">\r\n                    <mat-form-field >\r\n                        <mat-label>Note Type</mat-label>\r\n                        <mat-select formControlName=\"type\">\r\n                            <mat-option value=\"general\">General Note</mat-option>\r\n                            <mat-option value=\"customer_service\">Customer Service</mat-option>\r\n                            <mat-option value=\"shipping\">Shipping</mat-option>\r\n                            <mat-option value=\"payment\">Payment</mat-option>\r\n                        </mat-select>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('type')?.errors?.['required']\">\r\n                            Note type is required\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Note Content</mat-label>\r\n                        <textarea matInput formControlName=\"content\" \r\n                                  placeholder=\"Enter note content\"\r\n                                  rows=\"4\"></textarea>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('content')?.errors?.['required']\">\r\n                            Note content is required\r\n                        </mat-error>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('content')?.errors?.['minlength']\">\r\n                            Note must be at least 3 characters\r\n                        </mat-error>\r\n                        <mat-hint class=\"text-xs text-orange-500\" align=\"end\">\r\n                            {{form.get('content')?.value?.length || 0}}/1000\r\n                        </mat-hint>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Visibility</mat-label>\r\n                        <mat-select formControlName=\"isInternal\">\r\n                            <mat-option [value]=\"true\">Internal Only</mat-option>\r\n                            <mat-option [value]=\"false\">Visible to Customer</mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n                </div>\r\n            </mat-dialog-content>\r\n\r\n            <mat-dialog-actions align=\"end\">\r\n                <button mat-button type=\"button\" (click)=\"onCancel()\">Cancel</button>\r\n                <button mat-raised-button color=\"primary\" \r\n                        type=\"submit\"\r\n                        [disabled]=\"form.invalid || form.pristine\">\r\n                    Add Note\r\n                </button>\r\n            </mat-dialog-actions>\r\n        </form>\r\n    `,\r\n    styles: [`\r\n        .form-fields {\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 1rem;\r\n            min-width: 400px;\r\n            max-width: 600px;\r\n        }\r\n\r\n        textarea {\r\n            min-height: 100px;\r\n        }\r\n\r\n        ::ng-deep {\r\n            .mat-mdc-form-field-subscript-wrapper {\r\n                display: flex;\r\n                justify-content: space-between;\r\n            }\r\n        }\r\n    `]\r\n})\r\nexport class AddNoteDialogComponent {\r\n    form: FormGroup;\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<AddNoteDialogComponent>,\r\n        private fb: FormBuilder\r\n    ) {\r\n        this.form = this.fb.group({\r\n            type: ['general', Validators.required],\r\n            content: ['', [\r\n                Validators.required,\r\n                Validators.minLength(3),\r\n                Validators.maxLength(1000)\r\n            ]],\r\n            isInternal: [true]\r\n        });\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.form.valid) {\r\n            this.dialogRef.close({\r\n                ...this.form.value,\r\n                createdAt: new Date().toISOString()\r\n            });\r\n        }\r\n    }\r\n\r\n    onCancel() {\r\n        this.dialogRef.close();\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        .form-fields {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n            min-width: 400px;\n            max-width: 600px;\n        }\n\n        textarea {\n            min-height: 100px;\n        }\n\n        ::ng-deep {\n            .mat-mdc-form-field-subscript-wrapper {\n                display: flex;\n                justify-content: space-between;\n            }\n        }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddNoteDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 100,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddNoteDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "AddPaymentDialogComponent",
            "id": "component-AddPaymentDialogComponent-598fc639bf7dc1c9cc099c1c8afe0216798a9b6b86afa9c423a3b4ceb97a41e76071cbadcde9bb1b39aabf7785bb6084fdee860c123735546aaaa02bfb7e005d",
            "file": "src/app/features/orders/components/add-payment-dialog/add-payment-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-payment-dialog",
            "styleUrls": [],
            "styles": [
                "\n        .form-fields {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n            min-width: 400px;\n        }\n    "
            ],
            "template": "<h2 mat-dialog-title>Add Payment</h2>\n\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n    <mat-dialog-content>\n        <div class=\"form-fields\">\n            <mat-form-field >\n                <mat-label>Transaction ID</mat-label>\n                <input matInput formControlName=\"transactionId\" placeholder=\"Enter transaction ID\">\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('transactionId')?.errors?.['required']\">\n                    Transaction ID is required\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field >\n                <mat-label>Payment Method</mat-label>\n                <mat-select formControlName=\"method\">\n                    <mat-option value=\"credit_card\">Credit Card</mat-option>\n                    <mat-option value=\"bank_transfer\">Bank Transfer</mat-option>\n                    <mat-option value=\"paypal\">PayPal</mat-option>\n                </mat-select>\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('method')?.errors?.['required']\">\n                    Payment method is required\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field >\n                <mat-label>Amount</mat-label>\n                <input matInput type=\"number\" formControlName=\"amount\"\n                       [placeholder]=\"'Amount in ' + data.currency\">\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('amount')?.errors?.['required']\">\n                    Amount is required\n                </mat-error>\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('amount')?.errors?.['min']\">\n                    Amount must be greater than 0\n                </mat-error>\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('amount')?.errors?.['max']\">\n                    Amount cannot exceed order total\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field >\n                <mat-label>Reference</mat-label>\n                <input matInput formControlName=\"reference\" placeholder=\"Enter payment reference\">\n            </mat-form-field>\n        </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions align=\"end\">\n        <button mat-button type=\"button\" (click)=\"onCancel()\">Cancel</button>\n        <button mat-raised-button color=\"primary\" type=\"submit\"\n                [disabled]=\"form.invalid || form.pristine\">\n            Add Payment\n        </button>\n    </mat-dialog-actions>\n</form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                }
            ],
            "methodsClass": [
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\ninterface DialogData {\r\n    orderId: string;\r\n    amount: number;\r\n    currency: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-add-payment-dialog',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        MatDialogModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule\r\n    ],\r\n    template: `\r\n        <h2 mat-dialog-title>Add Payment</h2>\r\n        \r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <mat-dialog-content>\r\n                <div class=\"form-fields\">\r\n                    <mat-form-field >\r\n                        <mat-label>Transaction ID</mat-label>\r\n                        <input matInput formControlName=\"transactionId\" placeholder=\"Enter transaction ID\">\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('transactionId')?.errors?.['required']\">\r\n                            Transaction ID is required\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Payment Method</mat-label>\r\n                        <mat-select formControlName=\"method\">\r\n                            <mat-option value=\"credit_card\">Credit Card</mat-option>\r\n                            <mat-option value=\"bank_transfer\">Bank Transfer</mat-option>\r\n                            <mat-option value=\"paypal\">PayPal</mat-option>\r\n                        </mat-select>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('method')?.errors?.['required']\">\r\n                            Payment method is required\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Amount</mat-label>\r\n                        <input matInput type=\"number\" formControlName=\"amount\" \r\n                               [placeholder]=\"'Amount in ' + data.currency\">\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('amount')?.errors?.['required']\">\r\n                            Amount is required\r\n                        </mat-error>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('amount')?.errors?.['min']\">\r\n                            Amount must be greater than 0\r\n                        </mat-error>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('amount')?.errors?.['max']\">\r\n                            Amount cannot exceed order total\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Reference</mat-label>\r\n                        <input matInput formControlName=\"reference\" placeholder=\"Enter payment reference\">\r\n                    </mat-form-field>\r\n                </div>\r\n            </mat-dialog-content>\r\n\r\n            <mat-dialog-actions align=\"end\">\r\n                <button mat-button type=\"button\" (click)=\"onCancel()\">Cancel</button>\r\n                <button mat-raised-button color=\"primary\" type=\"submit\"\r\n                        [disabled]=\"form.invalid || form.pristine\">\r\n                    Add Payment\r\n                </button>\r\n            </mat-dialog-actions>\r\n        </form>\r\n    `,\r\n    styles: [`\r\n        .form-fields {\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 1rem;\r\n            min-width: 400px;\r\n        }\r\n    `]\r\n})\r\nexport class AddPaymentDialogComponent {\r\n    form: FormGroup;\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<AddPaymentDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: DialogData,\r\n        private fb: FormBuilder\r\n    ) {\r\n        this.form = this.fb.group({\r\n            transactionId: ['', Validators.required],\r\n            method: ['', Validators.required],\r\n            amount: [data.amount, [\r\n                Validators.required,\r\n                Validators.min(0.01),\r\n                Validators.max(data.amount)\r\n            ]],\r\n            reference: [''],\r\n            currency: [data.currency]\r\n        });\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.form.valid) {\r\n            this.dialogRef.close(this.form.value);\r\n        }\r\n    }\r\n\r\n    onCancel() {\r\n        this.dialogRef.close();\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        .form-fields {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n            min-width: 400px;\n        }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddPaymentDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 96,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddPaymentDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "AddProductComponent",
            "id": "component-AddProductComponent-dadd6c87da5ec0404d6491f2034e589e9c29455b6a2c8ce7c318ebc8c552301b056b52255ecb96350879648d0ab52f469d9411c873c4c1d9577f039525f56b18",
            "file": "src/app/features/products/add-product/add-product.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-product",
            "styleUrls": [
                "./add-product.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-product.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "basicInfoForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "currencies",
                    "defaultValue": "Object.entries(Currency).map(([code, label]) => ({ code, label }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "Currency",
                    "defaultValue": "Currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "detailsForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "images",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "isSubmitting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "pricingForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "createForms",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getCategoryName",
                    "args": [
                        {
                            "name": "categoryId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "categoryId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBarcodeScanned",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onImagesChange",
                    "args": [
                        {
                            "name": "images",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "images",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validateAllForms",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatStepperModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "BarcodeScannerComponent",
                    "type": "component"
                },
                {
                    "name": "ProductImageManagerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Subject, takeUntil } from 'rxjs';\r\n\r\n// Material Imports\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { Currency } from 'src/app/shared/models/currency.enum';\r\n// Custom Components\r\nimport { BarcodeScannerComponent } from '../components/barcode-scanner';\r\nimport { ProductImageManagerComponent } from '../product-image-manager/product-image-manager.component';\r\n\r\n// Services\r\nimport { CategoryService } from '../../../core/services/category.service';\r\nimport { ProductService } from '../../../core/services/product.service';\r\nimport { ErrorService } from '../../../core/services/error.service';\r\n\r\n@Component({\r\n  selector: 'app-add-product',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    MatStepperModule,\r\n    MatTooltipModule,\r\n    MatCheckboxModule,\r\n    BarcodeScannerComponent,\r\n    ProductImageManagerComponent\r\n  ],\r\n  templateUrl: './add-product.component.html',\r\n  styleUrls: ['./add-product.component.scss']\r\n})\r\nexport class AddProductComponent implements OnInit, OnDestroy {\r\n\r\n  basicInfoForm!: FormGroup;\r\n  pricingForm!: FormGroup;\r\n  detailsForm!: FormGroup;\r\n\r\n  categories: any[] = [];\r\n  isSubmitting = false;\r\n  images: any[] = [];\r\n\r\n  private destroy$ = new Subject<void>();\r\n  Currency = Currency; // Enum for currency options\r\n  currencies = Object.entries(Currency).map(([code, label]) => ({ code, label }));\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private router: Router,\r\n    private categoryService: CategoryService,\r\n    private productService: ProductService,\r\n    private errorService: ErrorService\r\n  ) {\r\n    this.createForms();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadCategories();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  private createForms(): void {\r\n    this.basicInfoForm = this.fb.group({\r\n      name: ['', [Validators.required, Validators.minLength(3)]],\r\n      sku: ['', Validators.required],\r\n      barcode: [''],\r\n      categoryId: ['', Validators.required]\r\n    });\r\n\r\n    this.pricingForm = this.fb.group({\r\n      price: [0, [Validators.required, Validators.min(0)]],\r\n      compareAtPrice: [null],\r\n      cost: [null],\r\n      stock: [0, [Validators.required, Validators.min(0)]],\r\n      lowStockThreshold: [5],\r\n      currency: ['USD', Validators.required]\r\n    });\r\n\r\n    this.detailsForm = this.fb.group({\r\n      description: ['', Validators.required],\r\n      shortDescription: [''],\r\n      isActive: [true],\r\n      isFeatured: [false],\r\n      tags: ['']\r\n    });\r\n  }\r\n\r\n  private loadCategories(): void {\r\n    this.categoryService.getCategories()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (categories) => {\r\n          this.categories = categories;\r\n        },\r\n        error: (error) => {\r\n          this.errorService.addError({\r\n            code: 'CATEGORIES_LOAD_ERROR',\r\n            message: 'Failed to load categories',\r\n            severity: 'error'\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  onBarcodeScanned(code: string): void {\r\n    this.basicInfoForm.get('barcode')?.setValue(code);\r\n\r\n    // Optionally: Look up product info by barcode from a product database API\r\n    // this.productService.getProductByBarcode(code).subscribe(...)\r\n  }\r\n\r\n  onImagesChange(images: any[]): void {\r\n    this.images = images;\r\n  }\r\n\r\n  submitProduct(): void {\r\n    if (this.isSubmitting) return;\r\n\r\n    if (!this.validateAllForms()) {\r\n      this.errorService.addError({\r\n        code: 'VALIDATION_ERROR',\r\n        message: 'Please fill in all required fields',\r\n        severity: 'warning'\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.isSubmitting = true;\r\n\r\n    const productData = {\r\n      ...this.basicInfoForm.value,\r\n      ...this.pricingForm.value,\r\n      ...this.detailsForm.value,\r\n      images: this.images,\r\n    };\r\n\r\n    this.productService.createProduct(productData)\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: () => {\r\n          this.router.navigate(['/products/list']);\r\n        },\r\n        error: (error) => {\r\n          this.isSubmitting = false;\r\n          this.errorService.addError({\r\n            code: 'PRODUCT_CREATE_ERROR',\r\n            message: 'Failed to create product',\r\n            severity: 'error'\r\n          });\r\n        },\r\n        complete: () => {\r\n          this.isSubmitting = false;\r\n        }\r\n      });\r\n  }\r\n  getCategoryName(categoryId: string): string {\r\n    const category = this.categories.find(cat => cat.id === categoryId);\r\n    return category ? category.name : 'Not specified';\r\n  }\r\n\r\n  validateAllForms(): boolean {\r\n    return (\r\n      this.basicInfoForm.valid &&\r\n      this.pricingForm.valid &&\r\n      this.detailsForm.valid\r\n    );\r\n  }\r\n\r\n  reset(): void {\r\n    this.basicInfoForm.reset();\r\n    this.pricingForm.reset();\r\n    this.detailsForm.reset();\r\n    this.images = [];\r\n\r\n    // Reset with defaults\r\n    this.pricingForm.patchValue({\r\n      price: 0,\r\n      stock: 0,\r\n      lowStockThreshold: 5,\r\n      currency: 'USD'\r\n    });\r\n\r\n    this.detailsForm.patchValue({\r\n      isActive: true,\r\n      isFeatured: false\r\n    });\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'sass:map';\r\n@use '../../../../styles';\r\n@use '../../../../styles/variables' as vars;\r\n\r\n.add-product-container {\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n\r\n    .header {\r\n        margin-bottom: 2rem;\r\n\r\n        h1 {\r\n            margin-bottom: 0.5rem;\r\n            color: var(--text-primary);\r\n        }\r\n\r\n        p {\r\n            color: var(--text-secondary);\r\n        }\r\n    }\r\n}\r\n\r\n.form-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n    gap: 2rem;\r\n    margin-bottom: 2rem;\r\n}\r\n\r\n.form-section {\r\n    background-color: var(--bg-secondary);\r\n    padding: 1.5rem;\r\n    border-radius: 8px;\r\n    border: 1px solid var(--border);\r\n\r\n    h2 {\r\n        font-size: 1.25rem;\r\n        margin-bottom: 1.5rem;\r\n        color: var(--text-primary);\r\n    }\r\n}\r\n\r\n.form-group {\r\n    margin-bottom: 1.5rem;\r\n\r\n    label {\r\n        display: block;\r\n        margin-bottom: 0.5rem;\r\n        color: var(--text-secondary);\r\n    }\r\n\r\n    .form-control {\r\n        width: 100%;\r\n        padding: 0.75rem;\r\n        border: 1px solid var(--border);\r\n        border-radius: 4px;\r\n        background-color: var(--bg-primary);\r\n        color: var(--text-primary);\r\n\r\n        &:focus {\r\n            border-color: var(--primary);\r\n            outline: none;\r\n        }\r\n    }\r\n}\r\n\r\n.file-container {\r\n    .file-box {\r\n        border: 2px dashed var(--primary);\r\n        border-radius: 8px;\r\n        padding: 1rem;\r\n        text-align: center;\r\n        cursor: pointer;\r\n        background-color: var(--bg-secondary);\r\n        transition: all 0.3s ease;\r\n\r\n        &:hover {\r\n            background-color: rgba(var(--primary-rgb), 0.1);\r\n        }\r\n\r\n        i {\r\n            color: var(--primary);\r\n        }\r\n\r\n        p {\r\n            color: var(--text-primary);\r\n        }\r\n    }\r\n}\r\n\r\n.image-preview-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\r\n    gap: 1rem;\r\n    margin-top: 1rem;\r\n\r\n    .image-preview {\r\n        position: relative;\r\n        aspect-ratio: 1;\r\n\r\n        img {\r\n            width: 100%;\r\n            height: 100%;\r\n            object-fit: cover;\r\n            border-radius: 4px;\r\n        }\r\n\r\n        .remove-image {\r\n            position: absolute;\r\n            top: -0.5rem;\r\n            right: -0.5rem;\r\n            width: 1.5rem;\r\n            height: 1.5rem;\r\n            border-radius: 50%;\r\n            background-color: var(--bg-dark);\r\n            border: none;\r\n            color: var(--text-primary);\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            cursor: pointer;\r\n\r\n            &:hover {\r\n                background-color: var(--primary);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.form-actions {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: 1rem;\r\n\r\n    .btn {\r\n        padding: 0.75rem 1.5rem;\r\n        border-radius: 4px;\r\n        font-weight: 500;\r\n\r\n        &.btn-primary {\r\n            background-color: var(--primary);\r\n            border: none;\r\n            color: var(--text-primary);\r\n\r\n            &:hover {\r\n                filter: brightness(90%);\r\n            }\r\n        }\r\n\r\n        &.btn-outline-secondary {\r\n            background: none;\r\n            border: 1px solid var(--border);\r\n            color: var(--text-secondary);\r\n\r\n            &:hover {\r\n                background-color: var(--bg-secondary);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@media (max-width: get-breakpoint('md')) {\r\n    .form-grid {\r\n        grid-template-columns: 1fr;\r\n        gap: 1rem;\r\n    }\r\n\r\n    .add-product-container {\r\n        padding: 1rem;\r\n    }\r\n\r\n    .form-section {\r\n        padding: 1rem;\r\n    }\r\n\r\n    .form-actions {\r\n        flex-direction: column;\r\n        align-items: stretch;\r\n\r\n        .btn {\r\n            width: 100%;\r\n            margin-bottom: 0.5rem;\r\n        }\r\n    }\r\n}\r\n\r\n.scanner-section {\r\n    margin-bottom: 2rem;\r\n    padding: 1rem;\r\n    background-color: #f9f9f9;\r\n    border-radius: 8px;\r\n    border: 1px solid #e0e0e0;\r\n}\r\n\r\n.scanner-section h3 {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n    color: #333;\r\n    font-size: 1.2rem;\r\n}",
                    "styleUrl": "./add-product.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!-- src/app/features/products/add-product/add-product.component.html -->\r\n<div class=\"p-6 max-w-screen-xl mx-auto\">\r\n    <!-- Page Header -->\r\n    <div class=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6\">\r\n        <div>\r\n            <h1 class=\"text-2xl font-bold text-slate-900 dark:text-white\">Add New Product</h1>\r\n            <p class=\"text-sm text-slate-500 dark:text-slate-400\">Create a new product listing with details and imagery\r\n            </p>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Product Form with Step Wizard -->\r\n    <div\r\n        class=\"bg-white dark:bg-slate-800 rounded-lg shadow-subtle border border-slate-200 dark:border-slate-700 overflow-hidden\">\r\n        <mat-stepper linear #stepper class=\"bg-transparent\">\r\n            <!-- Step 1: Basic Information -->\r\n            <mat-step [stepControl]=\"basicInfoForm\">\r\n                <ng-template matStepLabel>Basic Info</ng-template>\r\n                <div class=\"p-6\">\r\n                    <h2 class=\"text-lg font-medium text-slate-900 dark:text-white mb-4\">Basic Product Information</h2>\r\n\r\n                    <!-- Barcode scanner -->\r\n                    <div\r\n                        class=\"mb-6 bg-slate-50 dark:bg-slate-700 p-4 rounded-lg border border-slate-200 dark:border-slate-700\">\r\n                        <h3 class=\"text-md font-medium text-slate-800 dark:text-slate-200 mb-3\">Scan Product Barcode\r\n                        </h3>\r\n                        <p class=\"text-sm text-slate-500 dark:text-slate-400 mb-3\">\r\n                            Use a barcode scanner or your device's camera to quickly fill product details\r\n                        </p>\r\n                        <app-barcode-scanner (codeScanned)=\"onBarcodeScanned($event)\"></app-barcode-scanner>\r\n                    </div>\r\n\r\n                    <form [formGroup]=\"basicInfoForm\">\r\n                        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                            <mat-form-field class=\"w-full\">\r\n                                <mat-label>Product Name</mat-label>\r\n                                <input matInput formControlName=\"name\" placeholder=\"Enter product name\">\r\n                                <mat-error class=\"text-xs text-red-500\"\r\n                                    *ngIf=\"basicInfoForm.get('name')?.errors?.['required']\">\r\n                                    Product name is required\r\n                                </mat-error>\r\n                                <mat-error class=\"text-xs text-red-500\"\r\n                                    *ngIf=\"basicInfoForm.get('name')?.errors?.['minlength']\">\r\n                                    Product name must be at least 3 characters\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n\r\n                            <mat-form-field class=\"w-full\">\r\n                                <mat-label>SKU</mat-label>\r\n                                <input matInput formControlName=\"sku\" placeholder=\"Enter SKU (Stock Keeping Unit)\">\r\n                                <mat-error class=\"text-xs text-red-500\"\r\n                                    *ngIf=\"basicInfoForm.get('sku')?.errors?.['required']\">\r\n                                    SKU is required\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n\r\n                            <mat-form-field class=\"w-full\">\r\n                                <mat-label>Barcode</mat-label>\r\n                                <input matInput formControlName=\"barcode\" placeholder=\"Enter barcode or UPC (optional)\">\r\n                                <mat-hint class=\"text-xs text-orange-500\">Use the scanner above or enter\r\n                                    manually</mat-hint>\r\n                            </mat-form-field>\r\n\r\n                            <mat-form-field class=\"w-full\">\r\n                                <mat-label>Category</mat-label>\r\n                                <mat-select formControlName=\"categoryId\">\r\n                                    <mat-option [value]=\"\">Select a category</mat-option>\r\n                                    <mat-option *ngFor=\"let category of categories\" [value]=\"category.id\">\r\n                                        {{ category.name }}\r\n                                    </mat-option>\r\n                                </mat-select>\r\n                                <mat-error class=\"text-xs text-red-500\"\r\n                                    *ngIf=\"basicInfoForm.get('categoryId')?.errors?.['required']\">\r\n                                    Category is required\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </form>\r\n\r\n                    <div class=\"flex justify-end mt-6\">\r\n                        <button mat-button matStepperNext color=\"primary\" [disabled]=\"!basicInfoForm.valid\"\r\n                            class=\"bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 transition-colors\">\r\n                            Continue to Pricing\r\n                            <mat-icon class=\"ml-1\">arrow_forward</mat-icon>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </mat-step>\r\n\r\n            <!-- Step 2: Pricing & Inventory -->\r\n            <mat-step [stepControl]=\"pricingForm\">\r\n                <ng-template matStepLabel>Pricing & Inventory</ng-template>\r\n                <div class=\"p-6\">\r\n                    <h2 class=\"text-lg font-medium text-slate-900 dark:text-white mb-4\">Pricing & Inventory Information\r\n                    </h2>\r\n\r\n                    <form [formGroup]=\"pricingForm\">\r\n                        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                            <div class=\"grid grid-cols-2 gap-6\">\r\n                                <mat-form-field class=\"w-full\">\r\n                                    <mat-label>Price</mat-label>\r\n                                    <input matInput type=\"number\" formControlName=\"price\" placeholder=\"0.00\">\r\n                                    <span matPrefix>$&nbsp;</span>\r\n                                    <mat-error class=\"text-xs text-red-500\"\r\n                                        *ngIf=\"pricingForm.get('price')?.errors?.['required']\">\r\n                                        Price is required\r\n                                    </mat-error>\r\n                                    <mat-error class=\"text-xs text-red-500\"\r\n                                        *ngIf=\"pricingForm.get('price')?.errors?.['min']\">\r\n                                        Price must be positive\r\n                                    </mat-error>\r\n                                </mat-form-field>\r\n\r\n                                <mat-form-field class=\"w-full\">\r\n                                    <mat-label>Currency</mat-label>\r\n                                    <mat-select formControlName=\"currency\">\r\n                                        <mat-option *ngFor=\"let currency of currencies\" [value]=\"currency.code\">\r\n                                            {{ currency.label }}\r\n                                        </mat-option>\r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n                            </div>\r\n\r\n                            <mat-form-field class=\"w-full\">\r\n                                <mat-label>Compare-at Price</mat-label>\r\n                                <input matInput type=\"number\" formControlName=\"compareAtPrice\" placeholder=\"0.00\">\r\n                                <span matPrefix>$&nbsp;</span>\r\n                                <mat-hint class=\"text-xs text-orange-500\">Original price (for sale/discount\r\n                                    display)</mat-hint>\r\n                            </mat-form-field>\r\n\r\n                            <mat-form-field class=\"w-full\">\r\n                                <mat-label>Cost per Item</mat-label>\r\n                                <input matInput type=\"number\" formControlName=\"cost\" placeholder=\"0.00\">\r\n                                <span matPrefix>$&nbsp;</span>\r\n                                <mat-hint class=\"text-xs text-orange-500\">Your cost (for profit calculation)</mat-hint>\r\n                            </mat-form-field>\r\n\r\n                            <div class=\"grid grid-cols-2 gap-6\">\r\n                                <mat-form-field class=\"w-full\">\r\n                                    <mat-label>Stock Quantity</mat-label>\r\n                                    <input matInput type=\"number\" formControlName=\"stock\" placeholder=\"0\">\r\n                                    <mat-error class=\"text-xs text-red-500\"\r\n                                        *ngIf=\"pricingForm.get('stock')?.errors?.['required']\">\r\n                                        Stock quantity is required\r\n                                    </mat-error>\r\n                                    <mat-error class=\"text-xs text-red-500\"\r\n                                        *ngIf=\"pricingForm.get('stock')?.errors?.['min']\">\r\n                                        Stock must be positive\r\n                                    </mat-error>\r\n                                </mat-form-field>\r\n\r\n                                <mat-form-field class=\"w-full\">\r\n                                    <mat-label>Low Stock Alert</mat-label>\r\n                                    <input matInput type=\"number\" formControlName=\"lowStockThreshold\" placeholder=\"5\">\r\n                                    <mat-hint class=\"text-xs text-orange-500\">Get alerts when stock is below this\r\n                                        number</mat-hint>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n\r\n                    <div class=\"flex justify-between mt-6\">\r\n                        <button mat-button matStepperPrevious\r\n                            class=\"border border-slate-300 dark:border-slate-600 px-4 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-700\">\r\n                            <mat-icon class=\"mr-1\">arrow_back</mat-icon>\r\n                            Back\r\n                        </button>\r\n                        <button mat-button matStepperNext color=\"primary\" [disabled]=\"!pricingForm.valid\"\r\n                            class=\"bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 transition-colors\">\r\n                            Continue to Details\r\n                            <mat-icon class=\"ml-1\">arrow_forward</mat-icon>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </mat-step>\r\n\r\n            <!-- Step 3: Product Details & Description -->\r\n            <mat-step [stepControl]=\"detailsForm\">\r\n                <ng-template matStepLabel>Details</ng-template>\r\n                <div class=\"p-6\">\r\n                    <h2 class=\"text-lg font-medium text-slate-900 dark:text-white mb-4\">Product Details & Description\r\n                    </h2>\r\n\r\n                    <form [formGroup]=\"detailsForm\">\r\n                        <div class=\"grid grid-cols-1 gap-6\">\r\n                            <mat-form-field class=\"w-full\">\r\n                                <mat-label>Full Description</mat-label>\r\n                                <textarea matInput formControlName=\"description\" rows=\"5\"\r\n                                    placeholder=\"Enter detailed product description\">\r\n                </textarea>\r\n                                <mat-error class=\"text-xs text-red-500\"\r\n                                    *ngIf=\"detailsForm.get('description')?.errors?.['required']\">\r\n                                    Description is required\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n\r\n                            <mat-form-field class=\"w-full\">\r\n                                <mat-label>Short Description</mat-label>\r\n                                <textarea matInput formControlName=\"shortDescription\" rows=\"2\"\r\n                                    placeholder=\"Enter short summary (optional)\">\r\n                </textarea>\r\n                                <mat-hint class=\"text-xs text-orange-500\">Brief summary shown in product\r\n                                    listings</mat-hint>\r\n                            </mat-form-field>\r\n\r\n                            <mat-form-field class=\"w-full\">\r\n                                <mat-label>Tags</mat-label>\r\n                                <input matInput formControlName=\"tags\" placeholder=\"Enter tags separated by commas\">\r\n                                <mat-hint class=\"text-xs text-orange-500\">Help customers find your product</mat-hint>\r\n                            </mat-form-field>\r\n\r\n                            <div class=\"flex gap-6\">\r\n                                <mat-checkbox formControlName=\"isActive\" color=\"primary\">\r\n                                    Active (visible to customers)\r\n                                </mat-checkbox>\r\n\r\n                                <mat-checkbox formControlName=\"isFeatured\" color=\"primary\">\r\n                                    Featured product\r\n                                </mat-checkbox>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n\r\n                    <div class=\"flex justify-between mt-6\">\r\n                        <button mat-button matStepperPrevious\r\n                            class=\"border border-slate-300 dark:border-slate-600 px-4 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-700\">\r\n                            <mat-icon class=\"mr-1\">arrow_back</mat-icon>\r\n                            Back\r\n                        </button>\r\n                        <button mat-button matStepperNext color=\"primary\" [disabled]=\"!detailsForm.valid\"\r\n                            class=\"bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 transition-colors\">\r\n                            Continue to Images\r\n                            <mat-icon class=\"ml-1\">arrow_forward</mat-icon>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </mat-step>\r\n\r\n            <!-- Step 4: Product Images -->\r\n            <mat-step>\r\n                <ng-template matStepLabel>Images</ng-template>\r\n                <div class=\"p-6\">\r\n                    <h2 class=\"text-lg font-medium text-slate-900 dark:text-white mb-4\">Product Images</h2>\r\n\r\n                    <p class=\"text-sm text-slate-500 dark:text-slate-400 mb-6\">\r\n                        Add images to showcase your product. The first image will be used as the main product image.\r\n                    </p>\r\n\r\n                    <app-product-image-manager [images]=\"images\" (imagesChange)=\"onImagesChange($event)\">\r\n                    </app-product-image-manager>\r\n\r\n                    <div class=\"flex justify-between mt-6\">\r\n                        <button mat-button matStepperPrevious\r\n                            class=\"border border-slate-300 dark:border-slate-600 px-4 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-700\">\r\n                            <mat-icon class=\"mr-1\">arrow_back</mat-icon>\r\n                            Back\r\n                        </button>\r\n                        <button mat-button matStepperNext color=\"primary\"\r\n                            class=\"bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 transition-colors\">\r\n                            Review Product\r\n                            <mat-icon class=\"ml-1\">arrow_forward</mat-icon>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </mat-step>\r\n\r\n            <!-- Step 5: Review & Submit -->\r\n            <mat-step>\r\n                <ng-template matStepLabel>Review & Submit</ng-template>\r\n                <div class=\"p-6\">\r\n                    <h2 class=\"text-lg font-medium text-slate-900 dark:text-white mb-4\">Review & Submit</h2>\r\n\r\n                    <p class=\"text-sm text-slate-500 dark:text-slate-400 mb-6\">\r\n                        Please review your product information below before submitting.\r\n                    </p>\r\n\r\n                    <!-- Product Summary -->\r\n                    <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n                        <div\r\n                            class=\"bg-slate-50 dark:bg-slate-700 p-4 rounded-lg border border-slate-200 dark:border-slate-700\">\r\n                            <h3 class=\"font-medium text-slate-800 dark:text-slate-200 mb-2\">Basic Information</h3>\r\n                            <div class=\"grid grid-cols-2 gap-2\">\r\n                                <p class=\"text-sm text-slate-500 dark:text-slate-400\">Name:</p>\r\n                                <p class=\"text-sm font-medium text-slate-900 dark:text-white\">{{\r\n                                    basicInfoForm.get('name')?.value }}</p>\r\n\r\n                                <p class=\"text-sm text-slate-500 dark:text-slate-400\">SKU:</p>\r\n                                <p class=\"text-sm font-medium text-slate-900 dark:text-white\">{{\r\n                                    basicInfoForm.get('sku')?.value }}</p>\r\n\r\n                                <p class=\"text-sm text-slate-500 dark:text-slate-400\">Barcode:</p>\r\n                                <p class=\"text-sm font-medium text-slate-900 dark:text-white\">{{\r\n                                    basicInfoForm.get('barcode')?.value || 'Not specified' }}</p>\r\n\r\n                                <p class=\"text-sm text-slate-500 dark:text-slate-400\">Category:</p>\r\n                                <p class=\"text-sm font-medium text-slate-900 dark:text-white\">\r\n                                    {{ getCategoryName(basicInfoForm.get('categoryId')?.value) }}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div\r\n                            class=\"bg-slate-50 dark:bg-slate-700 p-4 rounded-lg border border-slate-200 dark:border-slate-700\">\r\n                            <h3 class=\"font-medium text-slate-800 dark:text-slate-200 mb-2\">Pricing & Inventory</h3>\r\n                            <div class=\"grid grid-cols-2 gap-2\">\r\n                                <p class=\"text-sm text-slate-500 dark:text-slate-400\">Price:</p>\r\n                                <p class=\"text-sm font-medium text-slate-900 dark:text-white\">\r\n                                    {{ pricingForm.get('price')?.value | currency:pricingForm.get('currency')?.value }}\r\n                                </p>\r\n\r\n                                <p class=\"text-sm text-slate-500 dark:text-slate-400\">Compare-at Price:</p>\r\n                                <p class=\"text-sm font-medium text-slate-900 dark:text-white\">\r\n                                    {{ pricingForm.get('compareAtPrice')?.value ?\r\n                                    (pricingForm.get('compareAtPrice')?.value |\r\n                                    currency:pricingForm.get('currency')?.value) :\r\n                                    'Not specified' }}\r\n                                </p>\r\n\r\n                                <p class=\"text-sm text-slate-500 dark:text-slate-400\">Stock:</p>\r\n                                <p class=\"text-sm font-medium text-slate-900 dark:text-white\">{{\r\n                                    pricingForm.get('stock')?.value }} units</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Details Summary -->\r\n                    <div\r\n                        class=\"bg-slate-50 dark:bg-slate-700 p-4 rounded-lg border border-slate-200 dark:border-slate-700 mb-6\">\r\n                        <h3 class=\"font-medium text-slate-800 dark:text-slate-200 mb-2\">Product Details</h3>\r\n                        <div class=\"grid gap-2\">\r\n                            <div>\r\n                                <p class=\"text-sm text-slate-500 dark:text-slate-400\">Short Description:</p>\r\n                                <p class=\"text-sm font-medium text-slate-900 dark:text-white\">\r\n                                    {{ detailsForm.get('shortDescription')?.value || 'Not specified' }}\r\n                                </p>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <p class=\"text-sm text-slate-500 dark:text-slate-400\">Description:</p>\r\n                                <p class=\"text-sm font-medium text-slate-900 dark:text-white\">\r\n                                    {{ detailsForm.get('description')?.value }}\r\n                                </p>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <p class=\"text-sm text-slate-500 dark:text-slate-400\">Status:</p>\r\n                                <p class=\"text-sm font-medium text-slate-900 dark:text-white\">\r\n                                    {{ detailsForm.get('isActive')?.value ? 'Active' : 'Inactive' }}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Images Summary -->\r\n                    <div\r\n                        class=\"bg-slate-50 dark:bg-slate-700 p-4 rounded-lg border border-slate-200 dark:border-slate-700 mb-6\">\r\n                        <h3 class=\"font-medium text-slate-800 dark:text-slate-200 mb-2\">Product Images</h3>\r\n\r\n                        <div *ngIf=\"images.length > 0\" class=\"grid grid-cols-6 gap-4\">\r\n                            <div *ngFor=\"let image of images\" class=\"aspect-square\">\r\n                                <img [src]=\"image.url\" alt=\"Product image\"\r\n                                    class=\"w-full h-full object-cover rounded-md\">\r\n                            </div>\r\n                        </div>\r\n                        @if (images.length === 0) {\r\n                        <div class=\"text-center py-4\">\r\n                            <p class=\"text-sm text-slate-500 dark:text-slate-400\">No images added</p>\r\n                        </div>\r\n                        }\r\n                    </div>\r\n\r\n                    <div class=\"flex justify-between mt-6\">\r\n                        <div>\r\n                            <button mat-button matStepperPrevious\r\n                                class=\"border border-slate-300 dark:border-slate-600 px-4 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-700 mr-3\">\r\n                                <mat-icon class=\"mr-1\">arrow_back</mat-icon>\r\n                                Back\r\n                            </button>\r\n\r\n                            <button mat-button type=\"button\"\r\n                                class=\"border border-slate-300 dark:border-slate-600 px-4 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-700\"\r\n                                (click)=\"reset(); stepper.reset()\">\r\n                                <mat-icon class=\"mr-1\">refresh</mat-icon>\r\n                                Reset Form\r\n                            </button>\r\n                        </div>\r\n\r\n                        <button mat-raised-button color=\"primary\" type=\"button\"\r\n                            [disabled]=\"isSubmitting || !validateAllForms()\" (click)=\"submitProduct()\"\r\n                            class=\"bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 transition-colors flex items-center\">\r\n                            <mat-icon *ngIf=\"isSubmitting\" class=\"animate-spin mr-2\">autorenew</mat-icon>\r\n                            <span>{{ isSubmitting ? 'Submitting...' : 'Create Product' }}</span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </mat-step>\r\n        </mat-stepper>\r\n    </div>\r\n</div>"
        },
        {
            "name": "AdvancedSearchComponent",
            "id": "component-AdvancedSearchComponent-8824c5ecdd7f8024cb29befede654a27fbc6bda9cbd9bbe48c9e0cd79fffa9f2774c7159f0571edc40e2069194c13c5a2d5916cabc5d0fc59429eb1cc30fe383",
            "file": "src/app/features/orders/components/advanced-search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-advanced-search",
            "styleUrls": [],
            "styles": [
                "\n        .search-builder {\n            padding: 1rem;\n        }\n\n        .quick-filters {\n            margin-bottom: 1rem;\n        }\n\n        .filters-grid {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n            margin: 1rem 0;\n        }\n\n        .filter-row {\n            display: grid;\n            grid-template-columns: repeat(3, 1fr) auto;\n            gap: 1rem;\n            align-items: center;\n        }\n\n        .filter-actions {\n            display: flex;\n            gap: 1rem;\n            margin: 1rem 0;\n        }\n\n        .search-actions {\n            display: flex;\n            justify-content: flex-end;\n            gap: 1rem;\n            margin-top: 1rem;\n        }\n\n        .active-filters {\n            margin-top: 1rem;\n            \n            h4 {\n                margin: 0 0 0.5rem;\n                color: var(--text-secondary);\n            }\n        }\n    "
            ],
            "template": "<div class=\"search-builder\">\n    <!-- Quick Filters -->\n    <div class=\"quick-filters\">\n        <mat-chip-set>\n            @for (preset of searchPresets; track preset.name) {\n                <mat-chip\n                    (click)=\"applyPreset(preset)\"\n                    [attr.selected]=\"activePreset === preset.name ? true : null\">\n                    {{preset.label}}\n                </mat-chip>\n            }\n        </mat-chip-set>\n    </div>\n\n    <!-- Advanced Search Panel -->\n    <mat-expansion-panel>\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                Advanced Search\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <form [formGroup]=\"searchForm\" (ngSubmit)=\"applySearch()\">\n            <div class=\"filters-grid\" formArrayName=\"filters\">\n                @for (filter of filtersArray.controls; track filter; let i = $index) {\n                    <div class=\"filter-row\" [formGroupName]=\"i\">\n                        <!-- Field Selection -->\n                        <mat-form-field>\n                            <mat-label>Field</mat-label>\n                            <mat-select formControlName=\"field\" (selectionChange)=\"onFieldChange(i)\">\n                                @for (field of availableFields; track field.field) {\n                                    <mat-option [value]=\"field.field\">\n                                        {{field.label}}\n                                    </mat-option>\n                                }\n                            </mat-select>\n                        </mat-form-field>\n\n                        <!-- Operator Selection -->\n                        <mat-form-field>\n                            <mat-label>Operator</mat-label>\n                            <mat-select formControlName=\"operator\">\n                                @for (op of getOperators(filter.value.field); track op.value) {\n                                    <mat-option [value]=\"op.value\">\n                                        {{op.label}}\n                                    </mat-option>\n                                }\n                            </mat-select>\n                        </mat-form-field>\n\n                        <!-- Value Input -->\n                        @switch (getFieldType(filter.value.field)) {\n                            @case ('text') {\n                                <mat-form-field>\n                                    <input matInput formControlName=\"value\" placeholder=\"Value\">\n                                </mat-form-field>\n                            }\n                            @case ('select') {\n                                <mat-form-field>\n                                    <mat-select formControlName=\"value\">\n                                        @for (option of getFieldOptions(filter.value.field); track option.value) {\n                                            <mat-option [value]=\"option.value\">\n                                                {{option.label}}\n                                            </mat-option>\n                                        }\n                                    </mat-select>\n                                </mat-form-field>\n                            }\n                            @case ('number') {\n                                <mat-form-field>\n                                    <input matInput type=\"number\" formControlName=\"value\" placeholder=\"Value\">\n                                </mat-form-field>\n                            }\n                            @case ('date') {\n                                <mat-form-field>\n                                    <input matInput [matDatepicker]=\"picker\" formControlName=\"value\">\n                                    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                                    <mat-datepicker #picker></mat-datepicker>\n                                </mat-form-field>\n                            }\n                        }\n\n                        <!-- Remove Filter -->\n                        <button mat-icon-button (click)=\"removeFilter(i)\" type=\"button\">\n                            <mat-icon>remove_circle</mat-icon>\n                        </button>\n                    </div>\n                }\n            </div>\n\n            <!-- Add Filter Button -->\n            <div class=\"filter-actions\">\n                <button mat-button type=\"button\" (click)=\"addFilter()\">\n                    <mat-icon>add</mat-icon> Add Filter\n                </button>\n                <button mat-button type=\"button\" (click)=\"saveAsPreset()\"\n                        [disabled]=\"!searchForm.valid\">\n                    Save as Preset\n                </button>\n            </div>\n\n            <!-- Apply Filters -->\n            <div class=\"search-actions\">\n                <button mat-button type=\"button\" (click)=\"resetSearch()\">\n                    Reset\n                </button>\n                <button mat-raised-button color=\"primary\" type=\"submit\"\n                        [disabled]=\"!searchForm.valid\">\n                    Apply Filters\n                </button>\n            </div>\n        </form>\n    </mat-expansion-panel>\n\n    <!-- Active Filters Display -->\n    @if (activeFilters.length > 0) {\n        <div class=\"active-filters\">\n            <h4>Active Filters:</h4>\n            <mat-chip-set>\n                @for (filter of activeFilters; track filter) {\n                    <mat-chip (removed)=\"removeActiveFilter(filter)\">\n                        {{filter.label}}\n                        <mat-icon matChipRemove>cancel</mat-icon>\n                    </mat-chip>\n                }\n            </mat-chip-set>\n        </div>\n    }\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 218
                },
                {
                    "name": "activePreset",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 217
                },
                {
                    "name": "availableFields",
                    "defaultValue": "[\r\n        { field: 'orderNumber', label: 'Order Number', type: 'text' },\r\n        {\r\n            field: 'status', label: 'Status', type: 'select',\r\n            options: Object.entries(OrderStatus).map(([value, label]) => ({ value, label }))\r\n        },\r\n        { field: 'createdAt', label: 'Order Date', type: 'date' },\r\n        { field: 'total', label: 'Order Total', type: 'number' },\r\n        { field: 'customerEmail', label: 'Customer Email', type: 'text' },\r\n        {\r\n            field: 'shippingCarrier', label: 'Shipping Carrier', type: 'select',\r\n            options: [\r\n                { value: 'fedex', label: 'FedEx' },\r\n                { value: 'ups', label: 'UPS' },\r\n                { value: 'usps', label: 'USPS' }\r\n            ]\r\n        },\r\n        { field: 'shippingCountry', label: 'Shipping Country', type: 'text' },\r\n        {\r\n            field: 'paymentMethod', label: 'Payment Method', type: 'select',\r\n            options: [\r\n                { value: 'credit_card', label: 'Credit Card' },\r\n                { value: 'paypal', label: 'PayPal' },\r\n                { value: 'bank_transfer', label: 'Bank Transfer' }\r\n            ]\r\n        }\r\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterField[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 221
                },
                {
                    "name": "searchForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 216
                },
                {
                    "name": "searchPresets",
                    "defaultValue": "[\r\n        {\r\n            name: 'pending_orders',\r\n            label: 'Pending Orders',\r\n            filters: [\r\n                { field: 'status', operator: 'equals', value: 'pending' }\r\n            ]\r\n        },\r\n        {\r\n            name: 'todays_orders',\r\n            label: 'Today\\'s Orders',\r\n            filters: [\r\n                { field: 'createdAt', operator: 'equals', value: new Date() }\r\n            ]\r\n        },\r\n        {\r\n            name: 'high_value',\r\n            label: 'High Value Orders',\r\n            filters: [\r\n                { field: 'total', operator: 'greater_than', value: 1000 }\r\n            ]\r\n        }\r\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 250
                }
            ],
            "methodsClass": [
                {
                    "name": "addFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyPreset",
                    "args": [
                        {
                            "name": "preset",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 351,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "preset",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "applySearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFieldOptions",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFieldType",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 311,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOperators",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 319,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFieldChange",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 306,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeActiveFilter",
                    "args": [
                        {
                            "name": "filter",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 387,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFilter",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 397,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveAsPreset",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 405,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "updateActiveFilters",
                    "args": [
                        {
                            "name": "filters",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 374,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatChipsModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, FormArray, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Store } from '@ngrx/store';\r\nimport { OrderStatus } from 'src/app/shared/models/orders/order.model';\r\nimport { OrderActions } from 'src/app/store/order/order.actions';\r\n\r\ninterface FilterField {\r\n    type: 'text' | 'select' | 'number' | 'date' | 'boolean';\r\n    field: string;\r\n    label: string;\r\n    options?: { value: any; label: string; }[];\r\n}\r\n\r\n@Component({\r\n    selector: 'app-advanced-search',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        MatButtonModule,\r\n        MatExpansionModule,\r\n        MatFormFieldModule,\r\n        MatSelectModule,\r\n        MatInputModule,\r\n        MatChipsModule,\r\n        MatDatepickerModule,\r\n        MatIconModule\r\n    ],\r\n    template: `\r\n        <div class=\"search-builder\">\r\n            <!-- Quick Filters -->\r\n            <div class=\"quick-filters\">\r\n                <mat-chip-set>\r\n                    @for (preset of searchPresets; track preset.name) {\r\n                        <mat-chip \r\n                            (click)=\"applyPreset(preset)\"\r\n                            [attr.selected]=\"activePreset === preset.name ? true : null\">\r\n                            {{preset.label}}\r\n                        </mat-chip>\r\n                    }\r\n                </mat-chip-set>\r\n            </div>\r\n\r\n            <!-- Advanced Search Panel -->\r\n            <mat-expansion-panel>\r\n                <mat-expansion-panel-header>\r\n                    <mat-panel-title>\r\n                        Advanced Search\r\n                    </mat-panel-title>\r\n                </mat-expansion-panel-header>\r\n\r\n                <form [formGroup]=\"searchForm\" (ngSubmit)=\"applySearch()\">\r\n                    <div class=\"filters-grid\" formArrayName=\"filters\">\r\n                        @for (filter of filtersArray.controls; track filter; let i = $index) {\r\n                            <div class=\"filter-row\" [formGroupName]=\"i\">\r\n                                <!-- Field Selection -->\r\n                                <mat-form-field>\r\n                                    <mat-label>Field</mat-label>\r\n                                    <mat-select formControlName=\"field\" (selectionChange)=\"onFieldChange(i)\">\r\n                                        @for (field of availableFields; track field.field) {\r\n                                            <mat-option [value]=\"field.field\">\r\n                                                {{field.label}}\r\n                                            </mat-option>\r\n                                        }\r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n\r\n                                <!-- Operator Selection -->\r\n                                <mat-form-field>\r\n                                    <mat-label>Operator</mat-label>\r\n                                    <mat-select formControlName=\"operator\">\r\n                                        @for (op of getOperators(filter.value.field); track op.value) {\r\n                                            <mat-option [value]=\"op.value\">\r\n                                                {{op.label}}\r\n                                            </mat-option>\r\n                                        }\r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n\r\n                                <!-- Value Input -->\r\n                                @switch (getFieldType(filter.value.field)) {\r\n                                    @case ('text') {\r\n                                        <mat-form-field>\r\n                                            <input matInput formControlName=\"value\" placeholder=\"Value\">\r\n                                        </mat-form-field>\r\n                                    }\r\n                                    @case ('select') {\r\n                                        <mat-form-field>\r\n                                            <mat-select formControlName=\"value\">\r\n                                                @for (option of getFieldOptions(filter.value.field); track option.value) {\r\n                                                    <mat-option [value]=\"option.value\">\r\n                                                        {{option.label}}\r\n                                                    </mat-option>\r\n                                                }\r\n                                            </mat-select>\r\n                                        </mat-form-field>\r\n                                    }\r\n                                    @case ('number') {\r\n                                        <mat-form-field>\r\n                                            <input matInput type=\"number\" formControlName=\"value\" placeholder=\"Value\">\r\n                                        </mat-form-field>\r\n                                    }\r\n                                    @case ('date') {\r\n                                        <mat-form-field>\r\n                                            <input matInput [matDatepicker]=\"picker\" formControlName=\"value\">\r\n                                            <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                                            <mat-datepicker #picker></mat-datepicker>\r\n                                        </mat-form-field>\r\n                                    }\r\n                                }\r\n\r\n                                <!-- Remove Filter -->\r\n                                <button mat-icon-button (click)=\"removeFilter(i)\" type=\"button\">\r\n                                    <mat-icon>remove_circle</mat-icon>\r\n                                </button>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n\r\n                    <!-- Add Filter Button -->\r\n                    <div class=\"filter-actions\">\r\n                        <button mat-button type=\"button\" (click)=\"addFilter()\">\r\n                            <mat-icon>add</mat-icon> Add Filter\r\n                        </button>\r\n                        <button mat-button type=\"button\" (click)=\"saveAsPreset()\"\r\n                                [disabled]=\"!searchForm.valid\">\r\n                            Save as Preset\r\n                        </button>\r\n                    </div>\r\n\r\n                    <!-- Apply Filters -->\r\n                    <div class=\"search-actions\">\r\n                        <button mat-button type=\"button\" (click)=\"resetSearch()\">\r\n                            Reset\r\n                        </button>\r\n                        <button mat-raised-button color=\"primary\" type=\"submit\"\r\n                                [disabled]=\"!searchForm.valid\">\r\n                            Apply Filters\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </mat-expansion-panel>\r\n\r\n            <!-- Active Filters Display -->\r\n            @if (activeFilters.length > 0) {\r\n                <div class=\"active-filters\">\r\n                    <h4>Active Filters:</h4>\r\n                    <mat-chip-set>\r\n                        @for (filter of activeFilters; track filter) {\r\n                            <mat-chip (removed)=\"removeActiveFilter(filter)\">\r\n                                {{filter.label}}\r\n                                <mat-icon matChipRemove>cancel</mat-icon>\r\n                            </mat-chip>\r\n                        }\r\n                    </mat-chip-set>\r\n                </div>\r\n            }\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .search-builder {\r\n            padding: 1rem;\r\n        }\r\n\r\n        .quick-filters {\r\n            margin-bottom: 1rem;\r\n        }\r\n\r\n        .filters-grid {\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 1rem;\r\n            margin: 1rem 0;\r\n        }\r\n\r\n        .filter-row {\r\n            display: grid;\r\n            grid-template-columns: repeat(3, 1fr) auto;\r\n            gap: 1rem;\r\n            align-items: center;\r\n        }\r\n\r\n        .filter-actions {\r\n            display: flex;\r\n            gap: 1rem;\r\n            margin: 1rem 0;\r\n        }\r\n\r\n        .search-actions {\r\n            display: flex;\r\n            justify-content: flex-end;\r\n            gap: 1rem;\r\n            margin-top: 1rem;\r\n        }\r\n\r\n        .active-filters {\r\n            margin-top: 1rem;\r\n            \r\n            h4 {\r\n                margin: 0 0 0.5rem;\r\n                color: var(--text-secondary);\r\n            }\r\n        }\r\n    `]\r\n})\r\nexport class AdvancedSearchComponent implements OnInit {\r\n    searchForm: FormGroup;\r\n    activePreset: string | null = null;\r\n    activeFilters: Array<{ label: string; field: string; }> = [];\r\n\r\n    // Available fields for filtering\r\n    availableFields: FilterField[] = [\r\n        { field: 'orderNumber', label: 'Order Number', type: 'text' },\r\n        {\r\n            field: 'status', label: 'Status', type: 'select',\r\n            options: Object.entries(OrderStatus).map(([value, label]) => ({ value, label }))\r\n        },\r\n        { field: 'createdAt', label: 'Order Date', type: 'date' },\r\n        { field: 'total', label: 'Order Total', type: 'number' },\r\n        { field: 'customerEmail', label: 'Customer Email', type: 'text' },\r\n        {\r\n            field: 'shippingCarrier', label: 'Shipping Carrier', type: 'select',\r\n            options: [\r\n                { value: 'fedex', label: 'FedEx' },\r\n                { value: 'ups', label: 'UPS' },\r\n                { value: 'usps', label: 'USPS' }\r\n            ]\r\n        },\r\n        { field: 'shippingCountry', label: 'Shipping Country', type: 'text' },\r\n        {\r\n            field: 'paymentMethod', label: 'Payment Method', type: 'select',\r\n            options: [\r\n                { value: 'credit_card', label: 'Credit Card' },\r\n                { value: 'paypal', label: 'PayPal' },\r\n                { value: 'bank_transfer', label: 'Bank Transfer' }\r\n            ]\r\n        }\r\n    ];\r\n\r\n    // Common search presets\r\n    searchPresets = [\r\n        {\r\n            name: 'pending_orders',\r\n            label: 'Pending Orders',\r\n            filters: [\r\n                { field: 'status', operator: 'equals', value: 'pending' }\r\n            ]\r\n        },\r\n        {\r\n            name: 'todays_orders',\r\n            label: 'Today\\'s Orders',\r\n            filters: [\r\n                { field: 'createdAt', operator: 'equals', value: new Date() }\r\n            ]\r\n        },\r\n        {\r\n            name: 'high_value',\r\n            label: 'High Value Orders',\r\n            filters: [\r\n                { field: 'total', operator: 'greater_than', value: 1000 }\r\n            ]\r\n        }\r\n    ];\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private store: Store\r\n    ) {\r\n        this.searchForm = this.fb.group({\r\n            filters: this.fb.array([])\r\n        });\r\n    }\r\n\r\n    get filtersArray() {\r\n        return this.searchForm.get('filters') as FormArray;\r\n    }\r\n\r\n    ngOnInit() {\r\n        // Add initial empty filter\r\n        this.addFilter();\r\n    }\r\n\r\n    addFilter() {\r\n        const filterGroup = this.fb.group({\r\n            field: [''],\r\n            operator: [''],\r\n            value: ['']\r\n        });\r\n\r\n        this.filtersArray.push(filterGroup);\r\n    }\r\n\r\n    removeFilter(index: number) {\r\n        this.filtersArray.removeAt(index);\r\n    }\r\n\r\n    onFieldChange(index: number) {\r\n        const filter = this.filtersArray.at(index);\r\n        filter.patchValue({ operator: '', value: '' });\r\n    }\r\n\r\n    getFieldType(fieldName: string): string {\r\n        return this.availableFields.find(f => f.field === fieldName)?.type || 'text';\r\n    }\r\n\r\n    getFieldOptions(fieldName: string) {\r\n        return this.availableFields.find(f => f.field === fieldName)?.options || [];\r\n    }\r\n\r\n    getOperators(fieldName: string) {\r\n        const type = this.getFieldType(fieldName);\r\n        switch (type) {\r\n            case 'text':\r\n                return [\r\n                    { value: 'equals', label: 'Equals' },\r\n                    { value: 'contains', label: 'Contains' },\r\n                    { value: 'starts_with', label: 'Starts with' },\r\n                    { value: 'ends_with', label: 'Ends with' }\r\n                ];\r\n            case 'number':\r\n                return [\r\n                    { value: 'equals', label: 'Equals' },\r\n                    { value: 'greater_than', label: 'Greater than' },\r\n                    { value: 'less_than', label: 'Less than' },\r\n                    { value: 'between', label: 'Between' }\r\n                ];\r\n            case 'date':\r\n                return [\r\n                    { value: 'equals', label: 'On' },\r\n                    { value: 'after', label: 'After' },\r\n                    { value: 'before', label: 'Before' },\r\n                    { value: 'between', label: 'Between' }\r\n                ];\r\n            default:\r\n                return [\r\n                    { value: 'equals', label: 'Equals' },\r\n                    { value: 'not_equals', label: 'Does not equal' }\r\n                ];\r\n        }\r\n    }\r\n\r\n    applyPreset(preset: any) {\r\n        this.activePreset = preset.name;\r\n        this.filtersArray.clear();\r\n\r\n        preset.filters.forEach((filter: any) => {\r\n            this.filtersArray.push(this.fb.group({\r\n                field: [filter.field],\r\n                operator: [filter.operator],\r\n                value: [filter.value]\r\n            }));\r\n        });\r\n\r\n        this.applySearch();\r\n    }\r\n\r\n    applySearch() {\r\n        const filters = this.searchForm.value.filters;\r\n        this.store.dispatch(OrderActions.setFilters({ filters }));\r\n\r\n        // Update active filters display\r\n        this.updateActiveFilters(filters);\r\n    }\r\n\r\n    private updateActiveFilters(filters: any[]) {\r\n        this.activeFilters = filters.map(filter => {\r\n            const field = this.availableFields.find(f => f.field === filter.field);\r\n            const operator = this.getOperators(filter.field)\r\n                .find(op => op.value === filter.operator);\r\n\r\n            return {\r\n                field: filter.field,\r\n                label: `${field?.label} ${operator?.label} ${filter.value}`\r\n            };\r\n        });\r\n    }\r\n\r\n    removeActiveFilter(filter: any) {\r\n        const index = this.filtersArray.controls\r\n            .findIndex(control => control.value.field === filter.field);\r\n\r\n        if (index !== -1) {\r\n            this.removeFilter(index);\r\n            this.applySearch();\r\n        }\r\n    }\r\n\r\n    resetSearch() {\r\n        this.activePreset = null;\r\n        this.filtersArray.clear();\r\n        this.addFilter();\r\n        this.activeFilters = [];\r\n        this.store.dispatch(OrderActions.resetFilters());\r\n    }\r\n\r\n    async saveAsPreset() {\r\n        const dialogRef = this.dialog.open(SavePresetDialogComponent, {\r\n            data: {\r\n                filters: this.searchForm.value.filters\r\n            }\r\n        });\r\n\r\n        const result = await dialogRef.afterClosed().toPromise();\r\n        if (result) {\r\n            // Save preset logic\r\n        }\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        .search-builder {\n            padding: 1rem;\n        }\n\n        .quick-filters {\n            margin-bottom: 1rem;\n        }\n\n        .filters-grid {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n            margin: 1rem 0;\n        }\n\n        .filter-row {\n            display: grid;\n            grid-template-columns: repeat(3, 1fr) auto;\n            gap: 1rem;\n            align-items: center;\n        }\n\n        .filter-actions {\n            display: flex;\n            gap: 1rem;\n            margin: 1rem 0;\n        }\n\n        .search-actions {\n            display: flex;\n            justify-content: flex-end;\n            gap: 1rem;\n            margin-top: 1rem;\n        }\n\n        .active-filters {\n            margin-top: 1rem;\n            \n            h4 {\n                margin: 0 0 0.5rem;\n                color: var(--text-secondary);\n            }\n        }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 272,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "filtersArray": {
                    "name": "filtersArray",
                    "getSignature": {
                        "name": "filtersArray",
                        "type": "",
                        "returnType": "",
                        "line": 283
                    }
                }
            }
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-c76e583ce1436cb1a19133b6b8c2b15d52127514492ea21d4673be115fc06e28e6e61471137fd20b29e61d407873f81f10cccf86dedab5f3b35fda04f732490e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "template": "<app-main-layout>\n  <router-outlet></router-outlet>\n</app-main-layout>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "MainLayoutComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MainLayoutComponent } from './layout/main-layout/main-layout.component';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterOutlet, MainLayoutComponent],\r\n  template: `\r\n    <app-main-layout>\r\n      <router-outlet></router-outlet>\r\n    </app-main-layout>\r\n  `\r\n})\r\nexport class AppComponent { }",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "AuthLoadingComponent",
            "id": "component-AuthLoadingComponent-9728f0c1d13ae47592de91e06e6d81293ca6c80d174a383e82faf03db9d0f3eaf07bc2e9f77d4621e5013d23d123b7fac02feed5b7d61403dd24c8aecf62cca4",
            "file": "src/app/features/auth/auth-loading/auth-loading.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth-loading",
            "styleUrls": [],
            "styles": [
                "\n        .auth-loading-container {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 200px;\n        }\n    "
            ],
            "template": "@if (authState$ | async; as state) {\n    @if (state.loading) {\n        <div class=\"auth-loading-container\">\n            <app-loading-spinner\n                [message]=\"state.loadingMessage || 'Authenticating...'\"\n                [color]=\"'primary'\"\n                [size]=\"36\">\n            </app-loading-spinner>\n        </div>\n    }\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authState$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "LoadingSpinnerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AuthService } from '../../../core/services/auth.service';\r\nimport { LoadingSpinnerComponent } from '../../../shared/components/loading-spinner/loading-spinner.component';\r\n\r\n@Component({\r\n    selector: 'app-auth-loading',\r\n    standalone: true,\r\n    imports: [CommonModule, LoadingSpinnerComponent],\r\n    template: `\r\n        @if (authState$ | async; as state) {\r\n            @if (state.loading) {\r\n                <div class=\"auth-loading-container\">\r\n                    <app-loading-spinner\r\n                        [message]=\"state.loadingMessage || 'Authenticating...'\"\r\n                        [color]=\"'primary'\"\r\n                        [size]=\"36\">\r\n                    </app-loading-spinner>\r\n                </div>\r\n            }\r\n        }\r\n    `,\r\n    styles: [`\r\n        .auth-loading-container {\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            min-height: 200px;\r\n        }\r\n    `]\r\n})\r\nexport class AuthLoadingComponent {\r\n    authState$;\r\n\r\n    constructor(private readonly authService: AuthService) {\r\n        this.authState$ = this.authService.authState$;\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        .auth-loading-container {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 200px;\n        }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "BarcodeScannerComponent",
            "id": "component-BarcodeScannerComponent-231a7299e37aff20c19990d8c896520c6bb548616b86d9ae3cc80274acd984f80ec71d4a662987029a2d1025bbf5f7622ca5e247b8a7dd72924c217282383b68",
            "file": "src/app/features/products/components/barcode-scanner/barcode-scanner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-barcode-scanner",
            "styleUrls": [],
            "styles": [
                "\n    .barcode-scanner {\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n    }\n    \n    .scanner-container {\n      position: relative;\n      border-radius: 8px;\n      overflow: hidden;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n      margin-top: 1rem;\n    }\n    \n    .scanner-view {\n      position: relative;\n      width: 100%;\n      aspect-ratio: 4/3;\n      background-color: #000;\n    }\n    \n    video {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n    \n    .scanner-overlay {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(0, 0, 0, 0.5);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n    \n    .scanner-target {\n      width: 70%;\n      height: 30%;\n      border: 2px solid #3f51b5;\n      border-radius: 8px;\n      box-shadow: 0 0 0 2000px rgba(0, 0, 0, 0.3);\n      position: relative;\n    }\n    \n    .scanner-target::before {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 2px;\n      background-color: rgba(255, 255, 255, 0.7);\n      animation: scan 2s linear infinite;\n    }\n    \n    @keyframes scan {\n      0% { top: 0; }\n      50% { top: 100%; }\n      100% { top: 0; }\n    }\n    \n    .scanner-actions {\n      position: absolute;\n      bottom: 1rem;\n      right: 1rem;\n      display: flex;\n      gap: 0.5rem;\n    }\n    \n    .scanner-instructions {\n      padding: 0.5rem;\n      text-align: center;\n      background-color: #f5f5f5;\n      font-size: 0.875rem;\n    }\n    \n    .scanned-result {\n      background-color: #f5f5f5;\n      border-radius: 8px;\n      padding: 1rem;\n      margin-top: 1rem;\n    }\n    \n    .result-header {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      margin-bottom: 0.5rem;\n    }\n    \n    .result-header h4 {\n      margin: 0;\n    }\n    \n    .result-code {\n      font-family: monospace;\n      font-weight: bold;\n    }\n    \n    .result-type {\n      color: #666;\n      font-size: 0.875rem;\n      margin-bottom: 1rem;\n    }\n    \n    .result-actions {\n      display: flex;\n      gap: 0.5rem;\n    }\n  "
            ],
            "template": "<div class=\"barcode-scanner\">\n  <button\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"openScanner()\">\n    <mat-icon>qr_code_scanner</mat-icon>\n    Scan Barcode\n  </button>\n\n  <div class=\"scanner-container\" *ngIf=\"isScanning\">\n    <div class=\"scanner-view\">\n      <video #videoElement></video>\n      <div class=\"scanner-overlay\">\n        <div class=\"scanner-target\"></div>\n      </div>\n      <div class=\"scanner-actions\">\n        <button\n          mat-mini-fab\n          color=\"accent\"\n          (click)=\"toggleFlashlight()\">\n          <mat-icon>flashlight_on</mat-icon>\n        </button>\n        <button\n          mat-mini-fab\n          color=\"warn\"\n          (click)=\"stopScanner()\">\n          <mat-icon>close</mat-icon>\n        </button>\n      </div>\n    </div>\n\n    <div class=\"scanner-instructions\">\n      <p>Position barcode within the box</p>\n    </div>\n  </div>\n\n  <ng-container *ngIf=\"lastScannedCode\">\n    <div class=\"scanned-result\">\n      <div class=\"result-header\">\n        <h4>Scanned Code:</h4>\n        <span class=\"result-code\">{{ lastScannedCode }}</span>\n      </div>\n      <p class=\"result-type\" *ngIf=\"lastScannedType\">Type: {{ lastScannedType }}</p>\n      <div class=\"result-actions\">\n        <button\n          mat-button\n          color=\"primary\"\n          (click)=\"useScannedCode()\">\n          Use Code\n        </button>\n        <button\n          mat-button\n          (click)=\"clearLastScan()\">\n          Clear\n        </button>\n      </div>\n    </div>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "codeScanned",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 216,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "acceptedFormats",
                    "defaultValue": "input<BarcodeFormat[]>([\r\n    BarcodeFormat.UPC_A,\r\n    BarcodeFormat.UPC_E,\r\n    BarcodeFormat.EAN_8,\r\n    BarcodeFormat.EAN_13,\r\n    BarcodeFormat.CODE_39,\r\n    BarcodeFormat.CODE_128\r\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 207,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "codeReader",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BrowserMultiFormatReader | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 222,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 223,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hasFlashlight",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 224,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isFlashlightOn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 225,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isScanning",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 218
                },
                {
                    "name": "lastScannedCode",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 219
                },
                {
                    "name": "lastScannedType",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 220
                },
                {
                    "name": "mediaStream",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaStream | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 226,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "videoElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLVideoElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 206,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'videoElement'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearLastScan",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 350,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleScanResult",
                    "args": [
                        {
                            "name": "result",
                            "type": "Result",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 320,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "Result",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openScanner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startScanner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 261,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "stopScanner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleFlashlight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 307,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "useScannedCode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 343,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ViewChild, ElementRef, Output, EventEmitter, input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n// ZXing imports\r\nimport {\r\n  BrowserMultiFormatReader,\r\n  BarcodeFormat,\r\n  DecodeHintType,\r\n  Result,\r\n  NotFoundException\r\n} from '@zxing/library';\r\n\r\n@Component({\r\n  selector: 'app-barcode-scanner',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatDialogModule\r\n  ],\r\n  template: `\r\n    <div class=\"barcode-scanner\">\r\n      <button \r\n        mat-raised-button \r\n        color=\"primary\" \r\n        (click)=\"openScanner()\">\r\n        <mat-icon>qr_code_scanner</mat-icon>\r\n        Scan Barcode\r\n      </button>\r\n      \r\n      <div class=\"scanner-container\" *ngIf=\"isScanning\">\r\n        <div class=\"scanner-view\">\r\n          <video #videoElement></video>\r\n          <div class=\"scanner-overlay\">\r\n            <div class=\"scanner-target\"></div>\r\n          </div>\r\n          <div class=\"scanner-actions\">\r\n            <button \r\n              mat-mini-fab \r\n              color=\"accent\" \r\n              (click)=\"toggleFlashlight()\">\r\n              <mat-icon>flashlight_on</mat-icon>\r\n            </button>\r\n            <button \r\n              mat-mini-fab \r\n              color=\"warn\" \r\n              (click)=\"stopScanner()\">\r\n              <mat-icon>close</mat-icon>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"scanner-instructions\">\r\n          <p>Position barcode within the box</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <ng-container *ngIf=\"lastScannedCode\">\r\n        <div class=\"scanned-result\">\r\n          <div class=\"result-header\">\r\n            <h4>Scanned Code:</h4>\r\n            <span class=\"result-code\">{{ lastScannedCode }}</span>\r\n          </div>\r\n          <p class=\"result-type\" *ngIf=\"lastScannedType\">Type: {{ lastScannedType }}</p>\r\n          <div class=\"result-actions\">\r\n            <button \r\n              mat-button \r\n              color=\"primary\" \r\n              (click)=\"useScannedCode()\">\r\n              Use Code\r\n            </button>\r\n            <button \r\n              mat-button \r\n              (click)=\"clearLastScan()\">\r\n              Clear\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .barcode-scanner {\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 1rem;\r\n    }\r\n    \r\n    .scanner-container {\r\n      position: relative;\r\n      border-radius: 8px;\r\n      overflow: hidden;\r\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n      margin-top: 1rem;\r\n    }\r\n    \r\n    .scanner-view {\r\n      position: relative;\r\n      width: 100%;\r\n      aspect-ratio: 4/3;\r\n      background-color: #000;\r\n    }\r\n    \r\n    video {\r\n      width: 100%;\r\n      height: 100%;\r\n      object-fit: cover;\r\n    }\r\n    \r\n    .scanner-overlay {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n      background: rgba(0, 0, 0, 0.5);\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n    \r\n    .scanner-target {\r\n      width: 70%;\r\n      height: 30%;\r\n      border: 2px solid #3f51b5;\r\n      border-radius: 8px;\r\n      box-shadow: 0 0 0 2000px rgba(0, 0, 0, 0.3);\r\n      position: relative;\r\n    }\r\n    \r\n    .scanner-target::before {\r\n      content: '';\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 2px;\r\n      background-color: rgba(255, 255, 255, 0.7);\r\n      animation: scan 2s linear infinite;\r\n    }\r\n    \r\n    @keyframes scan {\r\n      0% { top: 0; }\r\n      50% { top: 100%; }\r\n      100% { top: 0; }\r\n    }\r\n    \r\n    .scanner-actions {\r\n      position: absolute;\r\n      bottom: 1rem;\r\n      right: 1rem;\r\n      display: flex;\r\n      gap: 0.5rem;\r\n    }\r\n    \r\n    .scanner-instructions {\r\n      padding: 0.5rem;\r\n      text-align: center;\r\n      background-color: #f5f5f5;\r\n      font-size: 0.875rem;\r\n    }\r\n    \r\n    .scanned-result {\r\n      background-color: #f5f5f5;\r\n      border-radius: 8px;\r\n      padding: 1rem;\r\n      margin-top: 1rem;\r\n    }\r\n    \r\n    .result-header {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.5rem;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n    \r\n    .result-header h4 {\r\n      margin: 0;\r\n    }\r\n    \r\n    .result-code {\r\n      font-family: monospace;\r\n      font-weight: bold;\r\n    }\r\n    \r\n    .result-type {\r\n      color: #666;\r\n      font-size: 0.875rem;\r\n      margin-bottom: 1rem;\r\n    }\r\n    \r\n    .result-actions {\r\n      display: flex;\r\n      gap: 0.5rem;\r\n    }\r\n  `]\r\n})\r\nexport class BarcodeScannerComponent implements OnInit, OnDestroy {\r\n  @ViewChild('videoElement') videoElement!: ElementRef<HTMLVideoElement>;\r\n  readonly acceptedFormats = input<BarcodeFormat[]>([\r\n    BarcodeFormat.UPC_A,\r\n    BarcodeFormat.UPC_E,\r\n    BarcodeFormat.EAN_8,\r\n    BarcodeFormat.EAN_13,\r\n    BarcodeFormat.CODE_39,\r\n    BarcodeFormat.CODE_128\r\n  ]);\r\n\r\n  @Output() codeScanned = new EventEmitter<string>();\r\n\r\n  isScanning = false;\r\n  lastScannedCode: string | null = null;\r\n  lastScannedType: string | null = null;\r\n\r\n  private codeReader: BrowserMultiFormatReader | null = null;\r\n  private destroy$ = new Subject<void>();\r\n  private hasFlashlight = false;\r\n  private isFlashlightOn = false;\r\n  private mediaStream: MediaStream | null = null;\r\n\r\n  constructor(private dialog: MatDialog) { }\r\n\r\n  ngOnInit(): void {\r\n    // Initialize barcode reader\r\n    this.codeReader = new BrowserMultiFormatReader();\r\n\r\n    // Set hints/formats\r\n    const hints = new Map();\r\n    hints.set(2, this.acceptedFormats());\r\n    this.codeReader.hints = hints;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.stopScanner();\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n\r\n    if (this.codeReader) {\r\n      this.codeReader.reset();\r\n    }\r\n  }\r\n\r\n  openScanner(): void {\r\n    if (this.isScanning) return;\r\n\r\n    this.isScanning = true;\r\n\r\n    // Request camera permissions and start scanning\r\n    setTimeout(() => {\r\n      this.startScanner();\r\n    }, 100);\r\n  }\r\n\r\n  private startScanner(): void {\r\n    if (!this.codeReader || !this.videoElement) return;\r\n\r\n    const videoElement = this.videoElement.nativeElement;\r\n\r\n    // Try to use the back camera if available\r\n    navigator.mediaDevices.getUserMedia({\r\n      video: { facingMode: 'environment' }\r\n    }).then(stream => {\r\n      this.mediaStream = stream;\r\n\r\n      // Check if flashlight is available\r\n      const track = stream.getVideoTracks()[0];\r\n      const capabilities = track.getCapabilities();\r\n      this.hasFlashlight = !!('torch' in capabilities);\r\n\r\n      // Start decoding from video\r\n      this.codeReader!.decodeFromStream(stream, videoElement, (result, error) => {\r\n        if (result) {\r\n          this.handleScanResult(result);\r\n        }\r\n\r\n        if (error && !(error instanceof NotFoundException)) {\r\n          console.error('Scan error:', error);\r\n        }\r\n      });\r\n    }).catch(err => {\r\n      console.error('Camera access error:', err);\r\n      this.isScanning = false;\r\n    });\r\n  }\r\n\r\n  stopScanner(): void {\r\n    if (this.codeReader) {\r\n      this.codeReader.reset();\r\n    }\r\n\r\n    if (this.mediaStream) {\r\n      this.mediaStream.getTracks().forEach(track => track.stop());\r\n      this.mediaStream = null;\r\n    }\r\n\r\n    this.isScanning = false;\r\n    this.isFlashlightOn = false;\r\n  }\r\n\r\n  toggleFlashlight(): void {\r\n    if (!this.mediaStream || !this.hasFlashlight) return;\r\n\r\n    const track = this.mediaStream.getVideoTracks()[0];\r\n    this.isFlashlightOn = !this.isFlashlightOn;\r\n\r\n    track.applyConstraints({\r\n      advanced: [{ torch: this.isFlashlightOn } as any]\r\n    }).catch(err => {\r\n      console.error('Flashlight error:', err);\r\n    });\r\n  }\r\n\r\n  private handleScanResult(result: Result): void {\r\n    const code = result.getText();\r\n    const format = result.getBarcodeFormat();\r\n\r\n    // Map format enum to readable string\r\n    let formatName = '';\r\n    switch (format) {\r\n      case BarcodeFormat.UPC_A: formatName = 'UPC-A'; break;\r\n      case BarcodeFormat.UPC_E: formatName = 'UPC-E'; break;\r\n      case BarcodeFormat.EAN_8: formatName = 'EAN-8'; break;\r\n      case BarcodeFormat.EAN_13: formatName = 'EAN-13'; break;\r\n      case BarcodeFormat.CODE_39: formatName = 'Code 39'; break;\r\n      case BarcodeFormat.CODE_128: formatName = 'Code 128'; break;\r\n      default: formatName = 'Unknown';\r\n    }\r\n\r\n    this.lastScannedCode = code;\r\n    this.lastScannedType = formatName;\r\n\r\n    // Stop scanning after successful scan\r\n    this.stopScanner();\r\n  }\r\n\r\n  useScannedCode(): void {\r\n    if (this.lastScannedCode) {\r\n      this.codeScanned.emit(this.lastScannedCode);\r\n      this.clearLastScan();\r\n    }\r\n  }\r\n\r\n  clearLastScan(): void {\r\n    this.lastScannedCode = null;\r\n    this.lastScannedType = null;\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .barcode-scanner {\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n    }\n    \n    .scanner-container {\n      position: relative;\n      border-radius: 8px;\n      overflow: hidden;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n      margin-top: 1rem;\n    }\n    \n    .scanner-view {\n      position: relative;\n      width: 100%;\n      aspect-ratio: 4/3;\n      background-color: #000;\n    }\n    \n    video {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n    \n    .scanner-overlay {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(0, 0, 0, 0.5);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n    \n    .scanner-target {\n      width: 70%;\n      height: 30%;\n      border: 2px solid #3f51b5;\n      border-radius: 8px;\n      box-shadow: 0 0 0 2000px rgba(0, 0, 0, 0.3);\n      position: relative;\n    }\n    \n    .scanner-target::before {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 2px;\n      background-color: rgba(255, 255, 255, 0.7);\n      animation: scan 2s linear infinite;\n    }\n    \n    @keyframes scan {\n      0% { top: 0; }\n      50% { top: 100%; }\n      100% { top: 0; }\n    }\n    \n    .scanner-actions {\n      position: absolute;\n      bottom: 1rem;\n      right: 1rem;\n      display: flex;\n      gap: 0.5rem;\n    }\n    \n    .scanner-instructions {\n      padding: 0.5rem;\n      text-align: center;\n      background-color: #f5f5f5;\n      font-size: 0.875rem;\n    }\n    \n    .scanned-result {\n      background-color: #f5f5f5;\n      border-radius: 8px;\n      padding: 1rem;\n      margin-top: 1rem;\n    }\n    \n    .result-header {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      margin-bottom: 0.5rem;\n    }\n    \n    .result-header h4 {\n      margin: 0;\n    }\n    \n    .result-code {\n      font-family: monospace;\n      font-weight: bold;\n    }\n    \n    .result-type {\n      color: #666;\n      font-size: 0.875rem;\n      margin-bottom: 1rem;\n    }\n    \n    .result-actions {\n      display: flex;\n      gap: 0.5rem;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 226,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "BulkActionsComponent",
            "id": "component-BulkActionsComponent-a0d3d2303afcf0264a9f6ce50ca5a3a3de709fbb7df7a684f5b83f0dd820be0dfb8d9af01c78ffdb8eb336e91a040c6dcd0d429064c22cd1698c3462ccb77b64",
            "file": "src/app/features/orders/order-list/bulk-actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bulk-actions",
            "styleUrls": [],
            "styles": [
                "\n        .bulk-actions {\n            position: fixed;\n            bottom: 0;\n            left: 0;\n            right: 0;\n            background-color: var(--bg-secondary);\n            padding: 1rem;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            border-top: 1px solid var(--border);\n            transform: translateY(100%);\n            transition: transform 0.3s ease;\n            z-index: 1000;\n\n            &.visible {\n                transform: translateY(0);\n            }\n        }\n\n        .selected-info {\n            display: flex;\n            align-items: center;\n            gap: 1rem;\n\n            .count {\n                font-weight: 500;\n                color: var(--text-primary);\n            }\n        }\n\n        .actions {\n            display: flex;\n            gap: 1rem;\n        }\n    "
            ],
            "template": "<div class=\"bulk-actions\" [class.visible]=\"selection.hasValue()\">\n    <div class=\"selected-info\">\n        <span class=\"count\">{{ selection.selected.length }} orders selected</span>\n        <button mat-button (click)=\"clearSelection()\">Clear</button>\n    </div>\n\n    <div class=\"actions\">\n        <!-- Status Update -->\n        <button mat-raised-button [matMenuTriggerFor]=\"statusMenu\" color=\"primary\">\n            Update Status\n        </button>\n        <mat-menu #statusMenu=\"matMenu\">\n            @for (status of orderStatuses; track status) {\n                <button mat-menu-item (click)=\"updateStatus(status)\">\n                    {{ status }}\n                </button>\n            }\n        </mat-menu>\n\n        <!-- Export -->\n        <button mat-raised-button [matMenuTriggerFor]=\"exportMenu\">\n            Export\n        </button>\n        <mat-menu #exportMenu=\"matMenu\">\n            <button mat-menu-item (click)=\"exportToCsv()\">\n                Export to CSV\n            </button>\n            <button mat-menu-item (click)=\"exportToExcel()\">\n                Export to Excel\n            </button>\n        </mat-menu>\n\n        <!-- Print -->\n        <button mat-raised-button [matMenuTriggerFor]=\"printMenu\">\n            Print\n        </button>\n        <mat-menu #printMenu=\"matMenu\">\n            <button mat-menu-item (click)=\"printInvoices()\">\n                Print Invoices\n            </button>\n            <button mat-menu-item (click)=\"printShippingLabels()\">\n                Print Shipping Labels\n            </button>\n            <button mat-menu-item (click)=\"printPackingSlips()\">\n                Print Packing Slips\n            </button>\n        </mat-menu>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113,
                    "type": "SelectionModel<Order>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "orderStatuses",
                    "defaultValue": "Object.values(OrderStatus)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 114
                }
            ],
            "methodsClass": [
                {
                    "name": "clearSelection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "exportToCsv",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "exportToExcel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prepareExportData",
                    "args": [],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "printInvoices",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "printPackingSlips",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "printShippingLabels",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "updateStatus",
                    "args": [
                        {
                            "name": "newStatus",
                            "type": "OrderStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "newStatus",
                            "type": "OrderStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { Store } from '@ngrx/store';\r\nimport * as XLSX from 'xlsx';\r\nimport { Order } from 'src/app/shared/models/orders/order.model';\r\nimport { BulkActionsService } from '../../../core/services/bulk-actions.service';\r\n\r\n@Component({\r\n    selector: 'app-bulk-actions',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        MatButtonModule,\r\n        MatMenuModule,\r\n        MatTooltipModule,\r\n        MatCheckboxModule\r\n    ],\r\n    template: `\r\n        <div class=\"bulk-actions\" [class.visible]=\"selection.hasValue()\">\r\n            <div class=\"selected-info\">\r\n                <span class=\"count\">{{ selection.selected.length }} orders selected</span>\r\n                <button mat-button (click)=\"clearSelection()\">Clear</button>\r\n            </div>\r\n\r\n            <div class=\"actions\">\r\n                <!-- Status Update -->\r\n                <button mat-raised-button [matMenuTriggerFor]=\"statusMenu\" color=\"primary\">\r\n                    Update Status\r\n                </button>\r\n                <mat-menu #statusMenu=\"matMenu\">\r\n                    @for (status of orderStatuses; track status) {\r\n                        <button mat-menu-item (click)=\"updateStatus(status)\">\r\n                            {{ status }}\r\n                        </button>\r\n                    }\r\n                </mat-menu>\r\n\r\n                <!-- Export -->\r\n                <button mat-raised-button [matMenuTriggerFor]=\"exportMenu\">\r\n                    Export\r\n                </button>\r\n                <mat-menu #exportMenu=\"matMenu\">\r\n                    <button mat-menu-item (click)=\"exportToCsv()\">\r\n                        Export to CSV\r\n                    </button>\r\n                    <button mat-menu-item (click)=\"exportToExcel()\">\r\n                        Export to Excel\r\n                    </button>\r\n                </mat-menu>\r\n\r\n                <!-- Print -->\r\n                <button mat-raised-button [matMenuTriggerFor]=\"printMenu\">\r\n                    Print\r\n                </button>\r\n                <mat-menu #printMenu=\"matMenu\">\r\n                    <button mat-menu-item (click)=\"printInvoices()\">\r\n                        Print Invoices\r\n                    </button>\r\n                    <button mat-menu-item (click)=\"printShippingLabels()\">\r\n                        Print Shipping Labels\r\n                    </button>\r\n                    <button mat-menu-item (click)=\"printPackingSlips()\">\r\n                        Print Packing Slips\r\n                    </button>\r\n                </mat-menu>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .bulk-actions {\r\n            position: fixed;\r\n            bottom: 0;\r\n            left: 0;\r\n            right: 0;\r\n            background-color: var(--bg-secondary);\r\n            padding: 1rem;\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            border-top: 1px solid var(--border);\r\n            transform: translateY(100%);\r\n            transition: transform 0.3s ease;\r\n            z-index: 1000;\r\n\r\n            &.visible {\r\n                transform: translateY(0);\r\n            }\r\n        }\r\n\r\n        .selected-info {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 1rem;\r\n\r\n            .count {\r\n                font-weight: 500;\r\n                color: var(--text-primary);\r\n            }\r\n        }\r\n\r\n        .actions {\r\n            display: flex;\r\n            gap: 1rem;\r\n        }\r\n    `]\r\n})\r\nexport class BulkActionsComponent {\r\n    @Input() selection: SelectionModel<Order>;\r\n    orderStatuses = Object.values(OrderStatus);\r\n\r\n    constructor(\r\n        private readonly bulkActionsService: BulkActionsService,\r\n        private readonly store: Store\r\n    ) { }\r\n\r\n    clearSelection() {\r\n        this.selection.clear();\r\n    }\r\n\r\n    async updateStatus(newStatus: OrderStatus) {\r\n        const confirmed = await this.dialogService.confirm(\r\n            `Are you sure you want to update ${this.selection.selected.length} orders to ${newStatus}?`,\r\n            'Update Status'\r\n        );\r\n\r\n        if (confirmed) {\r\n            const orderIds = this.selection.selected.map(order => order.id);\r\n            this.bulkActionsService.updateOrderStatus(orderIds, newStatus).subscribe({\r\n                next: () => {\r\n                    this.snackBar.open('Orders updated successfully', 'Close', {\r\n                        duration: 3000\r\n                    });\r\n                    this.clearSelection();\r\n                },\r\n                error: (error) => {\r\n                    this.errorService.addError({\r\n                        message: 'Failed to update orders: ' + error.message,\r\n                        code: error.code || 'UPDATE_ERROR',\r\n                        severity: 'error'\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    exportToCsv() {\r\n        const data = this.prepareExportData();\r\n        const csv = Papa.unparse(data);\r\n        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n        saveAs(blob, `orders_export_${new Date().toISOString()}.csv`);\r\n    }\r\n\r\n    exportToExcel() {\r\n        const data = this.prepareExportData();\r\n        const ws = XLSX.utils.json_to_sheet(data);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, 'Orders');\r\n        XLSX.writeFile(wb, `orders_export_${new Date().toISOString()}.xlsx`);\r\n    }\r\n\r\n    private prepareExportData(): any[] {\r\n        return this.selection.selected.map(order => ({\r\n            'Order Number': order.orderNumber,\r\n            'Date': new Date(order.createdAt).toLocaleDateString(),\r\n            'Status': order.status,\r\n            'Customer': `${order.shippingAddress.firstName} ${order.shippingAddress.lastName}`,\r\n            'Email': order.customerEmail,\r\n            'Total': `${order.total.amount} ${order.total.currency}`,\r\n            'Items': order.items.length,\r\n            'Shipping Method': order.shippingInfo?.carrier || 'N/A',\r\n            'Tracking Number': order.shippingInfo?.trackingNumber || 'N/A'\r\n        }));\r\n    }\r\n\r\n    async printInvoices() {\r\n        this.bulkActionsService.generateInvoices(this.selection.selected).subscribe({\r\n            next: (pdfBlob) => {\r\n                window.open(URL.createObjectURL(pdfBlob));\r\n            },\r\n            error: (error) => {\r\n                this.errorService.addError({\r\n                    message: 'Failed to generate invoices: ' + error.message,\r\n                    code: error.code || 'PRINT_ERROR',\r\n                    severity: 'error'\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    async printShippingLabels() {\r\n        this.bulkActionsService.generateShippingLabels(this.selection.selected).subscribe({\r\n            next: (pdfBlob) => {\r\n                window.open(URL.createObjectURL(pdfBlob));\r\n            },\r\n            error: (error) => {\r\n                this.errorService.addError({\r\n                    message: 'Failed to generate shipping labels: ' + error.message,\r\n                    code: error.code || 'PRINT_ERROR',\r\n                    severity: 'error'\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    async printPackingSlips() {\r\n        this.bulkActionsService.generatePackingSlips(this.selection.selected).subscribe({\r\n            next: (pdfBlob) => {\r\n                window.open(URL.createObjectURL(pdfBlob));\r\n            },\r\n            error: (error) => {\r\n                this.errorService.addError({\r\n                    message: 'Failed to generate packing slips: ' + error.message,\r\n                    code: error.code || 'PRINT_ERROR',\r\n                    severity: 'error'\r\n                });\r\n            }\r\n        });\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        .bulk-actions {\n            position: fixed;\n            bottom: 0;\n            left: 0;\n            right: 0;\n            background-color: var(--bg-secondary);\n            padding: 1rem;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            border-top: 1px solid var(--border);\n            transform: translateY(100%);\n            transition: transform 0.3s ease;\n            z-index: 1000;\n\n            &.visible {\n                transform: translateY(0);\n            }\n        }\n\n        .selected-info {\n            display: flex;\n            align-items: center;\n            gap: 1rem;\n\n            .count {\n                font-weight: 500;\n                color: var(--text-primary);\n            }\n        }\n\n        .actions {\n            display: flex;\n            gap: 1rem;\n        }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "bulkActionsService",
                        "type": "BulkActionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 114,
                "jsdoctags": [
                    {
                        "name": "bulkActionsService",
                        "type": "BulkActionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "BulkProductImportComponent",
            "id": "component-BulkProductImportComponent-a55ac1aee6c1aacea6ae1dda6689ee8598b978725d22c80571688015cbc6b7ee3821428f50137ebb472fa79ff75d1fe15d062fa2e9d6371598ecf257b6e6371f",
            "file": "src/app/features/products/components/bulk-product-import/bulk-product-import.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bulk-product-import",
            "styleUrls": [],
            "styles": [
                "\n    .import-container {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 1rem;\n    }\n    \n    .step-content {\n      margin: 1.5rem 0;\n    }\n    \n    .description {\n      color: #666;\n      margin-bottom: 1.5rem;\n    }\n    \n    .upload-area {\n      border: 2px dashed #ccc;\n      border-radius: 8px;\n      padding: 2rem;\n      text-align: center;\n      transition: all 0.2s ease;\n      cursor: pointer;\n      margin-bottom: 1.5rem;\n    }\n    \n    .upload-area.dragover {\n      border-color: #3f51b5;\n      background-color: rgba(63, 81, 181, 0.05);\n    }\n    \n    .upload-prompt {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 0.5rem;\n    }\n    \n    .upload-prompt mat-icon {\n      font-size: 48px;\n      width: 48px;\n      height: 48px;\n      color: #3f51b5;\n    }\n    \n    .file-info {\n      margin-top: 1rem;\n      background-color: #e3f2fd;\n      padding: 0.5rem 1rem;\n      border-radius: 4px;\n      font-size: 0.875rem;\n    }\n    \n    .template-section {\n      margin-top: 2rem;\n      padding: 1rem;\n      border-radius: 8px;\n    }\n    \n    .template-section h4 {\n      margin-top: 0;\n    }\n    \n    .step-actions {\n      display: flex;\n      justify-content: flex-end;\n      gap: 1rem;\n      margin-top: 2rem;\n    }\n    \n    .validation-actions,\n    .import-actions {\n      margin: 1.5rem 0;\n      display: flex;\n      justify-content: center;\n    }\n    \n    .validation-progress,\n    .import-progress {\n      margin: 1.5rem 0;\n      text-align: center;\n    }\n    \n    .import-status {\n      font-style: italic;\n      margin-top: 0.5rem;\n    }\n    \n    .results-summary {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 1rem;\n      margin-bottom: 1.5rem;\n    }\n    \n    .summary-card {\n      flex: 1;\n      min-width: 200px;\n      padding: 1rem;\n      border-radius: 8px;\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n    }\n    \n    .summary-card.valid,\n    .summary-card.success {\n      background-color: #e8f5e9;\n    }\n    \n    .summary-card.invalid,\n    .summary-card.failed {\n      background-color: #ffebee;\n    }\n    \n    .summary-card.total {\n      background-color: #e3f2fd;\n    }\n    \n    .summary-card.skipped {\n      background-color: #fff8e1;\n    }\n    \n    .summary-card mat-icon {\n      font-size: 32px;\n      width: 32px;\n      height: 32px;\n    }\n    \n    .summary-card.valid mat-icon,\n    .summary-card.success mat-icon {\n      color: #4caf50;\n    }\n    \n    .summary-card.invalid mat-icon,\n    .summary-card.failed mat-icon {\n      color: #f44336;\n    }\n    \n    .summary-card.total mat-icon {\n      color: #2196f3;\n    }\n    \n    .summary-card.skipped mat-icon {\n      color: #ff9800;\n    }\n    \n    .summary-values {\n      display: flex;\n      flex-direction: column;\n    }\n    \n    .summary-values .value {\n      font-size: 1.5rem;\n      font-weight: bold;\n    }\n    \n    .summary-values .label {\n      font-size: 0.875rem;\n      color: #666;\n    }\n    \n    .table-wrapper {\n      overflow-x: auto;\n      margin-bottom: 1.5rem;\n    }\n    \n    table {\n      width: 100%;\n      border-collapse: collapse;\n    }\n    \n    th, td {\n      padding: 0.75rem;\n      text-align: left;\n      border-bottom: 1px solid #eee;\n    }\n    \n    th {\n      background-color: #f5f5f5;\n      font-weight: bold;\n    }\n    \n    .error-list {\n      margin: 0;\n      padding-left: 1.5rem;\n      color: #f44336;\n    }\n    \n    .import-options {\n      margin: 1.5rem 0;\n      padding: 1rem;\n      background-color: #f5f5f5;\n      border-radius: 8px;\n    }\n    \n    .option {\n      margin-bottom: 0.5rem;\n    }\n    \n    .results-actions {\n      display: flex;\n      gap: 1rem;\n      margin-top: 1.5rem;\n      justify-content: center;\n    }\n  "
            ],
            "template": "<div class=\"import-container\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>Bulk Product Import</mat-card-title>\n      <mat-card-subtitle>\n        Import multiple products at once from Excel or CSV files\n      </mat-card-subtitle>\n    </mat-card-header>\n\n    <mat-card-content>\n      <mat-stepper linear #stepper>\n        <!-- Step 1: Upload File -->\n        <mat-step [completed]=\"!!workbook\">\n          <ng-template matStepLabel>Upload File</ng-template>\n\n          <div class=\"step-content\">\n            <h3>Upload Product Data</h3>\n            <p class=\"description\">Upload an Excel (.xlsx) or CSV file containing your product data.</p>\n\n            <div\n              class=\"upload-area\"\n              [class.dragover]=\"isDragging\"\n              (dragover)=\"onDragOver($event)\"\n              (dragleave)=\"onDragLeave($event)\"\n              (drop)=\"onDrop($event)\">\n\n              <div class=\"upload-prompt\">\n                <mat-icon>cloud_upload</mat-icon>\n                <p>Drag & drop your file here or</p>\n                <button\n                  mat-stroked-button\n                  color=\"primary\"\n                  (click)=\"fileInput.click()\">\n                  Browse Files\n                </button>\n                <input\n                  #fileInput\n                  type=\"file\"\n                  accept=\".xlsx,.csv\"\n                  style=\"display: none\"\n                  (change)=\"onFileSelected($event)\">\n\n                <p class=\"file-info\" *ngIf=\"fileName\">\n                  Selected file: <strong>{{ fileName }}</strong>\n                </p>\n              </div>\n            </div>\n\n            <div class=\"template-section\">\n              <h4>Need a template?</h4>\n              <p>Download our template file to get started:</p>\n              <button\n                mat-stroked-button\n                color=\"primary\"\n                (click)=\"downloadTemplate()\">\n                <mat-icon>download</mat-icon>\n                Download Template\n              </button>\n            </div>\n\n            <div class=\"step-actions\">\n              <button\n                mat-button\n                matStepperNext\n                color=\"primary\"\n                [disabled]=\"!workbook\">\n                Next\n              </button>\n            </div>\n          </div>\n        </mat-step>\n\n        <!-- Step 2: Validate Data -->\n        <mat-step [completed]=\"isValidationComplete\">\n          <ng-template matStepLabel>Validate Data</ng-template>\n\n          <div class=\"step-content\">\n            <h3>Validate Product Data</h3>\n            <p class=\"description\">Review and validate your product data before importing.</p>\n\n            <div class=\"validation-actions\">\n              <button\n                mat-raised-button\n                color=\"primary\"\n                [disabled]=\"isValidating\"\n                (click)=\"validateData()\">\n                <mat-icon>check_circle</mat-icon>\n                {{ isValidationComplete ? 'Re-validate Data' : 'Validate Data' }}\n              </button>\n            </div>\n\n            <div class=\"validation-progress\" *ngIf=\"isValidating\">\n              <mat-progress-bar mode=\"determinate\" [value]=\"validationProgress\"></mat-progress-bar>\n              <p>Validating... {{ validationProgress }}%</p>\n            </div>\n\n            <div class=\"validation-results\" *ngIf=\"isValidationComplete\">\n              <div class=\"results-summary\">\n                <div class=\"summary-card valid\">\n                  <mat-icon>check_circle</mat-icon>\n                  <div class=\"summary-values\">\n                    <span class=\"value\">{{ validRows.length }}</span>\n                    <span class=\"label\">Valid Rows</span>\n                  </div>\n                </div>\n\n                <div class=\"summary-card invalid\" *ngIf=\"invalidRows.length > 0\">\n                  <mat-icon>error</mat-icon>\n                  <div class=\"summary-values\">\n                    <span class=\"value\">{{ invalidRows.length }}</span>\n                    <span class=\"label\">Invalid Rows</span>\n                  </div>\n                </div>\n\n                <div class=\"summary-card total\">\n                  <mat-icon>list</mat-icon>\n                  <div class=\"summary-values\">\n                    <span class=\"value\">{{ processedRows.length }}</span>\n                    <span class=\"label\">Total Rows</span>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"results-table\" *ngIf=\"invalidRows.length > 0\">\n                <h4>Errors Found</h4>\n                <div class=\"table-wrapper\">\n                  <table>\n                    <thead>\n                      <tr>\n                        <th>Row</th>\n                        <th>Errors</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr *ngFor=\"let row of invalidRows\">\n                        <td>{{ row.rowNumber }}</td>\n                        <td>\n                          <ul class=\"error-list\">\n                            <li *ngFor=\"let error of row.errors\">{{ error }}</li>\n                          </ul>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"step-actions\">\n              <button mat-button matStepperPrevious>Back</button>\n              <button\n                mat-button\n                matStepperNext\n                color=\"primary\"\n                [disabled]=\"!isValidationComplete || validRows.length === 0\">\n                Next\n              </button>\n            </div>\n          </div>\n        </mat-step>\n\n        <!-- Step 3: Import Data -->\n        <mat-step>\n          <ng-template matStepLabel>Import Products</ng-template>\n\n          <div class=\"step-content\">\n            <h3>Import Products</h3>\n            <p class=\"description\">\n              Ready to import {{ validRows.length }} products. This process may take a few minutes.\n            </p>\n\n            <div class=\"import-options\">\n              <div class=\"option\">\n                <label>\n                  <input type=\"checkbox\" [(ngModel)]=\"importOptions.skipExisting\">\n                  Skip existing products (match by SKU)\n                </label>\n              </div>\n\n              <div class=\"option\">\n                <label>\n                  <input type=\"checkbox\" [(ngModel)]=\"importOptions.updateExisting\">\n                  Update existing products if found\n                </label>\n              </div>\n\n              <div class=\"option\">\n                <label>\n                  <input type=\"checkbox\" [(ngModel)]=\"importOptions.draftMode\">\n                  Import as draft (products will not be visible)\n                </label>\n              </div>\n            </div>\n\n            <div class=\"import-actions\">\n              <button\n                mat-raised-button\n                color=\"primary\"\n                [disabled]=\"isImporting || validRows.length === 0\"\n                (click)=\"importProducts()\">\n                <mat-icon>upload</mat-icon>\n                Import {{ validRows.length }} Products\n              </button>\n            </div>\n\n            <div class=\"import-progress\" *ngIf=\"isImporting\">\n              <mat-progress-bar mode=\"determinate\" [value]=\"importProgress\"></mat-progress-bar>\n              <p>Importing... {{ importProgress }}%</p>\n              <p class=\"import-status\">{{ currentImportStatus }}</p>\n            </div>\n\n            <div class=\"import-results\" *ngIf=\"isImportComplete\">\n              <div class=\"results-summary\">\n                <div class=\"summary-card success\">\n                  <mat-icon>check_circle</mat-icon>\n                  <div class=\"summary-values\">\n                    <span class=\"value\">{{ importResults.success }}</span>\n                    <span class=\"label\">Successfully Imported</span>\n                  </div>\n                </div>\n\n                <div class=\"summary-card skipped\" *ngIf=\"importResults.skipped > 0\">\n                  <mat-icon>skip_next</mat-icon>\n                  <div class=\"summary-values\">\n                    <span class=\"value\">{{ importResults.skipped }}</span>\n                    <span class=\"label\">Skipped</span>\n                  </div>\n                </div>\n\n                <div class=\"summary-card failed\" *ngIf=\"importResults.failed > 0\">\n                  <mat-icon>error</mat-icon>\n                  <div class=\"summary-values\">\n                    <span class=\"value\">{{ importResults.failed }}</span>\n                    <span class=\"label\">Failed</span>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"results-actions\">\n                <button\n                  mat-stroked-button\n                  (click)=\"downloadResultsReport()\">\n                  <mat-icon>download</mat-icon>\n                  Download Import Report\n                </button>\n\n                <button\n                  mat-stroked-button\n                  color=\"primary\"\n                  routerLink=\"/products/list\">\n                  <mat-icon>view_list</mat-icon>\n                  View Products\n                </button>\n              </div>\n            </div>\n\n            <div class=\"step-actions\">\n              <button mat-button matStepperPrevious [disabled]=\"isImporting\">Back</button>\n              <button\n                mat-button\n                (click)=\"resetImport()\"\n                [disabled]=\"isImporting\">\n                Start Over\n              </button>\n            </div>\n          </div>\n        </mat-step>\n      </mat-stepper>\n    </mat-card-content>\n  </mat-card>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 553
                },
                {
                    "name": "currentImportStatus",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 540
                },
                {
                    "name": "fileInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 523,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fileInput'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "fileName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 527
                },
                {
                    "name": "importOptions",
                    "defaultValue": "{\r\n    skipExisting: true,\r\n    updateExisting: false,\r\n    draftMode: true\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 541
                },
                {
                    "name": "importProgress",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 539
                },
                {
                    "name": "importResults",
                    "defaultValue": "{\r\n    success: 0,\r\n    failed: 0,\r\n    skipped: 0\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 546
                },
                {
                    "name": "isDragging",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 526
                },
                {
                    "name": "isImportComplete",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 538
                },
                {
                    "name": "isImporting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 537
                },
                {
                    "name": "isValidating",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 531
                },
                {
                    "name": "isValidationComplete",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 532
                },
                {
                    "name": "processedRows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ImportRow[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 534
                },
                {
                    "name": "productTypes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductType[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 554
                },
                {
                    "name": "validationProgress",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 533
                },
                {
                    "name": "workbook",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WorkBook | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 528
                }
            ],
            "methodsClass": [
                {
                    "name": "convertRowToProduct",
                    "args": [
                        {
                            "name": "row",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 1069,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadResultsReport",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1004,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "downloadTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 661,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findCategoryByName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Category | undefined",
                    "typeParameters": [],
                    "line": 1059,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findProductTypeById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProductType | undefined",
                    "typeParameters": [],
                    "line": 1065,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 621,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "importProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 899,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 564,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDragLeave",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 598,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 592,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 604,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFileSelected",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 614,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetImport",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 991,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validateData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 775,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validateRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ImportRow",
                    "typeParameters": [],
                    "line": 843,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatStepperModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressBarModule",
                    "type": "module"
                },
                {
                    "name": "MatSnackBarModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, ElementRef, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { read, utils, WorkBook, WorkSheet, write } from 'xlsx';\r\nimport { ProductService } from '../../../../core/services/product.service';\r\nimport { ErrorService } from '../../../../core/services/error.service';\r\nimport { CategoryService } from '../../../../core/services/category.service';\r\nimport { ProductTypeService } from '../../../../core/services/product-type.service';\r\nimport { Category } from '../../../../shared/models/category.model';\r\nimport { ProductType } from '../../../../shared/models/product-type.model';\r\nimport { forkJoin } from 'rxjs';\r\n\r\ninterface ImportRow {\r\n  rowNumber: number;\r\n  valid: boolean;\r\n  errors: string[];\r\n  data: Record<string, any>;\r\n  productId?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-bulk-product-import',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatStepperModule,\r\n    MatCardModule,\r\n    MatProgressBarModule,\r\n    MatSnackBarModule\r\n  ],\r\n  template: `\r\n    <div class=\"import-container\">\r\n      <mat-card>\r\n        <mat-card-header>\r\n          <mat-card-title>Bulk Product Import</mat-card-title>\r\n          <mat-card-subtitle>\r\n            Import multiple products at once from Excel or CSV files\r\n          </mat-card-subtitle>\r\n        </mat-card-header>\r\n        \r\n        <mat-card-content>\r\n          <mat-stepper linear #stepper>\r\n            <!-- Step 1: Upload File -->\r\n            <mat-step [completed]=\"!!workbook\">\r\n              <ng-template matStepLabel>Upload File</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>Upload Product Data</h3>\r\n                <p class=\"description\">Upload an Excel (.xlsx) or CSV file containing your product data.</p>\r\n                \r\n                <div \r\n                  class=\"upload-area\"\r\n                  [class.dragover]=\"isDragging\"\r\n                  (dragover)=\"onDragOver($event)\"\r\n                  (dragleave)=\"onDragLeave($event)\"\r\n                  (drop)=\"onDrop($event)\">\r\n                  \r\n                  <div class=\"upload-prompt\">\r\n                    <mat-icon>cloud_upload</mat-icon>\r\n                    <p>Drag & drop your file here or</p>\r\n                    <button \r\n                      mat-stroked-button \r\n                      color=\"primary\" \r\n                      (click)=\"fileInput.click()\">\r\n                      Browse Files\r\n                    </button>\r\n                    <input \r\n                      #fileInput \r\n                      type=\"file\" \r\n                      accept=\".xlsx,.csv\"\r\n                      style=\"display: none\"\r\n                      (change)=\"onFileSelected($event)\">\r\n                    \r\n                    <p class=\"file-info\" *ngIf=\"fileName\">\r\n                      Selected file: <strong>{{ fileName }}</strong>\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"template-section\">\r\n                  <h4>Need a template?</h4>\r\n                  <p>Download our template file to get started:</p>\r\n                  <button \r\n                    mat-stroked-button \r\n                    color=\"primary\"\r\n                    (click)=\"downloadTemplate()\">\r\n                    <mat-icon>download</mat-icon>\r\n                    Download Template\r\n                  </button>\r\n                </div>\r\n                \r\n                <div class=\"step-actions\">\r\n                  <button \r\n                    mat-button \r\n                    matStepperNext\r\n                    color=\"primary\"\r\n                    [disabled]=\"!workbook\">\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n            \r\n            <!-- Step 2: Validate Data -->\r\n            <mat-step [completed]=\"isValidationComplete\">\r\n              <ng-template matStepLabel>Validate Data</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>Validate Product Data</h3>\r\n                <p class=\"description\">Review and validate your product data before importing.</p>\r\n                \r\n                <div class=\"validation-actions\">\r\n                  <button \r\n                    mat-raised-button \r\n                    color=\"primary\"\r\n                    [disabled]=\"isValidating\"\r\n                    (click)=\"validateData()\">\r\n                    <mat-icon>check_circle</mat-icon>\r\n                    {{ isValidationComplete ? 'Re-validate Data' : 'Validate Data' }}\r\n                  </button>\r\n                </div>\r\n                \r\n                <div class=\"validation-progress\" *ngIf=\"isValidating\">\r\n                  <mat-progress-bar mode=\"determinate\" [value]=\"validationProgress\"></mat-progress-bar>\r\n                  <p>Validating... {{ validationProgress }}%</p>\r\n                </div>\r\n                \r\n                <div class=\"validation-results\" *ngIf=\"isValidationComplete\">\r\n                  <div class=\"results-summary\">\r\n                    <div class=\"summary-card valid\">\r\n                      <mat-icon>check_circle</mat-icon>\r\n                      <div class=\"summary-values\">\r\n                        <span class=\"value\">{{ validRows.length }}</span>\r\n                        <span class=\"label\">Valid Rows</span>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"summary-card invalid\" *ngIf=\"invalidRows.length > 0\">\r\n                      <mat-icon>error</mat-icon>\r\n                      <div class=\"summary-values\">\r\n                        <span class=\"value\">{{ invalidRows.length }}</span>\r\n                        <span class=\"label\">Invalid Rows</span>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"summary-card total\">\r\n                      <mat-icon>list</mat-icon>\r\n                      <div class=\"summary-values\">\r\n                        <span class=\"value\">{{ processedRows.length }}</span>\r\n                        <span class=\"label\">Total Rows</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div class=\"results-table\" *ngIf=\"invalidRows.length > 0\">\r\n                    <h4>Errors Found</h4>\r\n                    <div class=\"table-wrapper\">\r\n                      <table>\r\n                        <thead>\r\n                          <tr>\r\n                            <th>Row</th>\r\n                            <th>Errors</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          <tr *ngFor=\"let row of invalidRows\">\r\n                            <td>{{ row.rowNumber }}</td>\r\n                            <td>\r\n                              <ul class=\"error-list\">\r\n                                <li *ngFor=\"let error of row.errors\">{{ error }}</li>\r\n                              </ul>\r\n                            </td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"step-actions\">\r\n                  <button mat-button matStepperPrevious>Back</button>\r\n                  <button \r\n                    mat-button \r\n                    matStepperNext\r\n                    color=\"primary\"\r\n                    [disabled]=\"!isValidationComplete || validRows.length === 0\">\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n            \r\n            <!-- Step 3: Import Data -->\r\n            <mat-step>\r\n              <ng-template matStepLabel>Import Products</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>Import Products</h3>\r\n                <p class=\"description\">\r\n                  Ready to import {{ validRows.length }} products. This process may take a few minutes.\r\n                </p>\r\n                \r\n                <div class=\"import-options\">\r\n                  <div class=\"option\">\r\n                    <label>\r\n                      <input type=\"checkbox\" [(ngModel)]=\"importOptions.skipExisting\">\r\n                      Skip existing products (match by SKU)\r\n                    </label>\r\n                  </div>\r\n                  \r\n                  <div class=\"option\">\r\n                    <label>\r\n                      <input type=\"checkbox\" [(ngModel)]=\"importOptions.updateExisting\">\r\n                      Update existing products if found\r\n                    </label>\r\n                  </div>\r\n                  \r\n                  <div class=\"option\">\r\n                    <label>\r\n                      <input type=\"checkbox\" [(ngModel)]=\"importOptions.draftMode\">\r\n                      Import as draft (products will not be visible)\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"import-actions\">\r\n                  <button \r\n                    mat-raised-button \r\n                    color=\"primary\"\r\n                    [disabled]=\"isImporting || validRows.length === 0\"\r\n                    (click)=\"importProducts()\">\r\n                    <mat-icon>upload</mat-icon>\r\n                    Import {{ validRows.length }} Products\r\n                  </button>\r\n                </div>\r\n                \r\n                <div class=\"import-progress\" *ngIf=\"isImporting\">\r\n                  <mat-progress-bar mode=\"determinate\" [value]=\"importProgress\"></mat-progress-bar>\r\n                  <p>Importing... {{ importProgress }}%</p>\r\n                  <p class=\"import-status\">{{ currentImportStatus }}</p>\r\n                </div>\r\n                \r\n                <div class=\"import-results\" *ngIf=\"isImportComplete\">\r\n                  <div class=\"results-summary\">\r\n                    <div class=\"summary-card success\">\r\n                      <mat-icon>check_circle</mat-icon>\r\n                      <div class=\"summary-values\">\r\n                        <span class=\"value\">{{ importResults.success }}</span>\r\n                        <span class=\"label\">Successfully Imported</span>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"summary-card skipped\" *ngIf=\"importResults.skipped > 0\">\r\n                      <mat-icon>skip_next</mat-icon>\r\n                      <div class=\"summary-values\">\r\n                        <span class=\"value\">{{ importResults.skipped }}</span>\r\n                        <span class=\"label\">Skipped</span>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"summary-card failed\" *ngIf=\"importResults.failed > 0\">\r\n                      <mat-icon>error</mat-icon>\r\n                      <div class=\"summary-values\">\r\n                        <span class=\"value\">{{ importResults.failed }}</span>\r\n                        <span class=\"label\">Failed</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div class=\"results-actions\">\r\n                    <button \r\n                      mat-stroked-button \r\n                      (click)=\"downloadResultsReport()\">\r\n                      <mat-icon>download</mat-icon>\r\n                      Download Import Report\r\n                    </button>\r\n                    \r\n                    <button \r\n                      mat-stroked-button \r\n                      color=\"primary\"\r\n                      routerLink=\"/products/list\">\r\n                      <mat-icon>view_list</mat-icon>\r\n                      View Products\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"step-actions\">\r\n                  <button mat-button matStepperPrevious [disabled]=\"isImporting\">Back</button>\r\n                  <button \r\n                    mat-button \r\n                    (click)=\"resetImport()\"\r\n                    [disabled]=\"isImporting\">\r\n                    Start Over\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n          </mat-stepper>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .import-container {\r\n      max-width: 1200px;\r\n      margin: 0 auto;\r\n      padding: 1rem;\r\n    }\r\n    \r\n    .step-content {\r\n      margin: 1.5rem 0;\r\n    }\r\n    \r\n    .description {\r\n      color: #666;\r\n      margin-bottom: 1.5rem;\r\n    }\r\n    \r\n    .upload-area {\r\n      border: 2px dashed #ccc;\r\n      border-radius: 8px;\r\n      padding: 2rem;\r\n      text-align: center;\r\n      transition: all 0.2s ease;\r\n      cursor: pointer;\r\n      margin-bottom: 1.5rem;\r\n    }\r\n    \r\n    .upload-area.dragover {\r\n      border-color: #3f51b5;\r\n      background-color: rgba(63, 81, 181, 0.05);\r\n    }\r\n    \r\n    .upload-prompt {\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      gap: 0.5rem;\r\n    }\r\n    \r\n    .upload-prompt mat-icon {\r\n      font-size: 48px;\r\n      width: 48px;\r\n      height: 48px;\r\n      color: #3f51b5;\r\n    }\r\n    \r\n    .file-info {\r\n      margin-top: 1rem;\r\n      background-color: #e3f2fd;\r\n      padding: 0.5rem 1rem;\r\n      border-radius: 4px;\r\n      font-size: 0.875rem;\r\n    }\r\n    \r\n    .template-section {\r\n      margin-top: 2rem;\r\n      padding: 1rem;\r\n      border-radius: 8px;\r\n    }\r\n    \r\n    .template-section h4 {\r\n      margin-top: 0;\r\n    }\r\n    \r\n    .step-actions {\r\n      display: flex;\r\n      justify-content: flex-end;\r\n      gap: 1rem;\r\n      margin-top: 2rem;\r\n    }\r\n    \r\n    .validation-actions,\r\n    .import-actions {\r\n      margin: 1.5rem 0;\r\n      display: flex;\r\n      justify-content: center;\r\n    }\r\n    \r\n    .validation-progress,\r\n    .import-progress {\r\n      margin: 1.5rem 0;\r\n      text-align: center;\r\n    }\r\n    \r\n    .import-status {\r\n      font-style: italic;\r\n      margin-top: 0.5rem;\r\n    }\r\n    \r\n    .results-summary {\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      gap: 1rem;\r\n      margin-bottom: 1.5rem;\r\n    }\r\n    \r\n    .summary-card {\r\n      flex: 1;\r\n      min-width: 200px;\r\n      padding: 1rem;\r\n      border-radius: 8px;\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 1rem;\r\n    }\r\n    \r\n    .summary-card.valid,\r\n    .summary-card.success {\r\n      background-color: #e8f5e9;\r\n    }\r\n    \r\n    .summary-card.invalid,\r\n    .summary-card.failed {\r\n      background-color: #ffebee;\r\n    }\r\n    \r\n    .summary-card.total {\r\n      background-color: #e3f2fd;\r\n    }\r\n    \r\n    .summary-card.skipped {\r\n      background-color: #fff8e1;\r\n    }\r\n    \r\n    .summary-card mat-icon {\r\n      font-size: 32px;\r\n      width: 32px;\r\n      height: 32px;\r\n    }\r\n    \r\n    .summary-card.valid mat-icon,\r\n    .summary-card.success mat-icon {\r\n      color: #4caf50;\r\n    }\r\n    \r\n    .summary-card.invalid mat-icon,\r\n    .summary-card.failed mat-icon {\r\n      color: #f44336;\r\n    }\r\n    \r\n    .summary-card.total mat-icon {\r\n      color: #2196f3;\r\n    }\r\n    \r\n    .summary-card.skipped mat-icon {\r\n      color: #ff9800;\r\n    }\r\n    \r\n    .summary-values {\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n    \r\n    .summary-values .value {\r\n      font-size: 1.5rem;\r\n      font-weight: bold;\r\n    }\r\n    \r\n    .summary-values .label {\r\n      font-size: 0.875rem;\r\n      color: #666;\r\n    }\r\n    \r\n    .table-wrapper {\r\n      overflow-x: auto;\r\n      margin-bottom: 1.5rem;\r\n    }\r\n    \r\n    table {\r\n      width: 100%;\r\n      border-collapse: collapse;\r\n    }\r\n    \r\n    th, td {\r\n      padding: 0.75rem;\r\n      text-align: left;\r\n      border-bottom: 1px solid #eee;\r\n    }\r\n    \r\n    th {\r\n      background-color: #f5f5f5;\r\n      font-weight: bold;\r\n    }\r\n    \r\n    .error-list {\r\n      margin: 0;\r\n      padding-left: 1.5rem;\r\n      color: #f44336;\r\n    }\r\n    \r\n    .import-options {\r\n      margin: 1.5rem 0;\r\n      padding: 1rem;\r\n      background-color: #f5f5f5;\r\n      border-radius: 8px;\r\n    }\r\n    \r\n    .option {\r\n      margin-bottom: 0.5rem;\r\n    }\r\n    \r\n    .results-actions {\r\n      display: flex;\r\n      gap: 1rem;\r\n      margin-top: 1.5rem;\r\n      justify-content: center;\r\n    }\r\n  `]\r\n})\r\nexport class BulkProductImportComponent implements OnInit {\r\n  @ViewChild('fileInput') fileInput!: ElementRef<HTMLInputElement>;\r\n\r\n  // File upload\r\n  isDragging = false;\r\n  fileName = '';\r\n  workbook: WorkBook | null = null;\r\n\r\n  // Validation\r\n  isValidating = false;\r\n  isValidationComplete = false;\r\n  validationProgress = 0;\r\n  processedRows: ImportRow[] = [];\r\n\r\n  // Import\r\n  isImporting = false;\r\n  isImportComplete = false;\r\n  importProgress = 0;\r\n  currentImportStatus = '';\r\n  importOptions = {\r\n    skipExisting: true,\r\n    updateExisting: false,\r\n    draftMode: true\r\n  };\r\n  importResults = {\r\n    success: 0,\r\n    failed: 0,\r\n    skipped: 0\r\n  };\r\n\r\n  // Cached data\r\n  categories: Category[] = [];\r\n  productTypes: ProductType[] = [];\r\n\r\n  constructor(\r\n    private productService: ProductService,\r\n    private categoryService: CategoryService,\r\n    private productTypeService: ProductTypeService,\r\n    private errorService: ErrorService,\r\n    private snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    // Load reference data\r\n    forkJoin({\r\n      categories: this.categoryService.getCategories(),\r\n      productTypes: this.productTypeService.getProductTypes()\r\n    }).subscribe({\r\n      next: (data) => {\r\n        this.categories = data.categories;\r\n        this.productTypes = data.productTypes;\r\n      },\r\n      error: (error) => {\r\n        this.errorService.addError({\r\n          code: 'REFERENCE_DATA_ERROR',\r\n          message: 'Failed to load reference data',\r\n          severity: 'error'\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  get validRows(): ImportRow[] {\r\n    return this.processedRows.filter(row => row.valid);\r\n  }\r\n\r\n  get invalidRows(): ImportRow[] {\r\n    return this.processedRows.filter(row => !row.valid);\r\n  }\r\n\r\n  onDragOver(event: DragEvent): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.isDragging = true;\r\n  }\r\n\r\n  onDragLeave(event: DragEvent): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.isDragging = false;\r\n  }\r\n\r\n  onDrop(event: DragEvent): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.isDragging = false;\r\n\r\n    if (event.dataTransfer?.files.length) {\r\n      this.handleFile(event.dataTransfer.files[0]);\r\n    }\r\n  }\r\n\r\n  onFileSelected(event: Event): void {\r\n    const input = event.target as HTMLInputElement;\r\n    if (input.files?.length) {\r\n      this.handleFile(input.files[0]);\r\n    }\r\n  }\r\n\r\n  handleFile(file: File): void {\r\n    // Check file type\r\n    const validExtensions = ['.xlsx', '.csv'];\r\n    const fileExt = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();\r\n\r\n    if (!validExtensions.includes(fileExt)) {\r\n      this.errorService.addError({\r\n        code: 'INVALID_FILE_TYPE',\r\n        message: 'Please upload an Excel (.xlsx) or CSV file',\r\n        severity: 'warning'\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.fileName = file.name;\r\n\r\n    // Read file\r\n    const reader = new FileReader();\r\n    reader.onload = (e: ProgressEvent<FileReader>) => {\r\n      try {\r\n        const data = e.target?.result;\r\n        this.workbook = read(data, { type: 'array' });\r\n\r\n        // Reset validation state\r\n        this.isValidationComplete = false;\r\n        this.processedRows = [];\r\n      } catch (error) {\r\n        this.errorService.addError({\r\n          code: 'FILE_READ_ERROR',\r\n          message: 'Failed to read file. Please make sure it is a valid Excel or CSV file.',\r\n          severity: 'error'\r\n        });\r\n        this.workbook = null;\r\n        this.fileName = '';\r\n      }\r\n    };\r\n\r\n    reader.readAsArrayBuffer(file);\r\n  }\r\n\r\n  downloadTemplate(): void {\r\n    // Create template workbook\r\n    const wb = utils.book_new();\r\n\r\n    // Create headers\r\n    const headers = [\r\n      'name', 'description', 'shortDescription', 'sku', 'barcode',\r\n      'price', 'compareAtPrice', 'currency', 'stock', 'lowStockThreshold',\r\n      'categoryName', 'productType', 'status', 'visibility',\r\n      'imageUrl1', 'imageUrl2', 'imageUrl3',\r\n      'attribute1Name', 'attribute1Value', 'attribute2Name', 'attribute2Value',\r\n      'seoTitle', 'seoDescription', 'seoKeywords'\r\n    ];\r\n\r\n    // Create sample data\r\n    const sampleData = [\r\n      {\r\n        name: 'Sample T-Shirt',\r\n        description: 'A comfortable cotton t-shirt',\r\n        shortDescription: 'Cotton t-shirt',\r\n        sku: 'TS-001',\r\n        barcode: '123456789012',\r\n        price: 19.99,\r\n        compareAtPrice: 24.99,\r\n        currency: 'USD',\r\n        stock: 100,\r\n        lowStockThreshold: 10,\r\n        categoryName: 'Clothing',\r\n        productType: 'clothing',\r\n        status: 'active',\r\n        visibility: 'visible',\r\n        imageUrl1: 'https://example.com/image1.jpg',\r\n        imageUrl2: 'https://example.com/image2.jpg',\r\n        imageUrl3: '',\r\n        attribute1Name: 'sizes',\r\n        attribute1Value: 'S,M,L,XL',\r\n        attribute2Name: 'colors',\r\n        attribute2Value: 'Red,Blue,Green',\r\n        seoTitle: 'Sample T-Shirt - High Quality',\r\n        seoDescription: 'Buy our comfortable cotton t-shirt',\r\n        seoKeywords: 'tshirt,cotton,clothing'\r\n      },\r\n      {\r\n        name: 'Wireless Headphones',\r\n        description: 'Premium wireless headphones with noise cancellation',\r\n        shortDescription: 'Wireless headphones',\r\n        sku: 'HP-001',\r\n        barcode: '123456789013',\r\n        price: 149.99,\r\n        compareAtPrice: 199.99,\r\n        currency: 'USD',\r\n        stock: 50,\r\n        lowStockThreshold: 5,\r\n        categoryName: 'Electronics',\r\n        productType: 'electronics',\r\n        status: 'active',\r\n        visibility: 'featured',\r\n        imageUrl1: 'https://example.com/headphones1.jpg',\r\n        imageUrl2: '',\r\n        imageUrl3: '',\r\n        attribute1Name: 'brand',\r\n        attribute1Value: 'SoundMaster',\r\n        attribute2Name: 'color',\r\n        attribute2Value: 'Black',\r\n        seoTitle: 'Premium Wireless Headphones',\r\n        seoDescription: 'High-quality wireless headphones with noise cancellation',\r\n        seoKeywords: 'headphones,wireless,electronics'\r\n      }\r\n    ];\r\n\r\n    // Add instructions sheet\r\n    const instructionsWs = utils.aoa_to_sheet([\r\n      ['Product Import Template - Instructions'],\r\n      [''],\r\n      ['1. Do not modify the header row'],\r\n      ['2. Each row represents one product'],\r\n      ['3. Required fields: name, description, sku, price, currency, stock, categoryName, productType'],\r\n      ['4. Multiple attribute values should be comma-separated'],\r\n      ['5. Valid product types: ' + this.productTypes.map(t => t.id).join(', ')],\r\n      ['6. Valid statuses: draft, active, out_of_stock, discontinued'],\r\n      ['7. Valid visibility options: visible, hidden, featured'],\r\n      ['8. Valid currencies: USD, EUR, GBP, CAD, AUD']\r\n    ]);\r\n\r\n    // Adjust column widths for instructions\r\n    const instructionsCols = [{ wch: 80 }]; // Set width for first column\r\n    instructionsWs['!cols'] = instructionsCols;\r\n\r\n    // Add template sheet with headers and sample data\r\n    const templateWs = utils.json_to_sheet(sampleData, { header: headers });\r\n\r\n    // Adjust column widths for template\r\n    const templateCols = headers.map(h => ({ wch: 20 }));\r\n    templateWs['!cols'] = templateCols;\r\n\r\n    // Add sheets to workbook\r\n    utils.book_append_sheet(wb, instructionsWs, 'Instructions');\r\n    utils.book_append_sheet(wb, templateWs, 'Template');\r\n\r\n    // Generate buffer and create download link\r\n    const wbout = write(wb, { bookType: 'xlsx', type: 'array' });\r\n\r\n    // Create Blob and download\r\n    const blob = new Blob([wbout], { type: 'application/octet-stream' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = 'product_import_template.xlsx';\r\n    a.click();\r\n\r\n    // Clean up\r\n    URL.revokeObjectURL(url);\r\n  }\r\n\r\n  validateData(): void {\r\n    if (!this.workbook || this.isValidating) return;\r\n\r\n    this.isValidating = true;\r\n    this.validationProgress = 0;\r\n    this.processedRows = [];\r\n\r\n    // Get the first sheet\r\n    const sheetName = this.workbook.SheetNames[0];\r\n    const worksheet = this.workbook.Sheets[sheetName];\r\n\r\n    // Convert to JSON\r\n    const rows = utils.sheet_to_json(worksheet, { raw: false }) as Record<string, any>[];\r\n\r\n    if (rows.length === 0) {\r\n      this.errorService.addError({\r\n        code: 'EMPTY_FILE',\r\n        message: 'The file contains no data rows',\r\n        severity: 'warning'\r\n      });\r\n      this.isValidating = false;\r\n      return;\r\n    }\r\n\r\n    // Process rows in batches to avoid blocking UI\r\n    const batchSize = 10;\r\n    const totalRows = rows.length;\r\n    let processedCount = 0;\r\n\r\n    const processBatch = (startIndex: number) => {\r\n      const endIndex = Math.min(startIndex + batchSize, totalRows);\r\n\r\n      for (let i = startIndex; i < endIndex; i++) {\r\n        const row = rows[i];\r\n        this.processedRows.push(this.validateRow(row, i + 1));\r\n        processedCount++;\r\n      }\r\n\r\n      // Update progress\r\n      this.validationProgress = Math.round((processedCount / totalRows) * 100);\r\n\r\n      // Process next batch or finish\r\n      if (processedCount < totalRows) {\r\n        setTimeout(() => processBatch(endIndex), 0);\r\n      } else {\r\n        this.isValidating = false;\r\n        this.isValidationComplete = true;\r\n\r\n        if (this.invalidRows.length > 0) {\r\n          this.snackBar.open(\r\n            `Validation complete with ${this.invalidRows.length} errors`,\r\n            'Dismiss',\r\n            { duration: 5000 }\r\n          );\r\n        } else {\r\n          this.snackBar.open(\r\n            `All ${this.validRows.length} rows are valid`,\r\n            'Dismiss',\r\n            { duration: 3000 }\r\n          );\r\n        }\r\n      }\r\n    };\r\n\r\n    // Start processing\r\n    processBatch(0);\r\n  }\r\n\r\n  validateRow(row: Record<string, any>, rowNumber: number): ImportRow {\r\n    const errors: string[] = [];\r\n    const data = { ...row };\r\n\r\n    // Required fields validation\r\n    const requiredFields = ['name', 'description', 'sku', 'price', 'stock', 'categoryName', 'productType'];\r\n\r\n    for (const field of requiredFields) {\r\n      if (!row[field]) {\r\n        errors.push(`Missing required field: ${field}`);\r\n      }\r\n    }\r\n\r\n    // Price validation\r\n    if (row['price'] && isNaN(parseFloat(row['price']))) {\r\n      errors.push('Price must be a number');\r\n    }\r\n\r\n    // Stock validation\r\n    if (row['stock'] && isNaN(parseInt(row['stock']))) {\r\n      errors.push('Stock must be an integer');\r\n    }\r\n\r\n    // Category validation\r\n    if (row['categoryName'] && !this.findCategoryByName(row['categoryName'])) {\r\n      errors.push(`Category not found: ${row['categoryName']}`);\r\n    }\r\n\r\n    // Product type validation\r\n    if (row['productType'] && !this.findProductTypeById(row['productType'])) {\r\n      errors.push(`Product type not found: ${row['productType']}`);\r\n    }\r\n\r\n    // Status validation\r\n    if (row['status'] && !['draft', 'active', 'out_of_stock', 'discontinued'].includes(row['status'].toLowerCase())) {\r\n      errors.push(`Invalid status: ${row['status']}. Must be one of: draft, active, out_of_stock, discontinued`);\r\n    }\r\n\r\n    // Visibility validation\r\n    if (row['visibility'] && !['visible', 'hidden', 'featured'].includes(row['visibility'].toLowerCase())) {\r\n      errors.push(`Invalid visibility: ${row['visibility']}. Must be one of: visible, hidden, featured`);\r\n    }\r\n\r\n    // Currency validation\r\n    if (row['currency'] && !['USD', 'EUR', 'GBP', 'CAD', 'AUD'].includes(row['currency'].toUpperCase())) {\r\n      errors.push(`Invalid currency: ${row['currency']}. Must be one of: USD, EUR, GBP, CAD, AUD`);\r\n    }\r\n\r\n    return {\r\n      rowNumber,\r\n      valid: errors.length === 0,\r\n      errors,\r\n      data\r\n    };\r\n  }\r\n\r\n  importProducts(): void {\r\n    if (this.isImporting || this.validRows.length === 0) return;\r\n\r\n    this.isImporting = true;\r\n    this.isImportComplete = false;\r\n    this.importProgress = 0;\r\n    this.currentImportStatus = 'Preparing import...';\r\n\r\n    // Reset results\r\n    this.importResults = {\r\n      success: 0,\r\n      failed: 0,\r\n      skipped: 0\r\n    };\r\n\r\n    // Process rows in batches\r\n    const batchSize = 5; // Small batch size for API calls\r\n    const totalRows = this.validRows.length;\r\n    let processedCount = 0;\r\n\r\n    const processBatch = async (startIndex: number) => {\r\n      const endIndex = Math.min(startIndex + batchSize, totalRows);\r\n\r\n      for (let i = startIndex; i < endIndex; i++) {\r\n        const row = this.validRows[i];\r\n        this.currentImportStatus = `Importing product ${i + 1} of ${totalRows}: ${row.data['name']}`;\r\n\r\n        try {\r\n          // If skip existing is enabled, check if product exists\r\n          if (this.importOptions.skipExisting) {\r\n            // In a real app, we would check if the product exists\r\n            // For now, we'll simulate this with a random outcome\r\n            const exists = Math.random() > 0.8;\r\n\r\n            if (exists) {\r\n              if (this.importOptions.updateExisting) {\r\n                // Update existing product\r\n                row.productId = 'updated-' + Math.random().toString(36).substring(2);\r\n                this.importResults.success++;\r\n              } else {\r\n                // Skip existing product\r\n                row.productId = 'skipped';\r\n                this.importResults.skipped++;\r\n                processedCount++;\r\n                continue;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Convert row data to product\r\n          const product = this.convertRowToProduct(row.data);\r\n\r\n          // Simulate API call\r\n          await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));\r\n\r\n          // Simulate success (90% chance)\r\n          if (Math.random() > 0.1) {\r\n            row.productId = 'imported-' + Math.random().toString(36).substring(2);\r\n            this.importResults.success++;\r\n          } else {\r\n            throw new Error('Simulated import failure');\r\n          }\r\n        } catch (error) {\r\n          console.error('Import error for row', row.rowNumber, error);\r\n          row.errors.push('Import failed: ' + (error as Error).message);\r\n          this.importResults.failed++;\r\n        }\r\n\r\n        processedCount++;\r\n        this.importProgress = Math.round((processedCount / totalRows) * 100);\r\n      }\r\n\r\n      // Process next batch or finish\r\n      if (processedCount < totalRows) {\r\n        setTimeout(() => processBatch(endIndex), 0);\r\n      } else {\r\n        this.isImporting = false;\r\n        this.isImportComplete = true;\r\n        this.currentImportStatus = 'Import complete!';\r\n\r\n        this.snackBar.open(\r\n          `Import complete: ${this.importResults.success} succeeded, ${this.importResults.failed} failed, ${this.importResults.skipped} skipped`,\r\n          'Dismiss',\r\n          { duration: 5000 }\r\n        );\r\n      }\r\n    };\r\n\r\n    // Start processing\r\n    processBatch(0);\r\n  }\r\n\r\n  resetImport(): void {\r\n    this.workbook = null;\r\n    this.fileName = '';\r\n    this.isValidationComplete = false;\r\n    this.processedRows = [];\r\n    this.isImportComplete = false;\r\n\r\n    // Reset file input\r\n    if (this.fileInput?.nativeElement) {\r\n      this.fileInput.nativeElement.value = '';\r\n    }\r\n  }\r\n\r\n  downloadResultsReport(): void {\r\n    // Create report workbook\r\n    const wb = utils.book_new();\r\n\r\n    // Prepare data\r\n    const reportData = this.processedRows.map(row => ({\r\n      'Row': row.rowNumber,\r\n      'Product Name': row.data['name'],\r\n      'SKU': row.data['sku'],\r\n      'Status': row.valid ? (row.productId ? 'Imported' : 'Ready') : 'Invalid',\r\n      'Product ID': row.productId || '',\r\n      'Errors': row.errors.join('; ')\r\n    }));\r\n\r\n    // Create summary sheet\r\n    const summaryData = [\r\n      ['Import Results Summary'],\r\n      [''],\r\n      ['Date:', new Date().toLocaleString()],\r\n      ['File:', this.fileName],\r\n      [''],\r\n      ['Total Rows:', this.processedRows.length],\r\n      ['Valid Rows:', this.validRows.length],\r\n      ['Invalid Rows:', this.invalidRows.length],\r\n      [''],\r\n      ['Import Results:'],\r\n      ['Successfully Imported:', this.importResults.success],\r\n      ['Failed:', this.importResults.failed],\r\n      ['Skipped:', this.importResults.skipped]\r\n    ];\r\n\r\n    const summaryWs = utils.aoa_to_sheet(summaryData);\r\n\r\n    // Create details sheet\r\n    const detailsWs = utils.json_to_sheet(reportData);\r\n\r\n    // Add sheets to workbook\r\n    utils.book_append_sheet(wb, summaryWs, 'Summary');\r\n    utils.book_append_sheet(wb, detailsWs, 'Details');\r\n\r\n    // Generate buffer and create download link\r\n    const wbout = write(wb, { bookType: 'xlsx', type: 'array' });\r\n\r\n    // Create Blob and download\r\n    const blob = new Blob([wbout], { type: 'application/octet-stream' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `product_import_report_${new Date().toISOString().slice(0, 10)}.xlsx`;\r\n    a.click();\r\n\r\n    // Clean up\r\n    URL.revokeObjectURL(url);\r\n  }\r\n\r\n  private findCategoryByName(name: string): Category | undefined {\r\n    return this.categories.find(c =>\r\n      c.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n  }\r\n\r\n  private findProductTypeById(id: string): ProductType | undefined {\r\n    return this.productTypes.find(t => t.id === id);\r\n  }\r\n\r\n  private convertRowToProduct(row: Record<string, any>): any {\r\n    // In a real app, this would convert the row data to a proper product object\r\n    // For now, we'll just return a simplified version\r\n\r\n    const category = this.findCategoryByName(row['categoryName']);\r\n\r\n    return {\r\n      name: row['name'],\r\n      description: row['description'],\r\n      shortDescription: row['shortDescription'],\r\n      sku: row['sku'],\r\n      barcode: row['barcode'],\r\n      price: parseFloat(row['price']),\r\n      currency: (row['currency'] || 'USD').toUpperCase(),\r\n      compareAtPrice: row['compareAtPrice'] ? parseFloat(row['compareAtPrice']) : undefined,\r\n      categoryId: category?.id,\r\n      stock: parseInt(row['stock']),\r\n      lowStockThreshold: row['lowStockThreshold'] ? parseInt(row['lowStockThreshold']) : undefined,\r\n      status: row['status'] || (this.importOptions.draftMode ? 'draft' : 'active'),\r\n      visibility: row['visibility'] || (this.importOptions.draftMode ? 'hidden' : 'visible'),\r\n      productTypeId: row['productType'],\r\n      // Images would be processed here\r\n      // Attributes would be processed here\r\n    };\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .import-container {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 1rem;\n    }\n    \n    .step-content {\n      margin: 1.5rem 0;\n    }\n    \n    .description {\n      color: #666;\n      margin-bottom: 1.5rem;\n    }\n    \n    .upload-area {\n      border: 2px dashed #ccc;\n      border-radius: 8px;\n      padding: 2rem;\n      text-align: center;\n      transition: all 0.2s ease;\n      cursor: pointer;\n      margin-bottom: 1.5rem;\n    }\n    \n    .upload-area.dragover {\n      border-color: #3f51b5;\n      background-color: rgba(63, 81, 181, 0.05);\n    }\n    \n    .upload-prompt {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 0.5rem;\n    }\n    \n    .upload-prompt mat-icon {\n      font-size: 48px;\n      width: 48px;\n      height: 48px;\n      color: #3f51b5;\n    }\n    \n    .file-info {\n      margin-top: 1rem;\n      background-color: #e3f2fd;\n      padding: 0.5rem 1rem;\n      border-radius: 4px;\n      font-size: 0.875rem;\n    }\n    \n    .template-section {\n      margin-top: 2rem;\n      padding: 1rem;\n      border-radius: 8px;\n    }\n    \n    .template-section h4 {\n      margin-top: 0;\n    }\n    \n    .step-actions {\n      display: flex;\n      justify-content: flex-end;\n      gap: 1rem;\n      margin-top: 2rem;\n    }\n    \n    .validation-actions,\n    .import-actions {\n      margin: 1.5rem 0;\n      display: flex;\n      justify-content: center;\n    }\n    \n    .validation-progress,\n    .import-progress {\n      margin: 1.5rem 0;\n      text-align: center;\n    }\n    \n    .import-status {\n      font-style: italic;\n      margin-top: 0.5rem;\n    }\n    \n    .results-summary {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 1rem;\n      margin-bottom: 1.5rem;\n    }\n    \n    .summary-card {\n      flex: 1;\n      min-width: 200px;\n      padding: 1rem;\n      border-radius: 8px;\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n    }\n    \n    .summary-card.valid,\n    .summary-card.success {\n      background-color: #e8f5e9;\n    }\n    \n    .summary-card.invalid,\n    .summary-card.failed {\n      background-color: #ffebee;\n    }\n    \n    .summary-card.total {\n      background-color: #e3f2fd;\n    }\n    \n    .summary-card.skipped {\n      background-color: #fff8e1;\n    }\n    \n    .summary-card mat-icon {\n      font-size: 32px;\n      width: 32px;\n      height: 32px;\n    }\n    \n    .summary-card.valid mat-icon,\n    .summary-card.success mat-icon {\n      color: #4caf50;\n    }\n    \n    .summary-card.invalid mat-icon,\n    .summary-card.failed mat-icon {\n      color: #f44336;\n    }\n    \n    .summary-card.total mat-icon {\n      color: #2196f3;\n    }\n    \n    .summary-card.skipped mat-icon {\n      color: #ff9800;\n    }\n    \n    .summary-values {\n      display: flex;\n      flex-direction: column;\n    }\n    \n    .summary-values .value {\n      font-size: 1.5rem;\n      font-weight: bold;\n    }\n    \n    .summary-values .label {\n      font-size: 0.875rem;\n      color: #666;\n    }\n    \n    .table-wrapper {\n      overflow-x: auto;\n      margin-bottom: 1.5rem;\n    }\n    \n    table {\n      width: 100%;\n      border-collapse: collapse;\n    }\n    \n    th, td {\n      padding: 0.75rem;\n      text-align: left;\n      border-bottom: 1px solid #eee;\n    }\n    \n    th {\n      background-color: #f5f5f5;\n      font-weight: bold;\n    }\n    \n    .error-list {\n      margin: 0;\n      padding-left: 1.5rem;\n      color: #f44336;\n    }\n    \n    .import-options {\n      margin: 1.5rem 0;\n      padding: 1rem;\n      background-color: #f5f5f5;\n      border-radius: 8px;\n    }\n    \n    .option {\n      margin-bottom: 0.5rem;\n    }\n    \n    .results-actions {\n      display: flex;\n      gap: 1rem;\n      margin-top: 1.5rem;\n      justify-content: center;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productTypeService",
                        "type": "ProductTypeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 554,
                "jsdoctags": [
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productTypeService",
                        "type": "ProductTypeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "validRows": {
                    "name": "validRows",
                    "getSignature": {
                        "name": "validRows",
                        "type": "[]",
                        "returnType": "ImportRow[]",
                        "line": 584
                    }
                },
                "invalidRows": {
                    "name": "invalidRows",
                    "getSignature": {
                        "name": "invalidRows",
                        "type": "[]",
                        "returnType": "ImportRow[]",
                        "line": 588
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "CallbackComponent",
            "id": "component-CallbackComponent-1f454d90d522c45d8dd292ee14ecb8fc649c368f81e3c1a7ab912b55a6733bfa3bfac3f61429b023eb6c1db3e52c3d8afa1f7fc084df3856b263ebfd561dd12a",
            "file": "src/app/features/auth/login/callback.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-callback",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    <div class=\"spinner-border\" role=\"status\">\n        <span class=\"visually-hidden\">Loading...</span>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from 'src/app/core/services/auth.service';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'app-callback',\r\n    standalone: true,\r\n    imports: [CommonModule],\r\n    template: `\r\n        <div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\r\n            <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    `\r\n})\r\nexport class CallbackComponent implements OnInit {\r\n    constructor(private authService: AuthService) { }\r\n\r\n    ngOnInit() {\r\n        this.authService.completeAuthentication()\r\n            .catch(error => console.error('Error in callback:', error));\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "CategoryFormDialogComponent",
            "id": "component-CategoryFormDialogComponent-77f12e40debf61c7a7b60b3c0f010da66ea0dfe2f31cdf450577f6343b9dee42353e23672c6a8bc285c9220f16b7b7964ef59f91c48a72224d4d767a2945f03c",
            "file": "src/app/features/categories/components/category-form-dialog/category-form-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-form-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"category-form-dialog\">\n  <!-- Dialog Header -->\n  <div class=\"flex items-center justify-between px-6 py-4 border-b border-slate-200 dark:border-slate-700\">\n    <h2 class=\"text-xl font-medium text-slate-900 dark:text-white\">{{ isEditing ? 'Edit' : 'Add' }} Category</h2>\n    <button mat-icon-button (click)=\"onCancel()\"\n        class=\"text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-full transition-colors\">\n        <mat-icon>close</mat-icon>\n    </button>\n  </div>\n\n  <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n    <!-- Dialog Content -->\n    <div class=\"p-6\">\n      <div class=\"grid grid-cols-1 gap-4\">\n        <mat-form-field  class=\"w-full\">\n          <mat-label>Category Name</mat-label>\n          <input matInput formControlName=\"name\" placeholder=\"Enter category name\">\n          <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('name')?.errors?.['required']\">\n            Name is required\n          </mat-error>\n          <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('name')?.errors?.['maxlength']\">\n            Name cannot exceed 200 characters\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field  class=\"w-full\">\n          <mat-label>Description</mat-label>\n          <textarea matInput formControlName=\"description\"\n                    placeholder=\"Enter category description\" rows=\"3\">\n          </textarea>\n          <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('description')?.errors?.['required']\">\n            Description is required\n          </mat-error>\n          <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('description')?.errors?.['maxlength']\">\n            Description cannot exceed 2000 characters\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field  class=\"w-full\">\n          <mat-label>Parent Category</mat-label>\n          <mat-select formControlName=\"parentCategoryId\">\n            <mat-option [value]=\"null\">None</mat-option>\n            @for (category of categories$ | async; track category.id) {\n              @if (!isEditing || category.id !== data.category?.id) {\n                <mat-option [value]=\"category.id\">\n                  {{ category.name }}\n                </mat-option>\n              }\n            }\n          </mat-select>\n        </mat-form-field>\n\n        <div class=\"mt-4\">\n          <h3 class=\"text-lg font-medium text-slate-800 dark:text-slate-200 mb-3\">SEO Settings</h3>\n\n          <mat-form-field  class=\"w-full\">\n            <mat-label>Meta Title</mat-label>\n            <input matInput formControlName=\"metaTitle\"\n                  placeholder=\"Enter meta title\">\n            <mat-hint class=\"text-xs text-orange-500\">{{ form.get('metaTitle')?.value?.length || 0 }}/200</mat-hint>\n            <mat-error class=\"text-xs text-red-500\" *ngIf=\"form.get('metaTitle')?.errors?.['maxlength']\">\n              Meta title cannot exceed 200 characters\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field  class=\"w-full\">\n            <mat-label>Meta Description</mat-label>\n            <textarea matInput formControlName=\"metaDescription\"\n                      placeholder=\"Enter meta description\" rows=\"2\">\n            </textarea>\n            <mat-hint class=\"text-xs text-orange-500\">{{ form.get('metaDescription')?.value?.length || 0 }}/500</mat-hint>\n            <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('metaDescription')?.errors?.['maxlength']\">\n              Meta description cannot exceed 500 characters\n            </mat-error>\n          </mat-form-field>\n        </div>\n\n        <app-file-upload\n          [currentImage]=\"data.category?.imageUrl\"\n          (fileSelected)=\"onImageSelected($event)\">\n        </app-file-upload>\n      </div>\n    </div>\n\n    <!-- Dialog Actions -->\n    <div class=\"flex justify-end gap-3 px-6 py-4 border-t border-slate-200 dark:border-slate-800 bg-slate-50 dark:bg-slate-800\">\n      <button mat-button type=\"button\" (click)=\"onCancel()\"\n          class=\"border border-slate-300 dark:border-slate-600 px-4 py-1 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-700\">\n          Cancel\n      </button>\n      <button mat-raised-button color=\"primary\"\n              type=\"submit\"\n              [disabled]=\"form.invalid || form.pristine\"\n              class=\"bg-primary-600 text-white px-4 py-1 rounded-md hover:bg-primary-700 transition-colors\">\n          {{ isEditing ? 'Update' : 'Create' }}\n      </button>\n    </div>\n  </form>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 148,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 138
                },
                {
                    "name": "selectedFile",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 140
                }
            ],
            "methodsClass": [
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onImageSelected",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "FileUploadComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormGroup, FormBuilder, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Store } from '@ngrx/store';\r\nimport { Category } from 'src/app/shared/models/category.model';\r\nimport { selectAllCategories } from 'src/app/store/category/category.selectors';\r\nimport { FileUploadComponent } from 'src/app/shared/components/file-upload/file-upload.component';\r\ninterface DialogData {\r\n  category?: Category;\r\n  parentCategoryId?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-category-form-dialog',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatDialogModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    FileUploadComponent\r\n  ],\r\n  template: `\r\n    <div class=\"category-form-dialog\">\r\n      <!-- Dialog Header -->\r\n      <div class=\"flex items-center justify-between px-6 py-4 border-b border-slate-200 dark:border-slate-700\">\r\n        <h2 class=\"text-xl font-medium text-slate-900 dark:text-white\">{{ isEditing ? 'Edit' : 'Add' }} Category</h2>\r\n        <button mat-icon-button (click)=\"onCancel()\"\r\n            class=\"text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-full transition-colors\">\r\n            <mat-icon>close</mat-icon>\r\n        </button>\r\n      </div>\r\n      \r\n      <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n        <!-- Dialog Content -->\r\n        <div class=\"p-6\">\r\n          <div class=\"grid grid-cols-1 gap-4\">\r\n            <mat-form-field  class=\"w-full\">\r\n              <mat-label>Category Name</mat-label>\r\n              <input matInput formControlName=\"name\" placeholder=\"Enter category name\">\r\n              <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('name')?.errors?.['required']\">\r\n                Name is required\r\n              </mat-error>\r\n              <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('name')?.errors?.['maxlength']\">\r\n                Name cannot exceed 200 characters\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field  class=\"w-full\">\r\n              <mat-label>Description</mat-label>\r\n              <textarea matInput formControlName=\"description\" \r\n                        placeholder=\"Enter category description\" rows=\"3\">\r\n              </textarea>\r\n              <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('description')?.errors?.['required']\">\r\n                Description is required\r\n              </mat-error>\r\n              <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('description')?.errors?.['maxlength']\">\r\n                Description cannot exceed 2000 characters\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field  class=\"w-full\">\r\n              <mat-label>Parent Category</mat-label>\r\n              <mat-select formControlName=\"parentCategoryId\">\r\n                <mat-option [value]=\"null\">None</mat-option>\r\n                @for (category of categories$ | async; track category.id) {\r\n                  @if (!isEditing || category.id !== data.category?.id) {\r\n                    <mat-option [value]=\"category.id\">\r\n                      {{ category.name }}\r\n                    </mat-option>\r\n                  }\r\n                }\r\n              </mat-select>\r\n            </mat-form-field>\r\n\r\n            <div class=\"mt-4\">\r\n              <h3 class=\"text-lg font-medium text-slate-800 dark:text-slate-200 mb-3\">SEO Settings</h3>\r\n              \r\n              <mat-form-field  class=\"w-full\">\r\n                <mat-label>Meta Title</mat-label>\r\n                <input matInput formControlName=\"metaTitle\" \r\n                      placeholder=\"Enter meta title\">\r\n                <mat-hint class=\"text-xs text-orange-500\">{{ form.get('metaTitle')?.value?.length || 0 }}/200</mat-hint>\r\n                <mat-error class=\"text-xs text-red-500\" *ngIf=\"form.get('metaTitle')?.errors?.['maxlength']\">\r\n                  Meta title cannot exceed 200 characters\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <mat-form-field  class=\"w-full\">\r\n                <mat-label>Meta Description</mat-label>\r\n                <textarea matInput formControlName=\"metaDescription\" \r\n                          placeholder=\"Enter meta description\" rows=\"2\">\r\n                </textarea>\r\n                <mat-hint class=\"text-xs text-orange-500\">{{ form.get('metaDescription')?.value?.length || 0 }}/500</mat-hint>\r\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('metaDescription')?.errors?.['maxlength']\">\r\n                  Meta description cannot exceed 500 characters\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n\r\n            <app-file-upload\r\n              [currentImage]=\"data.category?.imageUrl\"\r\n              (fileSelected)=\"onImageSelected($event)\">\r\n            </app-file-upload>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Dialog Actions -->\r\n        <div class=\"flex justify-end gap-3 px-6 py-4 border-t border-slate-200 dark:border-slate-800 bg-slate-50 dark:bg-slate-800\">\r\n          <button mat-button type=\"button\" (click)=\"onCancel()\"\r\n              class=\"border border-slate-300 dark:border-slate-600 px-4 py-1 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-700\">\r\n              Cancel\r\n          </button>\r\n          <button mat-raised-button color=\"primary\" \r\n                  type=\"submit\"\r\n                  [disabled]=\"form.invalid || form.pristine\"\r\n                  class=\"bg-primary-600 text-white px-4 py-1 rounded-md hover:bg-primary-700 transition-colors\">\r\n              {{ isEditing ? 'Update' : 'Create' }}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class CategoryFormDialogComponent {\r\n  form: FormGroup;\r\n  categories$;\r\n  selectedFile: File | null = null;\r\n\r\n  get isEditing(): boolean {\r\n    return !!this.data.category;\r\n  }\r\n\r\n  constructor(\r\n    private readonly dialogRef: MatDialogRef<CategoryFormDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\r\n    private readonly fb: FormBuilder,\r\n    private readonly store: Store\r\n  ) {\r\n    this.categories$ = this.store.select(selectAllCategories);\r\n\r\n    this.form = this.fb.group({\r\n      name: ['', [Validators.required, Validators.maxLength(200)]],\r\n      description: ['', [Validators.required, Validators.maxLength(2000)]],\r\n      parentCategoryId: [data.parentCategoryId ?? null],\r\n      metaTitle: ['', [Validators.maxLength(200)]],\r\n      metaDescription: ['', [Validators.maxLength(500)]]\r\n    });\r\n\r\n    if (this.isEditing) {\r\n      this.form.patchValue({\r\n        name: data.category?.name,\r\n        description: data.category?.description,\r\n        parentCategoryId: data.category?.parentCategoryId,\r\n        metaTitle: data.category?.metaTitle,\r\n        metaDescription: data.category?.metaDescription\r\n      });\r\n    }\r\n  }\r\n\r\n  onImageSelected(file: File) {\r\n    this.selectedFile = file;\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.valid) {\r\n      const formValue = this.form.value;\r\n\r\n      const result = {\r\n        ...formValue,\r\n        file: this.selectedFile\r\n      };\r\n\r\n      this.dialogRef.close(result);\r\n    }\r\n  }\r\n\r\n  onCancel() {\r\n    this.dialogRef.close();\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CategoryFormDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 144,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CategoryFormDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "isEditing": {
                    "name": "isEditing",
                    "getSignature": {
                        "name": "isEditing",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 142
                    }
                }
            }
        },
        {
            "name": "CategoryTreeComponent",
            "id": "component-CategoryTreeComponent-919dbd4140064b2dc72558dfc9a7f18514d74255f4800377f16c0836a7c2621b53cf779afbf28ee8cf92c3045e2c84d63a4804c11635cfe567c937eab8e84d39",
            "file": "src/app/features/categories/components/category-tree/category-tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-tree",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"container mx-auto p-4 md:p-6\">\n  <!-- Page Header -->\n  <div class=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-6\">\n    <div>\n      <h1 class=\"text-2xl font-bold text-slate-900 dark:text-white\">Categories</h1>\n      <p class=\"text-sm text-slate-500 dark:text-slate-400\">Organize your products with categories</p>\n    </div>\n\n    <button\n      (click)=\"addCategory()\"\n      class=\"mt-4 md:mt-0 px-4 py-2 bg-primary-600 text-white rounded-md shadow-sm flex items-center hover:bg-primary-700 transition-colors\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-1.5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4v16m8-8H4\" />\n      </svg>\n      Add Category\n    </button>\n  </div>\n\n  <!-- Loading State -->\n  <div *ngIf=\"loading$ | async\" class=\"flex justify-center items-center py-12\">\n    <div class=\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-primary-400 border-r-transparent dark:border-primary-600 dark:border-r-transparent\"></div>\n  </div>\n\n  <!-- Error State -->\n  <div *ngIf=\"error$ | async as error\" class=\"bg-rose-50 dark:bg-slate-800 border border-rose-200 dark:border-rose-900 rounded-lg p-4 mb-6\">\n    <div class=\"flex items-start\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 text-rose-500 dark:text-rose-500 mt-0.5 mr-3\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n        <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\" />\n      </svg>\n      <div>\n        <p class=\"text-sm font-medium text-rose-800 dark:text-rose-200\">{{ error }}</p>\n        <p class=\"mt-1 text-sm text-rose-700 dark:text-rose-300\">Please try again or contact support if the issue persists.</p>\n      </div>\n    </div>\n  </div>\n\n  <!-- Category Tree -->\n  <div *ngIf=\"(categories$ | async)?.length === 0 && !(loading$ | async)\" class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm p-12 text-center border border-slate-200 dark:border-slate-700\">\n    <div class=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-slate-100 dark:bg-slate-700 mb-4\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8 text-slate-400 dark:text-slate-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\" />\n      </svg>\n    </div>\n    <h3 class=\"text-lg font-medium text-slate-900 dark:text-white mb-2\">No Categories Found</h3>\n    <p class=\"text-slate-500 dark:text-slate-400 mb-6 max-w-md mx-auto\">Categories help you organize your products. Create your first category to get started.</p>\n    <button\n      (click)=\"addCategory()\"\n      class=\"px-4 py-2 bg-primary-600 text-white rounded-md shadow-sm flex items-center hover:bg-primary-700 transition-colors mx-auto\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-1.5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4v16m8-8H4\" />\n      </svg>\n      Create First Category\n    </button>\n  </div>\n\n  <div *ngIf=\"(categories$ | async)?.length && !(loading$ | async)\" class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700\">\n    <div class=\"border-b border-slate-200 dark:border-slate-700 px-6 py-4\">\n      <h2 class=\"font-medium text-slate-900 dark:text-white\">Categories</h2>\n    </div>\n\n    <div class=\"p-6\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\n      <div *ngFor=\"let category of categories$ | async; track category?.id\" class=\"mb-4 last:mb-0\">\n        <div class=\"bg-slate-50 dark:bg-slate-700 rounded-lg border border-slate-200 dark:border-slate-700\">\n          <!-- Category Header -->\n          <div class=\"flex items-center justify-between p-4 cursor-move\" cdkDrag>\n            <div class=\"flex items-center\">\n              <div class=\"p-2 mr-2 text-slate-400 dark:text-slate-500 cursor-move\" cdkDragHandle>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 8h16M4 16h16\" />\n                </svg>\n              </div>\n              <div>\n                <h3 class=\"font-medium text-slate-900 dark:text-white\">{{ category.name }}</h3>\n                <p class=\"text-xs text-slate-500 dark:text-slate-400 mt-1\">{{ category.productCount }} products</p>\n              </div>\n            </div>\n\n            <div class=\"flex items-center space-x-2\">\n              <button\n                (click)=\"editCategory(category)\"\n                matTooltip=\"Edit Category\"\n                class=\"p-2 text-slate-500 hover:text-primary-600 dark:text-slate-400 dark:hover:text-primary-400 rounded-full hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                </svg>\n              </button>\n\n              <button\n                (click)=\"deleteCategory(category)\"\n                matTooltip=\"Delete Category\"\n                class=\"p-2 text-slate-500 hover:text-rose-600 dark:text-slate-400 dark:hover:text-rose-400 rounded-full hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n\n          <!-- Subcategories -->\n          <div *ngIf=\"category.subCategories && category.subCategories.length > 0\" class=\"px-4 py-3 border-t border-slate-200 dark:border-slate-700\">\n            <div class=\"pl-8\">\n              <app-category-tree-node\n                [categories]=\"category.subCategories\"\n                (edit)=\"editCategory($event)\"\n                (delete)=\"deleteCategory($event)\"\n                (reorder)=\"reorderSubcategories($event, category.id)\">\n              </app-category-tree-node>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Category[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 154
                },
                {
                    "name": "loading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 153
                }
            ],
            "methodsClass": [
                {
                    "name": "addCategory",
                    "args": [
                        {
                            "name": "parentCategoryId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "parentCategoryId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Category[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Category[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reorderSubcategories",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Category[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Category[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTreeModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressSpinnerModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "DragDropModule",
                    "type": "module"
                },
                {
                    "name": "CategoryTreeNodeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { CategoryFormDialogComponent } from '../category-form-dialog/category-form-dialog.component';\r\nimport { CdkDragDrop, DragDropModule, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Category } from 'src/app/shared/models/category.model';\r\nimport { CategoryActions } from '../../../../store/category/category.actions';\r\nimport { selectCategoryHierarchy, selectCategoriesLoading, selectCategoriesError } from '../../../../store/category/category.selectors';\r\nimport { DialogService } from '../../../../core/services/dialog.service';\r\nimport { CategoryTreeNodeComponent } from \"./category-tree-node.component\";\r\n\r\n@Component({\r\n  selector: 'app-category-tree',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatTreeModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatTooltipModule,\r\n    DragDropModule,\r\n    CategoryTreeNodeComponent\r\n  ],\r\n  template: `\r\n    <div class=\"container mx-auto p-4 md:p-6\">\r\n      <!-- Page Header -->\r\n      <div class=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-6\">\r\n        <div>\r\n          <h1 class=\"text-2xl font-bold text-slate-900 dark:text-white\">Categories</h1>\r\n          <p class=\"text-sm text-slate-500 dark:text-slate-400\">Organize your products with categories</p>\r\n        </div>\r\n        \r\n        <button \r\n          (click)=\"addCategory()\"\r\n          class=\"mt-4 md:mt-0 px-4 py-2 bg-primary-600 text-white rounded-md shadow-sm flex items-center hover:bg-primary-700 transition-colors\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-1.5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4v16m8-8H4\" />\r\n          </svg>\r\n          Add Category\r\n        </button>\r\n      </div>\r\n      \r\n      <!-- Loading State -->\r\n      <div *ngIf=\"loading$ | async\" class=\"flex justify-center items-center py-12\">\r\n        <div class=\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-primary-400 border-r-transparent dark:border-primary-600 dark:border-r-transparent\"></div>\r\n      </div>\r\n      \r\n      <!-- Error State -->\r\n      <div *ngIf=\"error$ | async as error\" class=\"bg-rose-50 dark:bg-slate-800 border border-rose-200 dark:border-rose-900 rounded-lg p-4 mb-6\">\r\n        <div class=\"flex items-start\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 text-rose-500 dark:text-rose-500 mt-0.5 mr-3\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n            <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\" />\r\n          </svg>\r\n          <div>\r\n            <p class=\"text-sm font-medium text-rose-800 dark:text-rose-200\">{{ error }}</p>\r\n            <p class=\"mt-1 text-sm text-rose-700 dark:text-rose-300\">Please try again or contact support if the issue persists.</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Category Tree -->\r\n      <div *ngIf=\"(categories$ | async)?.length === 0 && !(loading$ | async)\" class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm p-12 text-center border border-slate-200 dark:border-slate-700\">\r\n        <div class=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-slate-100 dark:bg-slate-700 mb-4\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8 text-slate-400 dark:text-slate-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\" />\r\n          </svg>\r\n        </div>\r\n        <h3 class=\"text-lg font-medium text-slate-900 dark:text-white mb-2\">No Categories Found</h3>\r\n        <p class=\"text-slate-500 dark:text-slate-400 mb-6 max-w-md mx-auto\">Categories help you organize your products. Create your first category to get started.</p>\r\n        <button \r\n          (click)=\"addCategory()\"\r\n          class=\"px-4 py-2 bg-primary-600 text-white rounded-md shadow-sm flex items-center hover:bg-primary-700 transition-colors mx-auto\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-1.5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4v16m8-8H4\" />\r\n          </svg>\r\n          Create First Category\r\n        </button>\r\n      </div>\r\n      \r\n      <div *ngIf=\"(categories$ | async)?.length && !(loading$ | async)\" class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700\">\r\n        <div class=\"border-b border-slate-200 dark:border-slate-700 px-6 py-4\">\r\n          <h2 class=\"font-medium text-slate-900 dark:text-white\">Categories</h2>\r\n        </div>\r\n        \r\n        <div class=\"p-6\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\r\n          <div *ngFor=\"let category of categories$ | async; track category?.id\" class=\"mb-4 last:mb-0\">\r\n            <div class=\"bg-slate-50 dark:bg-slate-700 rounded-lg border border-slate-200 dark:border-slate-700\">\r\n              <!-- Category Header -->\r\n              <div class=\"flex items-center justify-between p-4 cursor-move\" cdkDrag>\r\n                <div class=\"flex items-center\">\r\n                  <div class=\"p-2 mr-2 text-slate-400 dark:text-slate-500 cursor-move\" cdkDragHandle>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 8h16M4 16h16\" />\r\n                    </svg>\r\n                  </div>\r\n                  <div>\r\n                    <h3 class=\"font-medium text-slate-900 dark:text-white\">{{ category.name }}</h3>\r\n                    <p class=\"text-xs text-slate-500 dark:text-slate-400 mt-1\">{{ category.productCount }} products</p>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"flex items-center space-x-2\">\r\n                  <button \r\n                    (click)=\"editCategory(category)\"\r\n                    matTooltip=\"Edit Category\"\r\n                    class=\"p-2 text-slate-500 hover:text-primary-600 dark:text-slate-400 dark:hover:text-primary-400 rounded-full hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n                    </svg>\r\n                  </button>\r\n                  \r\n                  <button \r\n                    (click)=\"deleteCategory(category)\"\r\n                    matTooltip=\"Delete Category\"\r\n                    class=\"p-2 text-slate-500 hover:text-rose-600 dark:text-slate-400 dark:hover:text-rose-400 rounded-full hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              \r\n              <!-- Subcategories -->\r\n              <div *ngIf=\"category.subCategories && category.subCategories.length > 0\" class=\"px-4 py-3 border-t border-slate-200 dark:border-slate-700\">\r\n                <div class=\"pl-8\">\r\n                  <app-category-tree-node \r\n                    [categories]=\"category.subCategories\"\r\n                    (edit)=\"editCategory($event)\"\r\n                    (delete)=\"deleteCategory($event)\"\r\n                    (reorder)=\"reorderSubcategories($event, category.id)\">\r\n                  </app-category-tree-node>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class CategoryTreeComponent implements OnInit {\r\n  categories$: Observable<Category[]>;\r\n  loading$: Observable<boolean>;\r\n  error$: Observable<string | null>;\r\n\r\n  constructor(\r\n    private readonly store: Store,\r\n    private readonly dialogService: DialogService,\r\n    private readonly dialog: MatDialog\r\n  ) {\r\n    this.categories$ = this.store.select(selectCategoryHierarchy);\r\n    this.loading$ = this.store.select(selectCategoriesLoading);\r\n    this.error$ = this.store.select(selectCategoriesError);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadCategories();\r\n  }\r\n\r\n  loadCategories() {\r\n    this.store.dispatch(CategoryActions.loadCategories());\r\n  }\r\n\r\n  async addCategory(parentCategoryId?: string) {\r\n    const dialogRef = this.dialog.open(CategoryFormDialogComponent, {\r\n      width: '600px',\r\n      data: { parentCategoryId }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.store.dispatch(CategoryActions.createCategory({\r\n          request: {\r\n            name: result.name,\r\n            description: result.description,\r\n            parentCategoryId: result.parentCategoryId,\r\n            metaTitle: result.metaTitle,\r\n            metaDescription: result.metaDescription,\r\n            imageUrl: result.file ? URL.createObjectURL(result.file) : undefined\r\n          }\r\n        }));\r\n      }\r\n    });\r\n  }\r\n\r\n  async editCategory(category: Category) {\r\n    const dialogRef = this.dialog.open(CategoryFormDialogComponent, {\r\n      width: '600px',\r\n      data: { category }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.store.dispatch(CategoryActions.updateCategory({\r\n          id: category.id,\r\n          request: {\r\n            name: result.name,\r\n            description: result.description,\r\n            parentCategoryId: result.parentCategoryId,\r\n            metaTitle: result.metaTitle,\r\n            metaDescription: result.metaDescription,\r\n            imageUrl: result.file ? URL.createObjectURL(result.file) : undefined\r\n          }\r\n        }));\r\n      }\r\n    });\r\n  }\r\n\r\n  async deleteCategory(category: Category) {\r\n    const confirmed = await this.dialogService.confirm(\r\n      `Are you sure you want to delete ${category.name}? This action cannot be undone.`,\r\n      'Delete Category'\r\n    );\r\n\r\n    if (confirmed) {\r\n      this.store.dispatch(CategoryActions.deleteCategory({ id: category.id }));\r\n    }\r\n  }\r\n\r\n  drop(event: CdkDragDrop<Category[]>) {\r\n    if (event.previousIndex === event.currentIndex) return;\r\n\r\n    this.categories$.subscribe(categories => {\r\n      const reorderedCategories = [...categories];\r\n      moveItemInArray(reorderedCategories, event.previousIndex, event.currentIndex);\r\n\r\n      const reorderRequests = reorderedCategories.map((category, index) => ({\r\n        categoryId: category.id,\r\n        newSortOrder: index\r\n      }));\r\n\r\n      this.store.dispatch(CategoryActions.reorderCategories({ requests: reorderRequests }));\r\n    }).unsubscribe();\r\n  }\r\n\r\n  reorderSubcategories(event: CdkDragDrop<Category[]>, parentId: string) {\r\n    if (event.previousIndex === event.currentIndex) return;\r\n\r\n    this.categories$.subscribe(categories => {\r\n      const parentCategory = categories.find(c => c.id === parentId);\r\n      if (!parentCategory || !parentCategory.subCategories) return;\r\n\r\n      const reorderedSubcategories = [...parentCategory.subCategories];\r\n      moveItemInArray(reorderedSubcategories, event.previousIndex, event.currentIndex);\r\n\r\n      const reorderRequests = reorderedSubcategories.map((category, index) => ({\r\n        categoryId: category.id,\r\n        newSortOrder: index\r\n      }));\r\n\r\n      this.store.dispatch(CategoryActions.reorderCategories({ requests: reorderRequests }));\r\n    }).unsubscribe();\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 154,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "CategoryTreeNodeComponent",
            "id": "component-CategoryTreeNodeComponent-f80df5bdb8423dc25e9ecc60c883e059d55056fe6a01d5458c5a08d7e1fcfb3823db9c2f858d4e957c1244a18276efb7bea29fb84f8c839c28cee607f3d6a21d",
            "file": "src/app/features/categories/components/category-tree/category-tree-node.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-tree-node",
            "styleUrls": [],
            "styles": [
                "\n    .category-node-list {\n      min-height: 40px;\n    }\n\n    .category-node {\n      margin-bottom: 0.5rem;\n\n      &:last-child {\n        margin-bottom: 0;\n      }\n    }\n\n    .category-content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 0.5rem;\n      background-color: var(--bg-primary);\n      border-radius: 4px;\n      border: 1px solid var(--border);\n\n      &:hover {\n        background-color: var(--bg-hover);\n      }\n    }\n\n    .category-info {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n\n      .category-name {\n        font-weight: 500;\n        color: var(--text-primary);\n      }\n\n      .product-count {\n        color: var(--text-secondary);\n        font-size: 0.875rem;\n      }\n    }\n\n    .category-actions {\n      display: flex;\n      gap: 0.25rem;\n    }\n\n    .subcategories-container {\n      margin-top: 0.5rem;\n    }\n  "
            ],
            "template": "<div class=\"category-node-list\" cdkDropList (cdkDropListDropped)=\"onDrop($event)\">\n  @for (category of categories(); track category.id) {\n    <div class=\"category-node\" cdkDrag>\n      <div class=\"category-content\">\n        <div class=\"category-info\">\n          <mat-icon cdkDragHandle>drag_indicator</mat-icon>\n          <span class=\"category-name\">{{ category.name }}</span>\n          <span class=\"product-count\">({{ category.productCount }} products)</span>\n        </div>\n        <div class=\"category-actions\">\n          <button mat-icon-button (click)=\"onEdit(category)\">\n            <mat-icon class=\"icon-success\">edit</mat-icon>\n          </button>\n          <button mat-icon-button color=\"warn\" (click)=\"onDelete(category)\">\n            <mat-icon class=\"icon-danger\">delete</mat-icon>\n          </button>\n        </div>\n      </div>\n      @if (category.subCategories.length) {\n        <div class=\"subcategories-container\" [style.margin-left.px]=\"20\">\n          <app-category-tree-node\n            [categories]=\"category.subCategories\"\n            (edit)=\"onEdit($event)\"\n            (delete)=\"onDelete($event)\"\n            (reorder)=\"onDrop($event)\">\n          </app-category-tree-node>\n        </div>\n      }\n    </div>\n  }\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "delete",
                    "defaultValue": "new EventEmitter<Category>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "type": "EventEmitter"
                },
                {
                    "name": "edit",
                    "defaultValue": "new EventEmitter<Category>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "EventEmitter"
                },
                {
                    "name": "reorder",
                    "defaultValue": "new EventEmitter<CdkDragDrop<Category[]>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 107,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "input<Category[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "category",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Category[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Category[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEdit",
                    "args": [
                        {
                            "name": "category",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "DragDropModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Output, EventEmitter, input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { CdkDragDrop, DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { Category } from 'src/app/shared/models/category.model';\r\n\r\n@Component({\r\n  selector: 'app-category-tree-node',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    DragDropModule\r\n  ],\r\n  template: `\r\n    <div class=\"category-node-list\" cdkDropList (cdkDropListDropped)=\"onDrop($event)\">\r\n      @for (category of categories(); track category.id) {\r\n        <div class=\"category-node\" cdkDrag>\r\n          <div class=\"category-content\">\r\n            <div class=\"category-info\">\r\n              <mat-icon cdkDragHandle>drag_indicator</mat-icon>\r\n              <span class=\"category-name\">{{ category.name }}</span>\r\n              <span class=\"product-count\">({{ category.productCount }} products)</span>\r\n            </div>\r\n            <div class=\"category-actions\">\r\n              <button mat-icon-button (click)=\"onEdit(category)\">\r\n                <mat-icon class=\"icon-success\">edit</mat-icon>\r\n              </button>\r\n              <button mat-icon-button color=\"warn\" (click)=\"onDelete(category)\">\r\n                <mat-icon class=\"icon-danger\">delete</mat-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          @if (category.subCategories.length) {\r\n            <div class=\"subcategories-container\" [style.margin-left.px]=\"20\">\r\n              <app-category-tree-node\r\n                [categories]=\"category.subCategories\"\r\n                (edit)=\"onEdit($event)\"\r\n                (delete)=\"onDelete($event)\"\r\n                (reorder)=\"onDrop($event)\">\r\n              </app-category-tree-node>\r\n            </div>\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .category-node-list {\r\n      min-height: 40px;\r\n    }\r\n\r\n    .category-node {\r\n      margin-bottom: 0.5rem;\r\n\r\n      &:last-child {\r\n        margin-bottom: 0;\r\n      }\r\n    }\r\n\r\n    .category-content {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      padding: 0.5rem;\r\n      background-color: var(--bg-primary);\r\n      border-radius: 4px;\r\n      border: 1px solid var(--border);\r\n\r\n      &:hover {\r\n        background-color: var(--bg-hover);\r\n      }\r\n    }\r\n\r\n    .category-info {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.5rem;\r\n\r\n      .category-name {\r\n        font-weight: 500;\r\n        color: var(--text-primary);\r\n      }\r\n\r\n      .product-count {\r\n        color: var(--text-secondary);\r\n        font-size: 0.875rem;\r\n      }\r\n    }\r\n\r\n    .category-actions {\r\n      display: flex;\r\n      gap: 0.25rem;\r\n    }\r\n\r\n    .subcategories-container {\r\n      margin-top: 0.5rem;\r\n    }\r\n  `]\r\n})\r\nexport class CategoryTreeNodeComponent {\r\n  readonly categories = input<Category[]>([]);\r\n  @Output() edit = new EventEmitter<Category>();\r\n  @Output() delete = new EventEmitter<Category>();\r\n  @Output() reorder = new EventEmitter<CdkDragDrop<Category[]>>();\r\n\r\n  onEdit(category: Category) {\r\n    this.edit.emit(category);\r\n  }\r\n\r\n  onDelete(category: Category) {\r\n    this.delete.emit(category);\r\n  }\r\n\r\n  onDrop(event: CdkDragDrop<Category[]>) {\r\n    this.reorder.emit(event);\r\n  }\r\n\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .category-node-list {\n      min-height: 40px;\n    }\n\n    .category-node {\n      margin-bottom: 0.5rem;\n\n      &:last-child {\n        margin-bottom: 0;\n      }\n    }\n\n    .category-content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 0.5rem;\n      background-color: var(--bg-primary);\n      border-radius: 4px;\n      border: 1px solid var(--border);\n\n      &:hover {\n        background-color: var(--bg-hover);\n      }\n    }\n\n    .category-info {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n\n      .category-name {\n        font-weight: 500;\n        color: var(--text-primary);\n      }\n\n      .product-count {\n        color: var(--text-secondary);\n        font-size: 0.875rem;\n      }\n    }\n\n    .category-actions {\n      display: flex;\n      gap: 0.25rem;\n    }\n\n    .subcategories-container {\n      margin-top: 0.5rem;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-3ccf3b9be5f59422eaaafc015c169feef39abfab68eb02c54b963524a66d04bc4bfcc02f42a0d20563e85d92ff3fd988d79bd8ee0798260a87731994fe962bf4",
            "file": "src/app/features/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboards",
            "styleUrls": [],
            "styles": [],
            "template": "<router-outlet></router-outlet>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { Component } from \"@angular/core\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { RouterOutlet } from \"@angular/router\";\r\n\r\n\r\n@Component({\r\n    selector: 'app-dashboards',\r\n    standalone: true,\r\n    imports: [CommonModule, RouterOutlet, MatDialogModule, MatInputModule, MatButtonModule],\r\n    template: `\r\n        <router-outlet></router-outlet>\r\n      `\r\n})\r\nexport class DashboardComponent { }",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-5a27180ebd4d0dd55f48aeffbc9edd5e9032ea8d6bff0f9da1f52c137626cbc2ce7df4dddc6b3a60f634d5bfd7bf16cd93cf735769732718ae1c83c2d3d88bac",
            "file": "src/app/shared/components/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog",
            "styleUrls": [],
            "styles": [
                "\n    .dialog-overlay {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background-color: rgba(0, 0, 0, 0.5);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 1000;\n    }\n\n    @media (max-width: 640px) {\n      .dialog-container {\n        width: calc(100% - 2rem);\n        max-height: calc(100% - 2rem);\n        margin: 1rem;\n        display: flex;\n        flex-direction: column;\n      }\n    }\n\n    @media (min-width: 641px) {\n      .dialog-container {\n        min-width: 320px;\n        max-width: 560px;\n      }\n    }\n  "
            ],
            "template": "@if (dialog$ | async; as dialog) {\n  <div class=\"dialog-overlay\" (click)=\"onOverlayClick($event)\">\n    <div class=\"dialog-container bg-white dark:bg-slate-800 rounded-lg shadow-lg overflow-hidden\">\n      <!-- Dialog Header -->\n      <div class=\"flex items-center justify-between px-6 py-4 border-b border-slate-200 dark:border-slate-700\">\n        <h2 class=\"text-xl font-medium text-slate-900 dark:text-white\">{{ dialog.title }}</h2>\n        <button\n          mat-icon-button\n          (click)=\"onCancel()\"\n          class=\"text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-full transition-colors\">\n          <mat-icon>close</mat-icon>\n        </button>\n      </div>\n\n      <!-- Dialog Content -->\n      <div class=\"p-6\">\n        <p class=\"text-slate-700 dark:text-slate-300\">{{ dialog.message }}</p>\n\n        @if (dialog.type === 'preview') {\n          <div class=\"mt-4 border border-slate-200 dark:border-slate-700 rounded-lg p-4 bg-slate-50 dark:bg-slate-700 overflow-auto max-h-96\">\n            <pre class=\"text-sm text-slate-800 dark:text-slate-200 whitespace-pre-wrap\">{{ dialog.data }}</pre>\n          </div>\n        }\n      </div>\n\n      <!-- Dialog Actions -->\n      <div class=\"flex justify-end gap-3 px-6 py-4 border-t border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-700\">\n        @if (dialog.type !== 'info') {\n          <button\n            mat-button\n            type=\"button\"\n            (click)=\"onCancel()\"\n            class=\"border border-slate-300 dark:border-slate-600 px-4 py-1 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-700\">\n            {{ dialog.cancelText || 'Cancel' }}\n          </button>\n        }\n        <button\n          mat-raised-button\n          [color]=\"getButtonColor(dialog.type)\"\n          type=\"button\"\n          (click)=\"onConfirm()\"\n          class=\"px-4 py-1 rounded-md transition-colors\"\n          [ngClass]=\"{\n            'bg-primary-600 hover:bg-primary-700 text-white': dialog.type === 'confirm' || dialog.type === 'info' || !dialog.type,\n            'bg-rose-600 hover:bg-rose-700 text-white': dialog.type === 'error',\n            'bg-amber-600 hover:bg-amber-700 text-white': dialog.type === 'warning'\n          }\">\n          {{ dialog.confirmText || 'OK' }}\n        </button>\n      </div>\n    </div>\n  </div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog$",
                    "defaultValue": "new Observable<DialogConfig | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 108
                }
            ],
            "methodsClass": [
                {
                    "name": "getButtonColor",
                    "args": [
                        {
                            "name": "type",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onConfirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOverlayClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { Component } from \"@angular/core\";\r\nimport { DialogConfig, DialogService } from \"../../../core/services/dialog.service\";\r\nimport { Observable } from \"rxjs\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\n\r\n@Component({\r\n  selector: 'app-dialog',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatButtonModule,\r\n    MatInputModule\r\n  ],\r\n  template: `\r\n    @if (dialog$ | async; as dialog) {\r\n      <div class=\"dialog-overlay\" (click)=\"onOverlayClick($event)\">\r\n        <div class=\"dialog-container bg-white dark:bg-slate-800 rounded-lg shadow-lg overflow-hidden\">\r\n          <!-- Dialog Header -->\r\n          <div class=\"flex items-center justify-between px-6 py-4 border-b border-slate-200 dark:border-slate-700\">\r\n            <h2 class=\"text-xl font-medium text-slate-900 dark:text-white\">{{ dialog.title }}</h2>\r\n            <button\r\n              mat-icon-button\r\n              (click)=\"onCancel()\"\r\n              class=\"text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-full transition-colors\">\r\n              <mat-icon>close</mat-icon>\r\n            </button>\r\n          </div>\r\n\r\n          <!-- Dialog Content -->\r\n          <div class=\"p-6\">\r\n            <p class=\"text-slate-700 dark:text-slate-300\">{{ dialog.message }}</p>\r\n            \r\n            @if (dialog.type === 'preview') {\r\n              <div class=\"mt-4 border border-slate-200 dark:border-slate-700 rounded-lg p-4 bg-slate-50 dark:bg-slate-700 overflow-auto max-h-96\">\r\n                <pre class=\"text-sm text-slate-800 dark:text-slate-200 whitespace-pre-wrap\">{{ dialog.data }}</pre>\r\n              </div>\r\n            }\r\n          </div>\r\n\r\n          <!-- Dialog Actions -->\r\n          <div class=\"flex justify-end gap-3 px-6 py-4 border-t border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-700\">\r\n            @if (dialog.type !== 'info') {\r\n              <button\r\n                mat-button\r\n                type=\"button\"\r\n                (click)=\"onCancel()\"\r\n                class=\"border border-slate-300 dark:border-slate-600 px-4 py-1 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-700\">\r\n                {{ dialog.cancelText || 'Cancel' }}\r\n              </button>\r\n            }\r\n            <button\r\n              mat-raised-button\r\n              [color]=\"getButtonColor(dialog.type)\"\r\n              type=\"button\"\r\n              (click)=\"onConfirm()\"\r\n              class=\"px-4 py-1 rounded-md transition-colors\"\r\n              [ngClass]=\"{\r\n                'bg-primary-600 hover:bg-primary-700 text-white': dialog.type === 'confirm' || dialog.type === 'info' || !dialog.type,\r\n                'bg-rose-600 hover:bg-rose-700 text-white': dialog.type === 'error',\r\n                'bg-amber-600 hover:bg-amber-700 text-white': dialog.type === 'warning'\r\n              }\">\r\n              {{ dialog.confirmText || 'OK' }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    }\r\n  `,\r\n  styles: [`\r\n    .dialog-overlay {\r\n      position: fixed;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n      background-color: rgba(0, 0, 0, 0.5);\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      z-index: 1000;\r\n    }\r\n\r\n    @media (max-width: 640px) {\r\n      .dialog-container {\r\n        width: calc(100% - 2rem);\r\n        max-height: calc(100% - 2rem);\r\n        margin: 1rem;\r\n        display: flex;\r\n        flex-direction: column;\r\n      }\r\n    }\r\n\r\n    @media (min-width: 641px) {\r\n      .dialog-container {\r\n        min-width: 320px;\r\n        max-width: 560px;\r\n      }\r\n    }\r\n  `]\r\n})\r\nexport class DialogComponent {\r\n  dialog$ = new Observable<DialogConfig | null>();\r\n\r\n  constructor(private readonly dialogService: DialogService) {\r\n    this.dialog$ = this.dialogService.dialog$;\r\n  }\r\n\r\n  getButtonColor(type: string | undefined): string {\r\n    switch (type) {\r\n      case 'error': return 'warn';\r\n      case 'warning': return 'accent';\r\n      default: return 'primary';\r\n    }\r\n  }\r\n\r\n  onConfirm() {\r\n    this.dialogService.handleAction(true);\r\n  }\r\n\r\n  onCancel() {\r\n    this.dialogService.handleAction(false);\r\n  }\r\n\r\n  onOverlayClick(event: MouseEvent) {\r\n    if ((event.target as HTMLElement).classList.contains('dialog-overlay')) {\r\n      this.onCancel();\r\n    }\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .dialog-overlay {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background-color: rgba(0, 0, 0, 0.5);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 1000;\n    }\n\n    @media (max-width: 640px) {\n      .dialog-container {\n        width: calc(100% - 2rem);\n        max-height: calc(100% - 2rem);\n        margin: 1rem;\n        display: flex;\n        flex-direction: column;\n      }\n    }\n\n    @media (min-width: 641px) {\n      .dialog-container {\n        min-width: 320px;\n        max-width: 560px;\n      }\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 108,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "DynamicProductFormComponent",
            "id": "component-DynamicProductFormComponent-aa251d4dfd0acc419f9aff6a5744d331e67eb44a1b75ab5ac99ca76e6b1f4672a13dc5e1a4848e7c9fafa3bc7aa7ecf6d57583f77c89b870f8118c9e68fedc11",
            "file": "src/app/features/products/components/dynamic-product-form/dynamic-product-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-product-form",
            "styleUrls": [],
            "styles": [
                "\n    .product-form-container {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 1rem;\n    }\n    \n    .step-content {\n      margin: 1.5rem 0;\n      max-width: 800px;\n    }\n    \n    .step-description {\n      color: #666;\n      margin-bottom: 1.5rem;\n    }\n    \n    .full-width {\n      width: 100%;\n      margin-bottom: 1.5rem;\n    }\n    \n    .step-actions {\n      display: flex;\n      justify-content: flex-end;\n      gap: 1rem;\n      margin-top: 2rem;\n    }\n    \n    .product-summary {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n      gap: 1.5rem;\n      margin: 2rem 0;\n    }\n    \n    .summary-section {\n      border-radius: 8px;\n      padding: 1.5rem;\n    }\n    \n    .summary-section h4 {\n      margin-top: 0;\n      margin-bottom: 1rem;\n      padding-bottom: 0.5rem;\n      border-bottom: 1px solid #eee;\n    }\n    \n    .summary-images {\n      display: flex;\n      gap: 0.5rem;\n    }\n    \n    .summary-image {\n      width: 60px;\n      height: 60px;\n      border-radius: 4px;\n      overflow: hidden;\n    }\n    \n    .summary-image img {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n    \n    .more-images {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 60px;\n      height: 60px;\n      background-color: #eee;\n      border-radius: 4px;\n      font-size: 0.75rem;\n    }\n    \n    .final-actions {\n      justify-content: space-between;\n    }\n    \n    .spin {\n      animation: spin 1.5s linear infinite;\n    }\n    \n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n  "
            ],
            "template": "<div class=\"product-form-container\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>{{ isEditMode ? 'Edit Product' : 'Add New Product' }}</mat-card-title>\n      <mat-card-subtitle>\n        Fill in the details to {{ isEditMode ? 'update' : 'create' }} your product\n      </mat-card-subtitle>\n    </mat-card-header>\n\n    <mat-card-content>\n      <mat-stepper linear #stepper>\n        <!-- Step 1: Basic Product Information -->\n        <mat-step [stepControl]=\"basicInfoForm\">\n          <ng-template matStepLabel>Basic Information</ng-template>\n\n          <div class=\"step-content\">\n            <h3>Basic Product Details</h3>\n\n            <!-- Product Type Selection -->\n            <mat-form-field  appearance=\"fill\" class=\"full-width\">\n              <mat-label>Product Type</mat-label>\n              <mat-select\n                [value]=\"selectedProductType?.id\"\n                (selectionChange)=\"onProductTypeChange($event.value)\">\n                <mat-option *ngFor=\"let type of productTypes\" [value]=\"type.id\">\n                  {{ type.name }}\n                </mat-option>\n              </mat-select>\n              <mat-hint class=\"text-xs text-orange-500\">Select a product type to load relevant fields</mat-hint>\n            </mat-form-field>\n\n            <!-- Basic Info Form -->\n            <form [formGroup]=\"basicInfoForm\">\n              <formly-form\n                [form]=\"basicInfoForm\"\n                [fields]=\"basicInfoFields\"\n                [model]=\"model.basicInfo\">\n              </formly-form>\n            </form>\n\n            <div class=\"step-actions\">\n              <button\n                mat-button\n                matStepperNext\n                color=\"primary\"\n                [disabled]=\"!basicInfoForm.valid\">\n                Next\n              </button>\n            </div>\n          </div>\n        </mat-step>\n\n        <!-- Step 2: Pricing & Inventory -->\n        <mat-step [stepControl]=\"pricingForm\">\n          <ng-template matStepLabel>Pricing & Inventory</ng-template>\n\n          <div class=\"step-content\">\n            <h3>Pricing & Stock Information</h3>\n\n            <form [formGroup]=\"pricingForm\">\n              <formly-form\n                [form]=\"pricingForm\"\n                [fields]=\"pricingFields\"\n                [model]=\"model.pricing\">\n              </formly-form>\n            </form>\n\n            <div class=\"step-actions\">\n              <button mat-button matStepperPrevious>Back</button>\n              <button\n                mat-button\n                matStepperNext\n                color=\"primary\"\n                [disabled]=\"!pricingForm.valid\">\n                Next\n              </button>\n            </div>\n          </div>\n        </mat-step>\n\n        <!-- Step 3: Product Attributes (Dynamic based on product type) -->\n        <mat-step [stepControl]=\"attributesForm\" *ngIf=\"attributesFields.length > 0\">\n          <ng-template matStepLabel>Attributes</ng-template>\n\n          <div class=\"step-content\">\n            <h3>Product Attributes</h3>\n            <p class=\"step-description\">\n              Configure specific attributes for {{ selectedProductType?.name }}\n            </p>\n\n            <form [formGroup]=\"attributesForm\">\n              <formly-form\n                [form]=\"attributesForm\"\n                [fields]=\"attributesFields\"\n                [model]=\"model.attributes\">\n              </formly-form>\n            </form>\n\n            <div class=\"step-actions\">\n              <button mat-button matStepperPrevious>Back</button>\n              <button\n                mat-button\n                matStepperNext\n                color=\"primary\"\n                [disabled]=\"!attributesForm.valid\">\n                Next\n              </button>\n            </div>\n          </div>\n        </mat-step>\n\n        <!-- Step 4: Images -->\n        <mat-step>\n          <ng-template matStepLabel>Images</ng-template>\n\n          <div class=\"step-content\">\n            <h3>Product Images</h3>\n            <p class=\"step-description\">\n              Upload and manage product images. The first image will be used as the primary display image.\n            </p>\n\n            <app-product-image-manager\n              [images]=\"model.images\"\n              (imagesChange)=\"onImagesChange($event)\">\n            </app-product-image-manager>\n\n            <div class=\"step-actions\">\n              <button mat-button matStepperPrevious>Back</button>\n              <button\n                mat-button\n                matStepperNext\n                color=\"primary\"\n                [disabled]=\"model.images.length === 0\">\n                Next\n              </button>\n            </div>\n          </div>\n        </mat-step>\n\n        <!-- Step 5: SEO & Visibility -->\n        <mat-step [stepControl]=\"seoForm\">\n          <ng-template matStepLabel>SEO & Visibility</ng-template>\n\n          <div class=\"step-content\">\n            <h3>SEO Settings & Visibility</h3>\n\n            <form [formGroup]=\"seoForm\">\n              <formly-form\n                [form]=\"seoForm\"\n                [fields]=\"seoFields\"\n                [model]=\"model\">\n              </formly-form>\n            </form>\n\n            <div class=\"step-actions\">\n              <button mat-button matStepperPrevious>Back</button>\n              <button\n                mat-button\n                matStepperNext\n                color=\"primary\"\n                [disabled]=\"!seoForm.valid\">\n                Review\n              </button>\n            </div>\n          </div>\n        </mat-step>\n\n        <!-- Step 6: Review & Submit -->\n        <mat-step>\n          <ng-template matStepLabel>Review & Submit</ng-template>\n\n          <div class=\"step-content\">\n            <h3>Review Product Information</h3>\n            <p class=\"step-description\">\n              Please review all information before submitting.\n            </p>\n\n            <div class=\"product-summary\">\n              <div class=\"summary-section bg-slate-100 dark:bg-slate-800\">\n                <h4>Basic Information</h4>\n                <p><strong>Name:</strong> {{ model.basicInfo.name }}</p>\n                <p><strong>Type:</strong> {{ selectedProductType?.name }}</p>\n                <p><strong>SKU:</strong> {{ model.basicInfo.sku }}</p>\n                <p *ngIf=\"model.basicInfo.barcode\"><strong>Barcode:</strong> {{ model.basicInfo.barcode }}</p>\n              </div>\n\n              <div class=\"summary-section bg-slate-100 dark:bg-slate-800\">\n                <h4>Pricing & Inventory</h4>\n                <p><strong>Price:</strong> {{ model.pricing.price | currency:model.pricing.currency }}</p>\n                <p *ngIf=\"model.pricing.compareAtPrice\">\n                  <strong>Compare At:</strong> {{ model.pricing.compareAtPrice | currency:model.pricing.currency }}\n                </p>\n                <p><strong>Stock:</strong> {{ model.pricing.stock }}</p>\n              </div>\n\n              <div class=\"summary-section bg-slate-100 dark:bg-slate-800\" *ngIf=\"attributesFields.length > 0\">\n                <h4>Attributes</h4>\n                <p *ngFor=\"let field of attributesFields\">\n                  <strong>{{ field.props?.label }}:</strong>\n                  {{ formatAttributeValue(field.key ?? \"\", model.attributes[getKeyAsString(field.key ?? \"\")]) }}\n                </p>\n              </div>\n\n              <div class=\"summary-section bg-slate-100 dark:bg-slate-800\">\n                <h4>Images</h4>\n                <div class=\"summary-images\">\n                  <div *ngFor=\"let image of model.images.slice(0, 3)\" class=\"summary-image\">\n                    <img [src]=\"image.url\" [alt]=\"image.fileName\">\n                  </div>\n                  <div *ngIf=\"model.images.length > 3\" class=\"more-images\">\n                    +{{ model.images.length - 3 }} more\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"summary-section bg-slate-100 dark:bg-slate-800\">\n                <h4>Visibility</h4>\n                <p><strong>Status:</strong> {{ formatEnumValue(model.status) }}</p>\n                <p><strong>Visibility:</strong> {{ formatEnumValue(model.visibility) }}</p>\n              </div>\n            </div>\n\n            <div class=\"step-actions final-actions\">\n              <button mat-button matStepperPrevious>Back</button>\n              <button\n                mat-button\n                (click)=\"stepper.reset()\">\n                Reset\n              </button>\n              <button\n                mat-raised-button\n                color=\"primary\"\n                [disabled]=\"isSubmitting\"\n                (click)=\"submitProduct()\">\n                <mat-icon *ngIf=\"isSubmitting\" class=\"spin\">sync</mat-icon>\n                {{ isEditMode ? 'Update' : 'Create' }} Product\n              </button>\n            </div>\n          </div>\n        </mat-step>\n      </mat-stepper>\n    </mat-card-content>\n  </mat-card>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "attributesFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormlyFieldConfig[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 421
                },
                {
                    "name": "attributesForm",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 415
                },
                {
                    "name": "basicInfoFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormlyFieldConfig[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 419
                },
                {
                    "name": "basicInfoForm",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 413
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 451,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "isEditMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 445
                },
                {
                    "name": "isSubmitting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 446
                },
                {
                    "name": "model",
                    "defaultValue": "{\r\n    basicInfo: {\r\n      name: '',\r\n      description: '',\r\n      sku: '',\r\n      categoryId: '',\r\n      productTypeId: ''\r\n    },\r\n    pricing: {\r\n      price: 0,\r\n      currency: 'USD',\r\n      stock: 0\r\n    },\r\n    attributes: {},\r\n    status: ProductStatus.Draft,\r\n    visibility: ProductVisibility.Hidden,\r\n    images: []\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductFormModel",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 425
                },
                {
                    "name": "pricingFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormlyFieldConfig[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 420
                },
                {
                    "name": "pricingForm",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 414
                },
                {
                    "name": "productId",
                    "defaultValue": "input<string>('productId')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 447
                },
                {
                    "name": "productTypes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductType[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 448
                },
                {
                    "name": "selectedProductType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductType",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 449
                },
                {
                    "name": "seoFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormlyFieldConfig[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 422
                },
                {
                    "name": "seoForm",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 416
                }
            ],
            "methodsClass": [
                {
                    "name": "clearSavedFormData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear any saved form data from session storage\n",
                    "description": "<p>Clear any saved form data from session storage</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formatAttributeValue",
                    "args": [
                        {
                            "name": "key",
                            "type": "string | number | (string | number)[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 910,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string | number | (string | number)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatEnumValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 950,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAttributeType",
                    "args": [
                        {
                            "name": "attributeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 972,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "attributeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getKeyAsString",
                    "args": [
                        {
                            "name": "key",
                            "type": "string | number | (string | number)[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 963,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string | number | (string | number)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initBasicInfoFields",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 526,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initPricingFields",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 649,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initSeoFields",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 744,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadProductTypes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 497,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadSavedFormData",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 1079,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad saved form data from session storage\nReturns true if data was loaded successfully\n",
                    "description": "<p>Load saved form data from session storage\nReturns true if data was loaded successfully</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 492,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 462,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onImagesChange",
                    "args": [
                        {
                            "name": "images",
                            "type": "ProductImage[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 813,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "images",
                            "type": "ProductImage[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onProductTypeChange",
                    "args": [
                        {
                            "name": "typeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 508,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "typeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processBooksAttributes",
                    "args": [
                        {
                            "name": "productData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1041,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "productData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processClothingAttributes",
                    "args": [
                        {
                            "name": "productData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1017,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "productData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processElectronicsAttributes",
                    "args": [
                        {
                            "name": "productData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1030,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "productData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processTypeSpecificAttributes",
                    "args": [
                        {
                            "name": "productData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 992,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveFormData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1056,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSave the current form data to session storage\nThis is used to preserve data during development when backend errors occur\n",
                    "description": "<p>Save the current form data to session storage\nThis is used to preserve data during development when backend errors occur</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "submitProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 817,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validateAllForms",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 900,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatStepperModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatSnackBarModule",
                    "type": "module"
                },
                {
                    "name": "FormlyModule",
                    "type": "module"
                },
                {
                    "name": "ProductImageManagerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { FormlyModule, FormlyFieldConfig } from '@ngx-formly/core';\r\nimport { Subject, combineLatest, of } from 'rxjs';\r\nimport { finalize, takeUntil, startWith } from 'rxjs/operators';\r\n\r\nimport { ProductTypeService } from '../../../../core/services/product-type.service';\r\nimport { ProductService } from '../../../../core/services/product.service';\r\nimport { ErrorService } from '../../../../core/services/error.service';\r\nimport { ProductCreateCommand, ProductImage, ProductStatus, ProductVisibility } from '../../../../shared/models/product.model';\r\nimport { ProductType } from '../../../../shared/models/product-type.model';\r\nimport { CategoryService } from '../../../../core/services/category.service';\r\nimport { ProductImageManagerComponent } from '../../product-image-manager/product-image-manager.component';\r\nimport { Currency } from '../../../../shared/models/currency.enum';\r\nimport { environment } from 'src/environments/environment';\r\n\r\ninterface ProductFormModel {\r\n  basicInfo: {\r\n    name: string;\r\n    description: string;\r\n    shortDescription?: string;\r\n    sku: string;\r\n    barcode?: string;\r\n    categoryId: string;\r\n    subCategoryId?: string;\r\n    productTypeId: string;\r\n  };\r\n  pricing: {\r\n    price: number;\r\n    currency: string;\r\n    compareAtPrice?: number;\r\n    stock: number;\r\n    lowStockThreshold?: number;\r\n  };\r\n  attributes: Record<string, any>;\r\n  status: ProductStatus;\r\n  visibility: ProductVisibility;\r\n  images: ProductImage[];\r\n  seo?: {\r\n    title?: string;\r\n    description?: string;\r\n    keywords?: string[];\r\n  };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-dynamic-product-form',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    MatStepperModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatSelectModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSnackBarModule,\r\n    FormlyModule,\r\n    ProductImageManagerComponent\r\n  ],\r\n  template: `\r\n    <div class=\"product-form-container\">\r\n      <mat-card>\r\n        <mat-card-header>\r\n          <mat-card-title>{{ isEditMode ? 'Edit Product' : 'Add New Product' }}</mat-card-title>\r\n          <mat-card-subtitle>\r\n            Fill in the details to {{ isEditMode ? 'update' : 'create' }} your product\r\n          </mat-card-subtitle>\r\n        </mat-card-header>\r\n        \r\n        <mat-card-content>\r\n          <mat-stepper linear #stepper>\r\n            <!-- Step 1: Basic Product Information -->\r\n            <mat-step [stepControl]=\"basicInfoForm\">\r\n              <ng-template matStepLabel>Basic Information</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>Basic Product Details</h3>\r\n                \r\n                <!-- Product Type Selection -->\r\n                <mat-form-field  appearance=\"fill\" class=\"full-width\">\r\n                  <mat-label>Product Type</mat-label>\r\n                  <mat-select \r\n                    [value]=\"selectedProductType?.id\" \r\n                    (selectionChange)=\"onProductTypeChange($event.value)\">\r\n                    <mat-option *ngFor=\"let type of productTypes\" [value]=\"type.id\">\r\n                      {{ type.name }}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                  <mat-hint class=\"text-xs text-orange-500\">Select a product type to load relevant fields</mat-hint>\r\n                </mat-form-field>\r\n                \r\n                <!-- Basic Info Form -->\r\n                <form [formGroup]=\"basicInfoForm\">\r\n                  <formly-form\r\n                    [form]=\"basicInfoForm\"\r\n                    [fields]=\"basicInfoFields\"\r\n                    [model]=\"model.basicInfo\">\r\n                  </formly-form>\r\n                </form>\r\n                \r\n                <div class=\"step-actions\">\r\n                  <button \r\n                    mat-button \r\n                    matStepperNext\r\n                    color=\"primary\"\r\n                    [disabled]=\"!basicInfoForm.valid\">\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n            \r\n            <!-- Step 2: Pricing & Inventory -->\r\n            <mat-step [stepControl]=\"pricingForm\">\r\n              <ng-template matStepLabel>Pricing & Inventory</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>Pricing & Stock Information</h3>\r\n                \r\n                <form [formGroup]=\"pricingForm\">\r\n                  <formly-form\r\n                    [form]=\"pricingForm\"\r\n                    [fields]=\"pricingFields\"\r\n                    [model]=\"model.pricing\">\r\n                  </formly-form>\r\n                </form>\r\n                \r\n                <div class=\"step-actions\">\r\n                  <button mat-button matStepperPrevious>Back</button>\r\n                  <button \r\n                    mat-button \r\n                    matStepperNext\r\n                    color=\"primary\"\r\n                    [disabled]=\"!pricingForm.valid\">\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n            \r\n            <!-- Step 3: Product Attributes (Dynamic based on product type) -->\r\n            <mat-step [stepControl]=\"attributesForm\" *ngIf=\"attributesFields.length > 0\">\r\n              <ng-template matStepLabel>Attributes</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>Product Attributes</h3>\r\n                <p class=\"step-description\">\r\n                  Configure specific attributes for {{ selectedProductType?.name }}\r\n                </p>\r\n                \r\n                <form [formGroup]=\"attributesForm\">\r\n                  <formly-form\r\n                    [form]=\"attributesForm\"\r\n                    [fields]=\"attributesFields\"\r\n                    [model]=\"model.attributes\">\r\n                  </formly-form>\r\n                </form>\r\n                \r\n                <div class=\"step-actions\">\r\n                  <button mat-button matStepperPrevious>Back</button>\r\n                  <button \r\n                    mat-button \r\n                    matStepperNext\r\n                    color=\"primary\"\r\n                    [disabled]=\"!attributesForm.valid\">\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n            \r\n            <!-- Step 4: Images -->\r\n            <mat-step>\r\n              <ng-template matStepLabel>Images</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>Product Images</h3>\r\n                <p class=\"step-description\">\r\n                  Upload and manage product images. The first image will be used as the primary display image.\r\n                </p>\r\n                \r\n                <app-product-image-manager\r\n                  [images]=\"model.images\"\r\n                  (imagesChange)=\"onImagesChange($event)\">\r\n                </app-product-image-manager>\r\n                \r\n                <div class=\"step-actions\">\r\n                  <button mat-button matStepperPrevious>Back</button>\r\n                  <button \r\n                    mat-button \r\n                    matStepperNext\r\n                    color=\"primary\"\r\n                    [disabled]=\"model.images.length === 0\">\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n            \r\n            <!-- Step 5: SEO & Visibility -->\r\n            <mat-step [stepControl]=\"seoForm\">\r\n              <ng-template matStepLabel>SEO & Visibility</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>SEO Settings & Visibility</h3>\r\n                \r\n                <form [formGroup]=\"seoForm\">\r\n                  <formly-form\r\n                    [form]=\"seoForm\"\r\n                    [fields]=\"seoFields\"\r\n                    [model]=\"model\">\r\n                  </formly-form>\r\n                </form>\r\n                \r\n                <div class=\"step-actions\">\r\n                  <button mat-button matStepperPrevious>Back</button>\r\n                  <button \r\n                    mat-button \r\n                    matStepperNext\r\n                    color=\"primary\"\r\n                    [disabled]=\"!seoForm.valid\">\r\n                    Review\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n            \r\n            <!-- Step 6: Review & Submit -->\r\n            <mat-step>\r\n              <ng-template matStepLabel>Review & Submit</ng-template>\r\n              \r\n              <div class=\"step-content\">\r\n                <h3>Review Product Information</h3>\r\n                <p class=\"step-description\">\r\n                  Please review all information before submitting.\r\n                </p>\r\n                \r\n                <div class=\"product-summary\">\r\n                  <div class=\"summary-section bg-slate-100 dark:bg-slate-800\">\r\n                    <h4>Basic Information</h4>\r\n                    <p><strong>Name:</strong> {{ model.basicInfo.name }}</p>\r\n                    <p><strong>Type:</strong> {{ selectedProductType?.name }}</p>\r\n                    <p><strong>SKU:</strong> {{ model.basicInfo.sku }}</p>\r\n                    <p *ngIf=\"model.basicInfo.barcode\"><strong>Barcode:</strong> {{ model.basicInfo.barcode }}</p>\r\n                  </div>\r\n                  \r\n                  <div class=\"summary-section bg-slate-100 dark:bg-slate-800\">\r\n                    <h4>Pricing & Inventory</h4>\r\n                    <p><strong>Price:</strong> {{ model.pricing.price | currency:model.pricing.currency }}</p>\r\n                    <p *ngIf=\"model.pricing.compareAtPrice\">\r\n                      <strong>Compare At:</strong> {{ model.pricing.compareAtPrice | currency:model.pricing.currency }}\r\n                    </p>\r\n                    <p><strong>Stock:</strong> {{ model.pricing.stock }}</p>\r\n                  </div>\r\n                  \r\n                  <div class=\"summary-section bg-slate-100 dark:bg-slate-800\" *ngIf=\"attributesFields.length > 0\">\r\n                    <h4>Attributes</h4>\r\n                    <p *ngFor=\"let field of attributesFields\">\r\n                      <strong>{{ field.props?.label }}:</strong>\r\n                      {{ formatAttributeValue(field.key ?? \"\", model.attributes[getKeyAsString(field.key ?? \"\")]) }}\r\n                    </p>\r\n                  </div>\r\n                  \r\n                  <div class=\"summary-section bg-slate-100 dark:bg-slate-800\">\r\n                    <h4>Images</h4>\r\n                    <div class=\"summary-images\">\r\n                      <div *ngFor=\"let image of model.images.slice(0, 3)\" class=\"summary-image\">\r\n                        <img [src]=\"image.url\" [alt]=\"image.fileName\">\r\n                      </div>\r\n                      <div *ngIf=\"model.images.length > 3\" class=\"more-images\">\r\n                        +{{ model.images.length - 3 }} more\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div class=\"summary-section bg-slate-100 dark:bg-slate-800\">\r\n                    <h4>Visibility</h4>\r\n                    <p><strong>Status:</strong> {{ formatEnumValue(model.status) }}</p>\r\n                    <p><strong>Visibility:</strong> {{ formatEnumValue(model.visibility) }}</p>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"step-actions final-actions\">\r\n                  <button mat-button matStepperPrevious>Back</button>\r\n                  <button \r\n                    mat-button \r\n                    (click)=\"stepper.reset()\">\r\n                    Reset\r\n                  </button>\r\n                  <button \r\n                    mat-raised-button \r\n                    color=\"primary\"\r\n                    [disabled]=\"isSubmitting\"\r\n                    (click)=\"submitProduct()\">\r\n                    <mat-icon *ngIf=\"isSubmitting\" class=\"spin\">sync</mat-icon>\r\n                    {{ isEditMode ? 'Update' : 'Create' }} Product\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </mat-step>\r\n          </mat-stepper>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .product-form-container {\r\n      max-width: 1200px;\r\n      margin: 0 auto;\r\n      padding: 1rem;\r\n    }\r\n    \r\n    .step-content {\r\n      margin: 1.5rem 0;\r\n      max-width: 800px;\r\n    }\r\n    \r\n    .step-description {\r\n      color: #666;\r\n      margin-bottom: 1.5rem;\r\n    }\r\n    \r\n    .full-width {\r\n      width: 100%;\r\n      margin-bottom: 1.5rem;\r\n    }\r\n    \r\n    .step-actions {\r\n      display: flex;\r\n      justify-content: flex-end;\r\n      gap: 1rem;\r\n      margin-top: 2rem;\r\n    }\r\n    \r\n    .product-summary {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n      gap: 1.5rem;\r\n      margin: 2rem 0;\r\n    }\r\n    \r\n    .summary-section {\r\n      border-radius: 8px;\r\n      padding: 1.5rem;\r\n    }\r\n    \r\n    .summary-section h4 {\r\n      margin-top: 0;\r\n      margin-bottom: 1rem;\r\n      padding-bottom: 0.5rem;\r\n      border-bottom: 1px solid #eee;\r\n    }\r\n    \r\n    .summary-images {\r\n      display: flex;\r\n      gap: 0.5rem;\r\n    }\r\n    \r\n    .summary-image {\r\n      width: 60px;\r\n      height: 60px;\r\n      border-radius: 4px;\r\n      overflow: hidden;\r\n    }\r\n    \r\n    .summary-image img {\r\n      width: 100%;\r\n      height: 100%;\r\n      object-fit: cover;\r\n    }\r\n    \r\n    .more-images {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      width: 60px;\r\n      height: 60px;\r\n      background-color: #eee;\r\n      border-radius: 4px;\r\n      font-size: 0.75rem;\r\n    }\r\n    \r\n    .final-actions {\r\n      justify-content: space-between;\r\n    }\r\n    \r\n    .spin {\r\n      animation: spin 1.5s linear infinite;\r\n    }\r\n    \r\n    @keyframes spin {\r\n      0% { transform: rotate(0deg); }\r\n      100% { transform: rotate(360deg); }\r\n    }\r\n  `]\r\n})\r\nexport class DynamicProductFormComponent implements OnInit, OnDestroy {\r\n  // Forms for each step\r\n  basicInfoForm = new FormGroup({});\r\n  pricingForm = new FormGroup({});\r\n  attributesForm = new FormGroup({});\r\n  seoForm = new FormGroup({});\r\n\r\n  // Formly fields configuration\r\n  basicInfoFields: FormlyFieldConfig[] = [];\r\n  pricingFields: FormlyFieldConfig[] = [];\r\n  attributesFields: FormlyFieldConfig[] = [];\r\n  seoFields: FormlyFieldConfig[] = [];\r\n\r\n  // Product model\r\n  model: ProductFormModel = {\r\n    basicInfo: {\r\n      name: '',\r\n      description: '',\r\n      sku: '',\r\n      categoryId: '',\r\n      productTypeId: ''\r\n    },\r\n    pricing: {\r\n      price: 0,\r\n      currency: 'USD',\r\n      stock: 0\r\n    },\r\n    attributes: {},\r\n    status: ProductStatus.Draft,\r\n    visibility: ProductVisibility.Hidden,\r\n    images: []\r\n  };\r\n\r\n  // Component state\r\n  isEditMode = false;\r\n  isSubmitting = false;\r\n  productId? = input<string>('productId');\r\n  productTypes: ProductType[] = [];\r\n  selectedProductType?: ProductType;\r\n\r\n  private readonly destroy$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private readonly router: Router,\r\n    private readonly productService: ProductService,\r\n    private readonly productTypeService: ProductTypeService,\r\n    private readonly categoryService: CategoryService,\r\n    private readonly errorService: ErrorService,\r\n    private readonly snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadProductTypes();\r\n    this.initBasicInfoFields();\r\n    this.initPricingFields();\r\n    this.initSeoFields();\r\n\r\n    // Try to load saved form data if it exists\r\n    if (!environment.production) {\r\n      this.loadSavedFormData();\r\n    }\r\n\r\n    // If we're in edit mode (check for route param)\r\n    // this.route.paramMap.pipe(\r\n    //   takeUntil(this.destroy$),\r\n    //   switchMap(params => {\r\n    //     const id = params.get('id');\r\n    //     if (id) {\r\n    //       this.isEditMode = true;\r\n    //       this.productId = id;\r\n    //       return this.productService.getProduct(id);\r\n    //     }\r\n    //     return of(null);\r\n    //   })\r\n    // ).subscribe(product => {\r\n    //   if (product) {\r\n    //     this.loadExistingProduct(product);\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  private loadProductTypes(): void {\r\n    this.productTypeService.getProductTypes()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(types => {\r\n        this.productTypes = types;\r\n        if (types.length > 0 && !this.selectedProductType) {\r\n          this.onProductTypeChange(types[0].id);\r\n        }\r\n      });\r\n  }\r\n\r\n  onProductTypeChange(typeId: string): void {\r\n    this.selectedProductType = this.productTypes.find(type => type.id === typeId);\r\n    this.model.basicInfo.productTypeId = typeId;\r\n\r\n    // Reset attributes when product type changes\r\n    this.model.attributes = {};\r\n    this.attributesForm = new FormGroup({});\r\n\r\n    // Load attribute fields for the selected product type\r\n    if (this.selectedProductType) {\r\n      this.productTypeService.getAttributeFieldsByType(typeId)\r\n        .pipe(takeUntil(this.destroy$))\r\n        .subscribe(fields => {\r\n          this.attributesFields = fields;\r\n        });\r\n    }\r\n  }\r\n\r\n  private initBasicInfoFields(): void {\r\n    combineLatest([\r\n      this.categoryService.getCategories().pipe(startWith([])),\r\n      of(['USD', 'EUR', 'GBP', 'CAD', 'AUD']), // Currencies\r\n    ]).pipe(\r\n      takeUntil(this.destroy$)\r\n    ).subscribe(([categories, currencies]) => {\r\n      this.basicInfoFields = [\r\n        {\r\n          key: 'name',\r\n          type: 'input',\r\n          props: {\r\n            label: 'Product Name',\r\n            placeholder: 'Enter product name',\r\n            required: true,\r\n            minLength: 3,\r\n            maxLength: 100\r\n          },\r\n          validation: {\r\n            messages: {\r\n              required: 'Product name is required',\r\n              minlength: 'Name must be at least 3 characters',\r\n              maxlength: 'Name cannot be more than 100 characters'\r\n            }\r\n          }\r\n        },\r\n        {\r\n          key: 'description',\r\n          type: 'textarea',\r\n          props: {\r\n            label: 'Description',\r\n            placeholder: 'Enter product description',\r\n            required: true,\r\n            rows: 5,\r\n            maxLength: 2000\r\n          },\r\n          validation: {\r\n            messages: {\r\n              required: 'Description is required',\r\n              maxlength: 'Description cannot be more than 2000 characters'\r\n            }\r\n          }\r\n        },\r\n        {\r\n          key: 'shortDescription',\r\n          type: 'textarea',\r\n          props: {\r\n            label: 'Short Description',\r\n            placeholder: 'Enter a brief summary (optional)',\r\n            rows: 2,\r\n            maxLength: 500\r\n          }\r\n        },\r\n        {\r\n          key: 'sku',\r\n          type: 'input',\r\n          props: {\r\n            label: 'SKU (Stock Keeping Unit)',\r\n            placeholder: 'Enter product SKU',\r\n            required: true,\r\n            maxLength: 50\r\n          },\r\n          validation: {\r\n            messages: {\r\n              required: 'SKU is required',\r\n              maxlength: 'SKU cannot be more than 50 characters'\r\n            }\r\n          }\r\n        },\r\n        {\r\n          key: 'barcode',\r\n          type: 'input',\r\n          props: {\r\n            label: 'Barcode (UPC, EAN, etc.)',\r\n            placeholder: 'Enter product barcode (optional)',\r\n            maxLength: 50\r\n          }\r\n        },\r\n        {\r\n          key: 'categoryId',\r\n          type: 'select',\r\n          props: {\r\n            label: 'Category',\r\n            placeholder: 'Select a category',\r\n            required: true,\r\n            options: categories.map(cat => ({\r\n              label: cat.name,\r\n              value: cat.id\r\n            }))\r\n          },\r\n          validation: {\r\n            messages: {\r\n              required: 'Category is required'\r\n            }\r\n          }\r\n        },\r\n        {\r\n          key: 'subCategoryId',\r\n          type: 'select',\r\n          props: {\r\n            label: 'Subcategory',\r\n            placeholder: 'Select a subcategory (optional)',\r\n            options: []\r\n          },\r\n          expressionProperties: {\r\n            'props.options': (model, formState) => {\r\n              const categoryId = model.categoryId;\r\n              if (!categoryId) return [];\r\n\r\n              const category = categories.find(c => c.id === categoryId);\r\n              if (!category?.subCategories) return [];\r\n\r\n              return category.subCategories.map(sub => ({\r\n                label: sub.name,\r\n                value: sub.id\r\n              }));\r\n            }\r\n          }\r\n        }\r\n      ];\r\n    });\r\n  }\r\n\r\n  private initPricingFields(): void {\r\n    // First import the Currency enum\r\n\r\n    this.pricingFields = [\r\n      {\r\n        fieldGroupClassName: 'row',\r\n        fieldGroup: [\r\n          {\r\n            className: 'col-sm-6',\r\n            key: 'price',\r\n            type: 'input',\r\n            props: {\r\n              type: 'number',\r\n              label: 'Price',\r\n              placeholder: 'Enter price',\r\n              required: true,\r\n              min: 0,\r\n              step: 0.01,\r\n              addonLeft: {\r\n                text: '$'\r\n              }\r\n            },\r\n            validation: {\r\n              messages: {\r\n                required: 'Price is required',\r\n                min: 'Price must be greater than or equal to 0'\r\n              }\r\n            }\r\n          },\r\n          {\r\n            className: 'col-sm-6',\r\n            key: 'currency',\r\n            type: 'select',\r\n            props: {\r\n              label: 'Currency',\r\n              placeholder: 'Select currency',\r\n              required: true,\r\n              options: Object.entries(Currency).map(([code, name]) => ({\r\n                label: `${code} - ${name}`,\r\n                value: code\r\n              }))\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        key: 'compareAtPrice',\r\n        type: 'input',\r\n        props: {\r\n          type: 'number',\r\n          label: 'Compare-at Price',\r\n          placeholder: 'Enter original price (optional)',\r\n          min: 0,\r\n          step: 0.01,\r\n          description: 'Used to show a markdown or sale price'\r\n        }\r\n      },\r\n      {\r\n        fieldGroupClassName: 'row',\r\n        fieldGroup: [\r\n          {\r\n            className: 'col-sm-6',\r\n            key: 'stock',\r\n            type: 'input',\r\n            props: {\r\n              type: 'number',\r\n              label: 'Initial Stock',\r\n              placeholder: 'Enter initial stock',\r\n              required: true,\r\n              min: 0\r\n            },\r\n            validation: {\r\n              messages: {\r\n                required: 'Initial stock is required',\r\n                min: 'Stock must be greater than or equal to 0'\r\n              }\r\n            }\r\n          },\r\n          {\r\n            className: 'col-sm-6',\r\n            key: 'lowStockThreshold',\r\n            type: 'input',\r\n            props: {\r\n              type: 'number',\r\n              label: 'Low Stock Threshold',\r\n              placeholder: 'Enter low stock threshold (optional)',\r\n              min: 0,\r\n              description: 'Alerts when stock falls below this number'\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ];\r\n  }\r\n\r\n  private initSeoFields(): void {\r\n    this.seoFields = [\r\n      {\r\n        key: 'seo',\r\n        fieldGroup: [\r\n          {\r\n            key: 'title',\r\n            type: 'input',\r\n            props: {\r\n              label: 'SEO Title',\r\n              placeholder: 'Enter SEO title (optional)',\r\n              maxLength: 70,\r\n              description: 'Override page title for search engines'\r\n            }\r\n          },\r\n          {\r\n            key: 'description',\r\n            type: 'textarea',\r\n            props: {\r\n              label: 'SEO Description',\r\n              placeholder: 'Enter SEO description (optional)',\r\n              maxLength: 160,\r\n              rows: 3,\r\n              description: 'Meta description for search engines'\r\n            }\r\n          },\r\n          {\r\n            key: 'keywords',\r\n            type: 'input',\r\n            props: {\r\n              label: 'SEO Keywords',\r\n              placeholder: 'Enter keywords separated by commas (optional)',\r\n              description: 'Keywords for search engines'\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        key: 'status',\r\n        type: 'select',\r\n        props: {\r\n          label: 'Product Status',\r\n          placeholder: 'Select status',\r\n          required: true,\r\n          options: [\r\n            { label: 'Draft', value: ProductStatus.Draft },\r\n            { label: 'Active', value: ProductStatus.Active },\r\n            { label: 'Out of Stock', value: ProductStatus.OutOfStock },\r\n            { label: 'Discontinued', value: ProductStatus.Discontinued }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        key: 'visibility',\r\n        type: 'select',\r\n        props: {\r\n          label: 'Product Visibility',\r\n          placeholder: 'Select visibility',\r\n          required: true,\r\n          options: [\r\n            { label: 'Visible', value: ProductVisibility.Visible },\r\n            { label: 'Hidden', value: ProductVisibility.Hidden },\r\n            { label: 'Featured', value: ProductVisibility.Featured }\r\n          ]\r\n        }\r\n      }\r\n    ];\r\n  }\r\n\r\n  onImagesChange(images: ProductImage[]): void {\r\n    this.model.images = images;\r\n  }\r\n\r\n  submitProduct(): void {\r\n    if (this.isSubmitting) return;\r\n\r\n    // Validate all forms\r\n    if (!this.validateAllForms()) {\r\n      this.errorService.addError({\r\n        code: 'VALIDATION_ERROR',\r\n        message: 'Please fill in all required fields',\r\n        severity: 'warning'\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.isSubmitting = true;\r\n\r\n    // Prepare product data\r\n    const productData: ProductCreateCommand = {\r\n      name: this.model.basicInfo.name,\r\n      description: this.model.basicInfo.description,\r\n      shortDescription: this.model.basicInfo.shortDescription,\r\n      sku: this.model.basicInfo.sku,\r\n      barcode: this.model.basicInfo.barcode,\r\n      price: this.model.pricing.price,\r\n      currency: this.model.pricing.currency,\r\n      compareAtPrice: this.model.pricing.compareAtPrice,\r\n      categoryId: this.model.basicInfo.categoryId,\r\n      subCategoryId: this.model.basicInfo.subCategoryId,\r\n      stock: this.model.pricing.stock,\r\n      lowStockThreshold: this.model.pricing.lowStockThreshold,\r\n      status: this.model.status,\r\n      visibility: this.model.visibility,\r\n      images: this.model.images,\r\n      attributes: Object.entries(this.model.attributes).map(([name, value]) => ({\r\n        name,\r\n        value: String(value),\r\n        type: this.getAttributeType(name)\r\n      })),\r\n      tags: [],\r\n      seo: this.model.seo\r\n    };\r\n\r\n    // Process attributes for specific product types\r\n    this.processTypeSpecificAttributes(productData);\r\n\r\n    // Create or update product\r\n    const request$ = this.isEditMode && this.productId\r\n      ? this.productService.updateProduct({ id: this.productId(), ...productData })\r\n      : this.productService.createProduct(productData); request$.pipe(\r\n        takeUntil(this.destroy$),\r\n        finalize(() => {\r\n          this.isSubmitting = false;\r\n        })\r\n      ).subscribe({\r\n        next: () => {\r\n          const action = this.isEditMode ? 'updated' : 'created';\r\n          this.snackBar.open(`Product ${action} successfully`, 'Close', {\r\n            duration: 3000\r\n          });\r\n\r\n          // Clear any saved form data on successful submission\r\n          this.clearSavedFormData();\r\n\r\n          this.router.navigate(['/products/list']);\r\n        },\r\n        error: (error) => {\r\n          // On error, keep the form data and don't navigate away\r\n          this.errorService.addError({\r\n            code: 'PRODUCT_SUBMISSION_ERROR',\r\n            message: `Failed to ${this.isEditMode ? 'update' : 'create'} product: ${error.message}`,\r\n            severity: 'error'\r\n          });\r\n\r\n          // Save form data to session storage as a backup\r\n          if (!environment.production) {\r\n            this.saveFormData();\r\n            this.snackBar.open('Your data has been preserved. You can continue editing.', 'OK', {\r\n              duration: 5000\r\n            });\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  private validateAllForms(): boolean {\r\n    return (\r\n      this.basicInfoForm.valid &&\r\n      this.pricingForm.valid &&\r\n      this.attributesForm.valid &&\r\n      this.seoForm.valid &&\r\n      this.model.images.length > 0\r\n    );\r\n  }\r\n\r\n  formatAttributeValue(key: string | number | (string | number)[], value: any): string {\r\n    if (value === undefined || value === null) {\r\n      return 'Not specified';\r\n    }\r\n\r\n    if (key === undefined) {\r\n      return String(value);\r\n    }\r\n\r\n    // Find the attribute field\r\n    const field = this.attributesFields.find(f => f.key === key);\r\n    if (!field) return String(value);\r\n\r\n    // Format based on field type\r\n    switch (field.type) {\r\n      case 'checkbox':\r\n        return value ? 'Yes' : 'No';\r\n      case 'select':\r\n        // Handle multiselect\r\n        if (Array.isArray(value)) {\r\n          if (field.props?.options) {\r\n            const options = field.props.options as { label: string, value: any }[];\r\n            return value.map(v => options.find(o => o.value === v)?.label ?? v).join(', ');\r\n          }\r\n          return value.join(', ');\r\n        } else if (field.props?.options) {\r\n          // Single select - find the label for the value\r\n          const options = field.props.options as { label: string, value: any }[];\r\n          const option = options.find(o => o.value === value);\r\n          return option ? option.label : String(value);\r\n        }\r\n        return String(value);\r\n      case 'color-picker':\r\n        // Format color values appropriately\r\n        return `<span style=\"color: ${value}\">■</span> ${value}`;\r\n      default:\r\n        return String(value);\r\n    }\r\n  }\r\n\r\n  formatEnumValue(value: string): string {\r\n    if (!value) return '';\r\n\r\n    // Convert from enum format (e.g., \"OutOfStock\") to display format (e.g., \"Out of Stock\")\r\n    return value\r\n      // Insert space before capitals\r\n      .replace(/([A-Z])/g, ' $1')\r\n      // Handle the first character\r\n      .replace(/^./, str => str.toUpperCase())\r\n      .trim();\r\n  }\r\n\r\n  // Helper method to convert field keys to string representation for use in template\r\n  getKeyAsString(key: string | number | (string | number)[]): string {\r\n    if (typeof key === 'string' || typeof key === 'number') {\r\n      return String(key);\r\n    } else if (Array.isArray(key)) {\r\n      return key.join('.');\r\n    }\r\n    return '';\r\n  }\r\n\r\n  getAttributeType(attributeName: string): string {\r\n    if (!this.selectedProductType) return 'string';\r\n\r\n    const attribute = this.selectedProductType.attributes.find(a => a.id === attributeName);\r\n\r\n    if (!attribute) return 'string';\r\n\r\n    // Map attribute types to API expected types\r\n    switch (attribute.type) {\r\n      case 'number':\r\n        return 'number';\r\n      case 'boolean':\r\n        return 'boolean';\r\n      case 'multiselect':\r\n        return 'array';\r\n      default:\r\n        return 'string';\r\n    }\r\n  }\r\n\r\n  processTypeSpecificAttributes(productData: any): void {\r\n    // This method will process attributes specific to certain product types\r\n    // For example, adding special handling for clothing sizes, electronics specs, etc.\r\n\r\n    if (!this.selectedProductType) return;\r\n\r\n    switch (this.selectedProductType.id) {\r\n      case 'clothing':\r\n        // Process clothing-specific attributes\r\n        this.processClothingAttributes(productData);\r\n        break;\r\n      case 'electronics':\r\n        // Process electronics-specific attributes\r\n        this.processElectronicsAttributes(productData);\r\n        break;\r\n      case 'books':\r\n        // Process book-specific attributes\r\n        this.processBooksAttributes(productData);\r\n        break;\r\n      default:\r\n        // No special processing needed\r\n        break;\r\n    }\r\n  }\r\n\r\n  private processClothingAttributes(productData: any): void {\r\n    // Example: Convert size/color attributes to variants if needed\r\n    const sizes = this.model.attributes['size'];\r\n    const colors = this.model.attributes['color'];\r\n\r\n    if (Array.isArray(sizes) && sizes.length > 0 && colors) {\r\n      // This is just an example of what could be done\r\n      // In a real application, we might create product variants here\r\n      productData.hasVariants = true;\r\n      productData.variantAttributes = ['size', 'color'];\r\n    }\r\n  }\r\n\r\n  private processElectronicsAttributes(productData: any): void {\r\n    // Example: Add technical specifications section\r\n    if (this.model.attributes['brand'] || this.model.attributes['model']) {\r\n      productData.specifications = {\r\n        brand: this.model.attributes['brand'],\r\n        model: this.model.attributes['model'],\r\n        warrantyMonths: this.model.attributes['warranty']\r\n      };\r\n    }\r\n  }\r\n\r\n  private processBooksAttributes(productData: any): void {\r\n    // Example: Add publishing information\r\n    if (this.model.attributes['author']) {\r\n      productData.publishingDetails = {\r\n        author: this.model.attributes['author'],\r\n        isbn: this.model.attributes['isbn'],\r\n        pages: this.model.attributes['pages']\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save the current form data to session storage\r\n   * This is used to preserve data during development when backend errors occur\r\n   */\r\n  private saveFormData(): void {\r\n    try {\r\n      const formData = {\r\n        basicInfo: this.basicInfoForm.value,\r\n        pricing: this.pricingForm.value,\r\n        attributes: this.attributesForm.value,\r\n        seo: this.seoForm.value,\r\n        images: this.model.images,\r\n        status: this.model.status,\r\n        visibility: this.model.visibility,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n      sessionStorage.setItem('product_form_backup', JSON.stringify(formData));\r\n      console.log('Product form data saved to session storage');\r\n    } catch (error) {\r\n      console.error('Failed to save form data to session storage', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load saved form data from session storage\r\n   * Returns true if data was loaded successfully\r\n   */\r\n  private loadSavedFormData(): boolean {\r\n    try {\r\n      const savedData = sessionStorage.getItem('product_form_backup');\r\n      if (!savedData) return false;\r\n\r\n      const formData = JSON.parse(savedData);\r\n\r\n      // Check if the saved data is still relevant (e.g., not too old)\r\n      const savedTime = new Date(formData.timestamp);\r\n      const currentTime = new Date();\r\n      const hoursSinceLastSave = (currentTime.getTime() - savedTime.getTime()) / (1000 * 60 * 60);\r\n\r\n      // Only load data if it's less than 12 hours old\r\n      if (hoursSinceLastSave > 12) {\r\n        this.clearSavedFormData();\r\n        return false;\r\n      }\r\n\r\n      // Update the model with saved data\r\n      if (formData.basicInfo) {\r\n        this.model.basicInfo = { ...this.model.basicInfo, ...formData.basicInfo };\r\n        this.basicInfoForm.patchValue(formData.basicInfo);\r\n      }\r\n\r\n      if (formData.pricing) {\r\n        this.model.pricing = { ...this.model.pricing, ...formData.pricing };\r\n        this.pricingForm.patchValue(formData.pricing);\r\n      }\r\n\r\n      if (formData.attributes) {\r\n        this.model.attributes = { ...formData.attributes };\r\n        this.attributesForm.patchValue(formData.attributes);\r\n      }\r\n\r\n      if (formData.seo) {\r\n        this.model.seo = formData.seo;\r\n        this.seoForm.patchValue(formData.seo);\r\n      }\r\n\r\n      if (formData.images && Array.isArray(formData.images)) {\r\n        this.model.images = formData.images;\r\n      }\r\n\r\n      if (formData.status) {\r\n        this.model.status = formData.status;\r\n      }\r\n\r\n      if (formData.visibility) {\r\n        this.model.visibility = formData.visibility;\r\n      }\r\n\r\n      this.snackBar.open('Form data has been restored from a previous session', 'Dismiss', {\r\n        duration: 5000\r\n      });\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Failed to load form data from session storage', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear any saved form data from session storage\r\n   */\r\n  private clearSavedFormData(): void {\r\n    try {\r\n      sessionStorage.removeItem('product_form_backup');\r\n    } catch (error) {\r\n      console.error('Failed to clear form data from session storage', error);\r\n    }\r\n  }\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .product-form-container {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 1rem;\n    }\n    \n    .step-content {\n      margin: 1.5rem 0;\n      max-width: 800px;\n    }\n    \n    .step-description {\n      color: #666;\n      margin-bottom: 1.5rem;\n    }\n    \n    .full-width {\n      width: 100%;\n      margin-bottom: 1.5rem;\n    }\n    \n    .step-actions {\n      display: flex;\n      justify-content: flex-end;\n      gap: 1rem;\n      margin-top: 2rem;\n    }\n    \n    .product-summary {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n      gap: 1.5rem;\n      margin: 2rem 0;\n    }\n    \n    .summary-section {\n      border-radius: 8px;\n      padding: 1.5rem;\n    }\n    \n    .summary-section h4 {\n      margin-top: 0;\n      margin-bottom: 1rem;\n      padding-bottom: 0.5rem;\n      border-bottom: 1px solid #eee;\n    }\n    \n    .summary-images {\n      display: flex;\n      gap: 0.5rem;\n    }\n    \n    .summary-image {\n      width: 60px;\n      height: 60px;\n      border-radius: 4px;\n      overflow: hidden;\n    }\n    \n    .summary-image img {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n    \n    .more-images {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 60px;\n      height: 60px;\n      background-color: #eee;\n      border-radius: 4px;\n      font-size: 0.75rem;\n    }\n    \n    .final-actions {\n      justify-content: space-between;\n    }\n    \n    .spin {\n      animation: spin 1.5s linear infinite;\n    }\n    \n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productTypeService",
                        "type": "ProductTypeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 451,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productTypeService",
                        "type": "ProductTypeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "EditProductDialogComponent",
            "id": "component-EditProductDialogComponent-20ca49fba1cde8d4542a142019ad313076804497ff38e5337818821a28b3ed21d528f8f1d98007300014a89ea0939c4da94c50029eab87789116744e7576d6eb",
            "file": "src/app/shared/components/dialog/edit-product-dialog/edit-product-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-product-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./edit-product-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentUser",
                    "defaultValue": "{ name: '' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<EditProductDialogComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "editProductForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "imagesToRemove",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "isUserMenuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "newImagePreviews",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "newImages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasImageChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFileSelected",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "removeExistingImage",
                    "args": [
                        {
                            "name": "imageId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imageId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeNewImage",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleUserMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormGroup, FormControl, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Product, ProductImage } from 'src/app/shared/models/product.model';\r\nimport { ProductService } from 'src/app/core/services/product.service';\r\nimport { AuthService } from 'src/app/core/services/auth.service';\r\nimport { ErrorService } from 'src/app/core/services/error.service';\r\nimport { firstValueFrom } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-edit-product-dialog',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatIconModule\r\n  ],\r\n\r\n  templateUrl: './edit-product-dialog.component.html',\r\n})\r\nexport class EditProductDialogComponent {\r\n  editProductForm: FormGroup;\r\n  newImages: File[] = [];\r\n  newImagePreviews: string[] = [];\r\n  imagesToRemove: string[] = [];\r\n  currentUser = { name: '' };\r\n  isUserMenuOpen = false;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<EditProductDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: Product,\r\n    private productService: ProductService,\r\n    private authService: AuthService,\r\n    private errorService: ErrorService\r\n  ) {\r\n    this.editProductForm = new FormGroup({\r\n      name: new FormControl(data.name, [Validators.required, Validators.minLength(3)]),\r\n      description: new FormControl(data.description),\r\n      price: new FormControl(data.price, [Validators.required, Validators.min(0)]),\r\n      stock: new FormControl(data.stock, [Validators.required, Validators.min(0)]),\r\n      category: new FormControl(data.category.id, [Validators.required])\r\n    });\r\n    this.currentUser.name = this.authService.getCurrentUserName();\r\n  }\r\n\r\n  hasImageChanges(): boolean {\r\n    return this.newImages.length > 0 || this.imagesToRemove.length > 0;\r\n  }\r\n\r\n  onFileSelected(event: Event) {\r\n    const input = event.target as HTMLInputElement;\r\n    if (input.files) {\r\n      const remainingSlots = 5 - (this.data.images.length - this.imagesToRemove.length) - this.newImages.length;\r\n      const files = Array.from(input.files).slice(0, remainingSlots);\r\n\r\n      files.forEach(file => {\r\n        if (file.size <= 5 * 1024 * 1024) { // 5MB limit\r\n          this.newImages.push(file);\r\n          const reader = new FileReader();\r\n          reader.onload = (e: ProgressEvent<FileReader>) => {\r\n            if (e.target?.result) {\r\n              this.newImagePreviews.push(e.target.result as string);\r\n            }\r\n          };\r\n          reader.readAsDataURL(file);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  removeExistingImage(imageId: string) {\r\n    this.imagesToRemove.push(imageId);\r\n  }\r\n\r\n  removeNewImage(index: number) {\r\n    this.newImages.splice(index, 1);\r\n    this.newImagePreviews.splice(index, 1);\r\n  }\r\n\r\n  toggleUserMenu() {\r\n    this.isUserMenuOpen = !this.isUserMenuOpen;\r\n  }\r\n\r\n  logout() {\r\n    this.authService.logout();\r\n    this.dialogRef.close();\r\n  }\r\n\r\n\r\n  async onSubmit() {\r\n    if (!this.editProductForm.valid) return;\r\n\r\n    try {\r\n      // Step 1: Handle image removals first\r\n      if (this.imagesToRemove.length > 0) {\r\n        await firstValueFrom(\r\n          this.productService.deleteImages(this.imagesToRemove)\r\n        );\r\n      }\r\n\r\n      // Step 2: Upload new images\r\n      let newImages: ProductImage[] = [];\r\n      if (this.newImages.length > 0) {\r\n        newImages = await firstValueFrom(\r\n          this.productService.uploadImages(this.newImages)\r\n        );\r\n      }\r\n\r\n      // Step 3: Update product with remaining + new images\r\n      const formValue = this.editProductForm.value;\r\n      const remainingImages = this.data.images.filter(\r\n        img => !this.imagesToRemove.includes(img.id)\r\n      );\r\n\r\n      const updateCommand = {\r\n        id: this.data.id,\r\n        name: formValue.name,\r\n        description: formValue.description,\r\n        price: formValue.price,\r\n        currency: 'USD',\r\n        categoryId: formValue.category,\r\n        stock: formValue.stock,\r\n        status: this.data.status,\r\n        visibility: this.data.visibility,\r\n        images: [...remainingImages, ...newImages]\r\n      };\r\n\r\n      await firstValueFrom(this.productService.updateProduct(updateCommand));\r\n      this.dialogRef.close(true);\r\n    } catch (error) {\r\n      this.errorService.addError({\r\n        code: '',\r\n        message: 'Failed to update product: ' + (error as Error).message,\r\n        severity: 'error'\r\n      });\r\n      this.dialogRef.close(false);\r\n    }\r\n  }\r\n  onCancel() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  getErrorMessage(controlName: string): string {\r\n    const control = this.editProductForm.get(controlName);\r\n    if (control?.hasError('required')) {\r\n      return 'You must enter a value';\r\n    } else if (control?.hasError('minlength')) {\r\n      return 'Value is too short';\r\n    } else if (control?.hasError('min')) {\r\n      return 'Value is too low';\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditProductDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "Product",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditProductDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "Product",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"edit-product-dialog max-w-lg w-full bg-white dark:bg-slate-800 rounded-lg shadow-lg overflow-hidden\">\r\n    <!-- Dialog Header -->\r\n    <div\r\n        class=\"bg-white dark:bg-slate-800 px-6 py-4 border-b border-slate-200 dark:border-slate-700 flex items-center justify-between\">\r\n        <h2 class=\"text-xl font-semibold text-slate-800 dark:text-white\">Edit Product</h2>\r\n        <button mat-icon-button (click)=\"onCancel()\"\r\n            class=\"flex items-center justify-center h-8 w-8 rounded-full text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700\">\r\n            <mat-icon>close</mat-icon>\r\n        </button>\r\n    </div>\r\n\r\n    <form [formGroup]=\"editProductForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"px-6 py-5 max-h-[calc(100vh-200px)] overflow-y-auto\">\r\n            <!-- Product Name -->\r\n            <div class=\"mb-4\">\r\n                <label class=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1.5\" for=\"productName\">\r\n                    Product Name <span class=\"text-rose-500\">*</span>\r\n                </label>\r\n                <input id=\"productName\" type=\"text\" formControlName=\"name\"\r\n                    class=\"w-full px-3 py-2 rounded-md border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-800 text-slate-800 dark:text-slate-200 focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:focus:ring-primary-400 dark:focus:border-primary-400 transition-all\"\r\n                    placeholder=\"Enter product name\">\r\n                <div *ngIf=\"editProductForm.get('name')?.errors?.['required'] && editProductForm.get('name')?.touched\"\r\n                    class=\"mt-1 text-xs text-rose-500\">\r\n                    Product name is required\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Description -->\r\n            <div class=\"mb-4\">\r\n                <label class=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1.5\" for=\"description\">\r\n                    Description\r\n                </label>\r\n                <textarea id=\"description\" formControlName=\"description\"\r\n                    class=\"w-full px-3 py-2 rounded-md border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-800 text-slate-800 dark:text-slate-200 focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:focus:ring-primary-400 dark:focus:border-primary-400 transition-all\"\r\n                    placeholder=\"Enter product description\" rows=\"3\"></textarea>\r\n            </div>\r\n\r\n            <!-- Price & Stock -->\r\n            <div class=\"grid grid-cols-2 gap-4 mb-4\">\r\n                <div>\r\n                    <label class=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1.5\" for=\"price\">\r\n                        Price <span class=\"text-rose-500\">*</span>\r\n                    </label>\r\n                    <div class=\"relative\">\r\n                        <div class=\"absolute left-3 top-1/2 -translate-y-1/2 text-slate-500\">$</div>\r\n                        <input id=\"price\" type=\"number\" formControlName=\"price\"\r\n                            class=\"w-full pl-7 pr-3 py-2 rounded-md border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-800 text-slate-800 dark:text-slate-200 focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:focus:ring-primary-400 dark:focus:border-primary-400 transition-all\"\r\n                            placeholder=\"0.00\">\r\n                    </div>\r\n                    <div *ngIf=\"editProductForm.get('price')?.errors?.['required'] && editProductForm.get('price')?.touched\"\r\n                        class=\"mt-1 text-xs text-rose-500\">\r\n                        Price is required\r\n                    </div>\r\n                </div>\r\n\r\n                <div>\r\n                    <label class=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1.5\" for=\"stock\">\r\n                        Stock <span class=\"text-rose-500\">*</span>\r\n                    </label>\r\n                    <input id=\"stock\" type=\"number\" formControlName=\"stock\"\r\n                        class=\"w-full px-3 py-2 rounded-md border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-800 text-slate-800 dark:text-slate-200 focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:focus:ring-primary-400 dark:focus:border-primary-400 transition-all\"\r\n                        placeholder=\"0\">\r\n                    <div *ngIf=\"editProductForm.get('stock')?.errors?.['required'] && editProductForm.get('stock')?.touched\"\r\n                        class=\"mt-1 text-xs text-rose-500\">\r\n                        Stock is required\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Category -->\r\n            <div class=\"mb-5\">\r\n                <label class=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1.5\" for=\"category\">\r\n                    Category <span class=\"text-rose-500\">*</span>\r\n                </label>\r\n                <div class=\"relative\">\r\n                    <select id=\"category\" formControlName=\"category\"\r\n                        class=\"w-full px-3 py-2 appearance-none rounded-md border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-800 text-slate-800 dark:text-slate-200 focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:focus:ring-primary-400 dark:focus:border-primary-400 transition-all\">\r\n                        <option [value]=\"data.category.id\">{{ data.category.name }}</option>\r\n                        <!-- Additional categories would go here -->\r\n                    </select>\r\n                    <div class=\"absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none\">\r\n                        <mat-icon class=\"text-slate-400\">arrow_drop_down</mat-icon>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Product Images -->\r\n            <div>\r\n                <label class=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-3\">\r\n                    Product Images\r\n                </label>\r\n\r\n                <!-- Image Grid -->\r\n                <div *ngIf=\"data.images?.length || newImagePreviews.length\" class=\"grid grid-cols-3 gap-3 mb-4\">\r\n                    <!-- Existing Images -->\r\n                    <div *ngFor=\"let image of data.images\"\r\n                        class=\"relative group aspect-square bg-slate-100 dark:bg-slate-700 rounded-md overflow-hidden border border-slate-200 dark:border-slate-600\">\r\n                        <img [src]=\"image.url\" [alt]=\"data.name\" class=\"w-full h-full object-cover\">\r\n                        <div\r\n                            class=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-200 flex items-center justify-center\">\r\n                            <button type=\"button\" (click)=\"removeExistingImage(image.id)\"\r\n                                class=\"opacity-0 group-hover:opacity-100 bg-white dark:bg-slate-800 text-rose-500 h-8 w-8 rounded-full shadow-md flex items-center justify-center transition-opacity\">\r\n                                <mat-icon class=\"text-sm h-5 w-5\">delete</mat-icon>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- New Images Preview -->\r\n                    <div *ngFor=\"let preview of newImagePreviews; let i = index\"\r\n                        class=\"relative group aspect-square bg-slate-100 dark:bg-slate-700 rounded-md overflow-hidden border border-slate-200 dark:border-slate-600\">\r\n                        <img [src]=\"preview\" [alt]=\"'New image ' + (i + 1)\" class=\"w-full h-full object-cover\">\r\n                        <div\r\n                            class=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-200 flex items-center justify-center\">\r\n                            <button type=\"button\" (click)=\"removeNewImage(i)\"\r\n                                class=\"opacity-0 group-hover:opacity-100 bg-white dark:bg-slate-800 text-rose-500 h-8 w-8 rounded-full shadow-md flex items-center justify-center transition-opacity\">\r\n                                <mat-icon class=\"text-sm h-5 w-5\">delete</mat-icon>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- No Images Message -->\r\n                <div *ngIf=\"!data.images?.length && !newImagePreviews.length\"\r\n                    class=\"bg-slate-50 dark:bg-slate-700 rounded-md border border-slate-200 dark:border-slate-700 p-4 text-center mb-4\">\r\n                    <span class=\"text-sm text-slate-500 dark:text-slate-400\">No product images</span>\r\n                </div>\r\n\r\n                <!-- Add Images Button -->\r\n                <div class=\"flex items-center justify-center\">\r\n                    <input type=\"file\" #fileInput accept=\"image/*\" multiple (change)=\"onFileSelected($event)\"\r\n                        class=\"hidden\">\r\n                    <button type=\"button\" (click)=\"fileInput.click()\"\r\n                        class=\"inline-flex items-center px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm text-sm font-medium text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-800 hover:bg-slate-50 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-primary-400 dark:focus:ring-offset-slate-800\">\r\n                        <mat-icon class=\"h-5 w-5 mr-2 text-slate-500 dark:text-slate-400\">add_photo_alternate</mat-icon>\r\n                        Add Images\r\n                    </button>\r\n                    <span class=\"ml-3 text-xs text-slate-500 dark:text-slate-400\">Max 5 images, each up to 5MB</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Dialog Footer -->\r\n        <div\r\n            class=\"bg-slate-50 dark:bg-slate-900/100 px-6 py-4 border-t border-slate-200 dark:border-slate-900 flex justify-end gap-3\">\r\n            <button type=\"button\" (click)=\"onCancel()\"\r\n                class=\"px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-md text-sm font-medium text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-800 hover:bg-slate-50 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-primary-400 dark:focus:ring-offset-slate-800\">\r\n                Cancel\r\n            </button>\r\n            <button type=\"submit\" [disabled]=\"editProductForm.invalid || (!editProductForm.dirty && !hasImageChanges())\"\r\n                class=\"px-4 py-2 rounded-md text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 disabled:bg-primary-400 disabled:cursor-not-allowed focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-primary-400 dark:focus:ring-offset-slate-800\">\r\n                Save Changes\r\n            </button>\r\n        </div>\r\n    </form>\r\n</div>"
        },
        {
            "name": "EnhancedProductFormComponent",
            "id": "component-EnhancedProductFormComponent-4081aac2ea438b6b05063c3833087bd53661c820d50871e9746be5a17ed1e8f57694f808008f8a66299f81fe757cf5477162dad3cfb2d0ee81229b798bb87069",
            "file": "src/app/features/products/pages/product-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-enhanced-product-form",
            "styleUrls": [],
            "styles": [
                "\n    .enhanced-product-form {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 1rem;\n    }\n    \n    .page-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 1rem;\n    }\n    \n    .page-header h1 {\n      margin: 0;\n    }\n    \n    .tab-content {\n      padding: 1.5rem 0;\n    }\n    \n    .description {\n      color: #666;\n      margin-bottom: 1.5rem;\n    }\n    \n    .scanner-section {\n      max-width: 800px;\n      margin: 0 auto;\n    }\n    \n    .barcode-results {\n      margin-top: 2rem;\n    }\n    \n    .result-cards {\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n      gap: 1rem;\n      margin-top: 1rem;\n    }\n    \n    .result-card {\n      display: flex;\n      flex-direction: column;\n    }\n    \n    .result-card img {\n      max-height: 200px;\n      object-fit: contain;\n      margin: 1rem 0;\n    }\n    \n    .new-product-card {\n      border: 2px dashed #3f51b5;\n      background-color: rgba(63, 81, 181, 0.05);\n    }\n  "
            ],
            "template": "<div class=\"enhanced-product-form\">\n  <div class=\"page-header\">\n    <h1>{{ isEditMode ? 'Edit Product' : 'Add Product' }}</h1>\n    <div class=\"actions\">\n      <button mat-button routerLink=\"/products/list\">\n        <mat-icon>arrow_back</mat-icon>\n        Back to Products\n      </button>\n    </div>\n  </div>\n\n  <mat-card>\n    <mat-card-content>\n      <mat-tab-group [selectedIndex]=\"selectedTab\" (selectedIndexChange)=\"onTabChange($event)\">\n        <mat-tab label=\"Single Product\">\n          <div class=\"tab-content\">\n            <app-dynamic-product-form\n              [attr.productId]=\"productId\">\n            </app-dynamic-product-form>\n          </div>\n        </mat-tab>\n\n        <mat-tab label=\"Bulk Import\">\n          <div class=\"tab-content\">\n            <app-bulk-product-import></app-bulk-product-import>\n          </div>\n        </mat-tab>\n\n        <mat-tab label=\"Barcode Scanner\">\n          <div class=\"tab-content\">\n            <div class=\"scanner-section\">\n              <h2>Scan Barcode to Find or Create Product</h2>\n              <p class=\"description\">\n                Use your device's camera to scan a product barcode. The system will automatically\n                search for the product, or allow you to create a new one if it doesn't exist.\n              </p>\n\n              <app-barcode-scanner\n                (codeScanned)=\"onBarcodeScanned($event)\">\n              </app-barcode-scanner>\n\n              <div class=\"barcode-results\" *ngIf=\"barcodeSearchResults.length > 0\">\n                <h3>Search Results</h3>\n                <p *ngIf=\"barcodeSearchResults.length === 0\">No products found with this barcode.</p>\n\n                <div class=\"result-cards\">\n                  <mat-card *ngFor=\"let product of barcodeSearchResults\" class=\"result-card\">\n                    <mat-card-header>\n                      <mat-card-title>{{ product.name }}</mat-card-title>\n                      <mat-card-subtitle>SKU: {{ product.sku }}</mat-card-subtitle>\n                    </mat-card-header>\n\n                    <img *ngIf=\"product.images?.length\" [src]=\"product.images[0].url\" [alt]=\"product.name\">\n\n                    <mat-card-content>\n                      <p><strong>Price:</strong> {{ product.price | currency:product.currency }}</p>\n                      <p><strong>Stock:</strong> {{ product.stock }}</p>\n                      <p><strong>Category:</strong> {{ product.category?.name }}</p>\n                    </mat-card-content>\n\n                    <mat-card-actions>\n                      <button mat-button color=\"primary\" [routerLink]=\"['/products/edit', product.id]\">\n                        <mat-icon>edit</mat-icon>\n                        Edit\n                      </button>\n                    </mat-card-actions>\n                  </mat-card>\n\n                  <mat-card class=\"result-card new-product-card\" *ngIf=\"barcodeSearchResults.length === 0\">\n                    <mat-card-header>\n                      <mat-card-title>Create New Product</mat-card-title>\n                      <mat-card-subtitle>No products found with barcode: {{ lastScannedBarcode }}</mat-card-subtitle>\n                    </mat-card-header>\n\n                    <mat-card-content>\n                      <p>Would you like to create a new product with this barcode?</p>\n                    </mat-card-content>\n\n                    <mat-card-actions>\n                      <button mat-raised-button color=\"primary\" (click)=\"createProductWithBarcode()\">\n                        <mat-icon>add</mat-icon>\n                        Create Product\n                      </button>\n                    </mat-card-actions>\n                  </mat-card>\n                </div>\n              </div>\n            </div>\n          </div>\n        </mat-tab>\n      </mat-tab-group>\n    </mat-card-content>\n  </mat-card>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "barcodeSearchResults",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 194
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 196,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "isEditMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 188
                },
                {
                    "name": "lastScannedBarcode",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 193
                },
                {
                    "name": "productId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 189
                },
                {
                    "name": "selectedTab",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 190
                }
            ],
            "methodsClass": [
                {
                    "name": "createProductWithBarcode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBarcodeScanned",
                    "args": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTabChange",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatSnackBarModule",
                    "type": "module"
                },
                {
                    "name": "DynamicProductFormComponent",
                    "type": "component"
                },
                {
                    "name": "BarcodeScannerComponent",
                    "type": "component"
                },
                {
                    "name": "BulkProductImportComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router, ActivatedRoute, RouterModule } from '@angular/router';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { DynamicProductFormComponent } from '../components/dynamic-product-form/dynamic-product-form.component';\r\nimport { BarcodeScannerComponent } from '../components/barcode-scanner/barcode-scanner.component';\r\nimport { BulkProductImportComponent } from '../components/bulk-product-import/bulk-product-import.component';\r\n\r\n@Component({\r\n  selector: 'app-enhanced-product-form',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    MatTabsModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    DynamicProductFormComponent,\r\n    BarcodeScannerComponent,\r\n    BulkProductImportComponent\r\n  ],\r\n  template: `\r\n    <div class=\"enhanced-product-form\">\r\n      <div class=\"page-header\">\r\n        <h1>{{ isEditMode ? 'Edit Product' : 'Add Product' }}</h1>\r\n        <div class=\"actions\">\r\n          <button mat-button routerLink=\"/products/list\">\r\n            <mat-icon>arrow_back</mat-icon>\r\n            Back to Products\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <mat-card>\r\n        <mat-card-content>\r\n          <mat-tab-group [selectedIndex]=\"selectedTab\" (selectedIndexChange)=\"onTabChange($event)\">\r\n            <mat-tab label=\"Single Product\">\r\n              <div class=\"tab-content\">\r\n                <app-dynamic-product-form\r\n                  [attr.productId]=\"productId\">\r\n                </app-dynamic-product-form>\r\n              </div>\r\n            </mat-tab>\r\n            \r\n            <mat-tab label=\"Bulk Import\">\r\n              <div class=\"tab-content\">\r\n                <app-bulk-product-import></app-bulk-product-import>\r\n              </div>\r\n            </mat-tab>\r\n            \r\n            <mat-tab label=\"Barcode Scanner\">\r\n              <div class=\"tab-content\">\r\n                <div class=\"scanner-section\">\r\n                  <h2>Scan Barcode to Find or Create Product</h2>\r\n                  <p class=\"description\">\r\n                    Use your device's camera to scan a product barcode. The system will automatically\r\n                    search for the product, or allow you to create a new one if it doesn't exist.\r\n                  </p>\r\n                  \r\n                  <app-barcode-scanner\r\n                    (codeScanned)=\"onBarcodeScanned($event)\">\r\n                  </app-barcode-scanner>\r\n                  \r\n                  <div class=\"barcode-results\" *ngIf=\"barcodeSearchResults.length > 0\">\r\n                    <h3>Search Results</h3>\r\n                    <p *ngIf=\"barcodeSearchResults.length === 0\">No products found with this barcode.</p>\r\n                    \r\n                    <div class=\"result-cards\">\r\n                      <mat-card *ngFor=\"let product of barcodeSearchResults\" class=\"result-card\">\r\n                        <mat-card-header>\r\n                          <mat-card-title>{{ product.name }}</mat-card-title>\r\n                          <mat-card-subtitle>SKU: {{ product.sku }}</mat-card-subtitle>\r\n                        </mat-card-header>\r\n                        \r\n                        <img *ngIf=\"product.images?.length\" [src]=\"product.images[0].url\" [alt]=\"product.name\">\r\n                        \r\n                        <mat-card-content>\r\n                          <p><strong>Price:</strong> {{ product.price | currency:product.currency }}</p>\r\n                          <p><strong>Stock:</strong> {{ product.stock }}</p>\r\n                          <p><strong>Category:</strong> {{ product.category?.name }}</p>\r\n                        </mat-card-content>\r\n                        \r\n                        <mat-card-actions>\r\n                          <button mat-button color=\"primary\" [routerLink]=\"['/products/edit', product.id]\">\r\n                            <mat-icon>edit</mat-icon>\r\n                            Edit\r\n                          </button>\r\n                        </mat-card-actions>\r\n                      </mat-card>\r\n                      \r\n                      <mat-card class=\"result-card new-product-card\" *ngIf=\"barcodeSearchResults.length === 0\">\r\n                        <mat-card-header>\r\n                          <mat-card-title>Create New Product</mat-card-title>\r\n                          <mat-card-subtitle>No products found with barcode: {{ lastScannedBarcode }}</mat-card-subtitle>\r\n                        </mat-card-header>\r\n                        \r\n                        <mat-card-content>\r\n                          <p>Would you like to create a new product with this barcode?</p>\r\n                        </mat-card-content>\r\n                        \r\n                        <mat-card-actions>\r\n                          <button mat-raised-button color=\"primary\" (click)=\"createProductWithBarcode()\">\r\n                            <mat-icon>add</mat-icon>\r\n                            Create Product\r\n                          </button>\r\n                        </mat-card-actions>\r\n                      </mat-card>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </mat-tab>\r\n          </mat-tab-group>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .enhanced-product-form {\r\n      max-width: 1200px;\r\n      margin: 0 auto;\r\n      padding: 1rem;\r\n    }\r\n    \r\n    .page-header {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      margin-bottom: 1rem;\r\n    }\r\n    \r\n    .page-header h1 {\r\n      margin: 0;\r\n    }\r\n    \r\n    .tab-content {\r\n      padding: 1.5rem 0;\r\n    }\r\n    \r\n    .description {\r\n      color: #666;\r\n      margin-bottom: 1.5rem;\r\n    }\r\n    \r\n    .scanner-section {\r\n      max-width: 800px;\r\n      margin: 0 auto;\r\n    }\r\n    \r\n    .barcode-results {\r\n      margin-top: 2rem;\r\n    }\r\n    \r\n    .result-cards {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n      gap: 1rem;\r\n      margin-top: 1rem;\r\n    }\r\n    \r\n    .result-card {\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n    \r\n    .result-card img {\r\n      max-height: 200px;\r\n      object-fit: contain;\r\n      margin: 1rem 0;\r\n    }\r\n    \r\n    .new-product-card {\r\n      border: 2px dashed #3f51b5;\r\n      background-color: rgba(63, 81, 181, 0.05);\r\n    }\r\n  `]\r\n})\r\nexport class EnhancedProductFormComponent implements OnInit, OnDestroy {\r\n  isEditMode = false;\r\n  productId: string = '';\r\n  selectedTab = 0;\r\n\r\n  // Barcode scanning\r\n  lastScannedBarcode = '';\r\n  barcodeSearchResults: any[] = [];\r\n\r\n  private readonly destroy$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private readonly route: ActivatedRoute,\r\n    private readonly router: Router,\r\n    private readonly snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    // Check if we're in edit mode\r\n    this.route.paramMap.pipe(\r\n      takeUntil(this.destroy$)\r\n    ).subscribe(params => {\r\n      const id = params.get('id');\r\n      if (id) {\r\n        this.isEditMode = true;\r\n        this.productId = id;\r\n      }\r\n    });\r\n\r\n    // Check if a tab is specified in the query params\r\n    this.route.queryParamMap.pipe(\r\n      takeUntil(this.destroy$)\r\n    ).subscribe(params => {\r\n      const tab = params.get('tab');\r\n      if (tab) {\r\n        switch (tab) {\r\n          case 'bulk':\r\n            this.selectedTab = 1;\r\n            break;\r\n          case 'scanner':\r\n            this.selectedTab = 2;\r\n            break;\r\n          default:\r\n            this.selectedTab = 0;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  onTabChange(index: number): void {\r\n    this.selectedTab = index;\r\n\r\n    // Update query params\r\n    let tabParam: string;\r\n    switch (index) {\r\n      case 1:\r\n        tabParam = 'bulk';\r\n        break;\r\n      case 2:\r\n        tabParam = 'scanner';\r\n        break;\r\n      default:\r\n        tabParam = '';\r\n    }\r\n\r\n    this.router.navigate([], {\r\n      relativeTo: this.route,\r\n      queryParams: tabParam ? { tab: tabParam } : {},\r\n      queryParamsHandling: 'merge'\r\n    });\r\n  }\r\n\r\n  onBarcodeScanned(barcode: string): void {\r\n    this.lastScannedBarcode = barcode;\r\n\r\n    // In a real app, we would search for products with this barcode\r\n    // For now, we'll simulate a search with a random outcome\r\n    setTimeout(() => {\r\n      if (Math.random() > 0.7) {\r\n        // Simulate finding a product\r\n        this.barcodeSearchResults = [{\r\n          id: 'sim-' + Math.random().toString(36).substring(2),\r\n          name: 'Product ' + barcode.substring(0, 4),\r\n          sku: 'SKU-' + barcode.substring(0, 6),\r\n          barcode: barcode,\r\n          price: 19.99 + Math.random() * 20,\r\n          currency: 'USD',\r\n          stock: Math.floor(Math.random() * 100),\r\n          category: { name: 'Category ' + Math.floor(Math.random() * 5) },\r\n          images: [\r\n            { url: 'https://via.placeholder.com/150' }\r\n          ]\r\n        }];\r\n      } else {\r\n        // No products found\r\n        this.barcodeSearchResults = [];\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  createProductWithBarcode(): void {\r\n    // In a real app, we would navigate to the product form with the barcode pre-filled\r\n    this.selectedTab = 0;\r\n\r\n    this.snackBar.open(\r\n      `Ready to create product with barcode: ${this.lastScannedBarcode}`,\r\n      'Dismiss',\r\n      { duration: 3000 }\r\n    );\r\n\r\n    // Update URL without reloading\r\n    this.router.navigate([], {\r\n      relativeTo: this.route,\r\n      queryParams: { tab: '', barcode: this.lastScannedBarcode },\r\n      queryParamsHandling: 'merge'\r\n    });\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .enhanced-product-form {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 1rem;\n    }\n    \n    .page-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 1rem;\n    }\n    \n    .page-header h1 {\n      margin: 0;\n    }\n    \n    .tab-content {\n      padding: 1.5rem 0;\n    }\n    \n    .description {\n      color: #666;\n      margin-bottom: 1.5rem;\n    }\n    \n    .scanner-section {\n      max-width: 800px;\n      margin: 0 auto;\n    }\n    \n    .barcode-results {\n      margin-top: 2rem;\n    }\n    \n    .result-cards {\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n      gap: 1rem;\n      margin-top: 1rem;\n    }\n    \n    .result-card {\n      display: flex;\n      flex-direction: column;\n    }\n    \n    .result-card img {\n      max-height: 200px;\n      object-fit: contain;\n      margin: 1rem 0;\n    }\n    \n    .new-product-card {\n      border: 2px dashed #3f51b5;\n      background-color: rgba(63, 81, 181, 0.05);\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 196,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "ErrorPageComponent",
            "id": "component-ErrorPageComponent-b5ad96ea6e2381e8a6e468c3dc008445e134e4aeee359299f1e729b19901e197b3b46dbd4882e936256b5b33623726ef01f5a6c8361dc762aa220436b21e014a",
            "file": "src/app/features/error-pages/error-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-error-page",
            "styleUrls": [],
            "styles": [
                "\n        .error-container {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            min-height: 80vh;\n            padding: 1rem;\n            text-align: center;\n        }\n\n        .error-content {\n            max-width: 400px;\n        }\n\n        .error-icon {\n            font-size: 64px;\n            height: 64px;\n            width: 64px;\n            margin-bottom: 1.5rem;\n\n            &.error { color: var(--error); }\n            &.warning { color: var(--warning); }\n            &.info { color: var(--info); }\n        }\n\n        h1 {\n            font-size: 2rem;\n            font-weight: bold;\n            margin-bottom: 1rem;\n            color: var(--text-primary);\n        }\n\n        .error-message {\n            color: var(--text-secondary);\n            margin-bottom: 2rem;\n        }\n\n        .action-buttons {\n            display: flex;\n            gap: 1rem;\n            justify-content: center;\n        }\n    "
            ],
            "template": "<div class=\"error-container\">\n    <div class=\"error-content\">\n        <mat-icon class=\"error-icon\" aria-hidden=\"false\" aria-label={config.icon} [ngClass]=\"config.icon\" fontIcon=\"{{config.icon}}\"></mat-icon>\n\n        <h1>{{config.title}}</h1>\n        <p class=\"error-message\">{{config.message}}</p>\n\n        <div class=\"action-buttons\">\n            @if (config.showRetryButton) {\n                <button\n                    mat-stroked-button\n                    (click)=\"retryLastAction()\"\n                >\n                    Try Again\n                </button>\n            }\n\n            @if (config.showHomeButton) {\n                <button\n                    mat-flat-button\n                    color=\"primary\"\n                    (click)=\"goHome()\"\n                >\n                    Return Home\n                </button>\n            }\n        </div>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "ErrorConfig",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "goHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "retryLastAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\nexport interface ErrorConfig {\r\n    title: string;\r\n    message: string;\r\n    icon: string;\r\n    actionText?: string;\r\n    showHomeButton?: boolean;\r\n    showRetryButton?: boolean;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-error-page',\r\n    standalone: true,\r\n    imports: [CommonModule, MatButtonModule, MatIconModule],\r\n    template: `\r\n        <div class=\"error-container\">\r\n            <div class=\"error-content\">\r\n                <mat-icon class=\"error-icon\" aria-hidden=\"false\" aria-label={config.icon} [ngClass]=\"config.icon\" fontIcon=\"{{config.icon}}\"></mat-icon>\r\n                \r\n                <h1>{{config.title}}</h1>\r\n                <p class=\"error-message\">{{config.message}}</p>\r\n                \r\n                <div class=\"action-buttons\">\r\n                    @if (config.showRetryButton) {\r\n                        <button \r\n                            mat-stroked-button \r\n                            (click)=\"retryLastAction()\"\r\n                        >\r\n                            Try Again\r\n                        </button>\r\n                    }\r\n                    \r\n                    @if (config.showHomeButton) {\r\n                        <button \r\n                            mat-flat-button \r\n                            color=\"primary\"\r\n                            (click)=\"goHome()\"\r\n                        >\r\n                            Return Home\r\n                        </button>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .error-container {\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            justify-content: center;\r\n            min-height: 80vh;\r\n            padding: 1rem;\r\n            text-align: center;\r\n        }\r\n\r\n        .error-content {\r\n            max-width: 400px;\r\n        }\r\n\r\n        .error-icon {\r\n            font-size: 64px;\r\n            height: 64px;\r\n            width: 64px;\r\n            margin-bottom: 1.5rem;\r\n\r\n            &.error { color: var(--error); }\r\n            &.warning { color: var(--warning); }\r\n            &.info { color: var(--info); }\r\n        }\r\n\r\n        h1 {\r\n            font-size: 2rem;\r\n            font-weight: bold;\r\n            margin-bottom: 1rem;\r\n            color: var(--text-primary);\r\n        }\r\n\r\n        .error-message {\r\n            color: var(--text-secondary);\r\n            margin-bottom: 2rem;\r\n        }\r\n\r\n        .action-buttons {\r\n            display: flex;\r\n            gap: 1rem;\r\n            justify-content: center;\r\n        }\r\n    `]\r\n})\r\nexport class ErrorPageComponent {\r\n    @Input() config!: ErrorConfig;\r\n\r\n    constructor(private router: Router) { }\r\n\r\n    retryLastAction() {\r\n        window.location.reload();\r\n    }\r\n\r\n    goHome() {\r\n        this.router.navigate(['/']);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        .error-container {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            min-height: 80vh;\n            padding: 1rem;\n            text-align: center;\n        }\n\n        .error-content {\n            max-width: 400px;\n        }\n\n        .error-icon {\n            font-size: 64px;\n            height: 64px;\n            width: 64px;\n            margin-bottom: 1.5rem;\n\n            &.error { color: var(--error); }\n            &.warning { color: var(--warning); }\n            &.info { color: var(--info); }\n        }\n\n        h1 {\n            font-size: 2rem;\n            font-weight: bold;\n            margin-bottom: 1rem;\n            color: var(--text-primary);\n        }\n\n        .error-message {\n            color: var(--text-secondary);\n            margin-bottom: 2rem;\n        }\n\n        .action-buttons {\n            display: flex;\n            gap: 1rem;\n            justify-content: center;\n        }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 98,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "ErrorToastComponent",
            "id": "component-ErrorToastComponent-a578c4b1d6bfc576f3914aeda76d1a32977f452669417b552dd400b254e9f1aaa5e57550b02be89af9019a94c67c9a567fa8af16256df5c761d254fab925e597",
            "file": "src/app/shared/components/error-toast/error-toast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-error-toast",
            "styleUrls": [],
            "styles": [
                "\n   i:hover {\n      cursor: pointer;\n    }\n    .error-toast {\n      @apply p-4 rounded-lg shadow-lg max-w-md w-full;\n      \n      &.error {\n        @apply bg-red-100 text-red-800;\n      }\n      \n      &.warning {\n        @apply bg-yellow-100 text-yellow-800;\n      }\n      \n      &.info {\n        @apply bg-blue-100 text-blue-800;\n      }\n    }\n  "
            ],
            "template": "<div class=\"fixed bottom-4 right-4 z-50 flex flex-col gap-2\">\n  @for (error of errors; track error.id) {\n    <div\n      class=\"error-toast\"\n      [ngClass]=\"getToastClass(error)\"\n      [@slideIn]\n    >\n      <div class=\"flex items-center gap-2\">\n        <i [class]=\"getIconClass(error)\" (click)=\"removeError(error)\"></i>\n        <div class=\"flex-1\">\n          <h4 class=\"font-semibold\">{{ error.code }}</h4>\n          <p>{{ error.message }}</p>\n          @if (error.details) {\n            <p class=\"text-sm opacity-75\">{{ error.details }}</p>\n          }\n        </div>\n        <!-- <button\n          (click)=\"removeError(error)\"\n          class=\"text-current opacity-50 hover:opacity-100\"\n        >\n          <i class=\"bi bi-x text-xl\"></i>\n        </button> -->\n      </div>\n    </div>\n  }\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiError[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                }
            ],
            "methodsClass": [
                {
                    "name": "getIconClass",
                    "args": [
                        {
                            "name": "error",
                            "type": "ApiError",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "ApiError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToastClass",
                    "args": [
                        {
                            "name": "error",
                            "type": "ApiError",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "ApiError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeError",
                    "args": [
                        {
                            "name": "error",
                            "type": "ApiError",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "ApiError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ErrorService } from '../../../core/services/error.service';\r\nimport { ApiError } from '../../models/error.models';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\n\r\n@Component({\r\n  selector: 'app-error-toast',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"fixed bottom-4 right-4 z-50 flex flex-col gap-2\">\r\n      @for (error of errors; track error.id) {\r\n        <div \r\n          class=\"error-toast\" \r\n          [ngClass]=\"getToastClass(error)\"\r\n          [@slideIn]\r\n        >\r\n          <div class=\"flex items-center gap-2\">\r\n            <i [class]=\"getIconClass(error)\" (click)=\"removeError(error)\"></i>\r\n            <div class=\"flex-1\">\r\n              <h4 class=\"font-semibold\">{{ error.code }}</h4>\r\n              <p>{{ error.message }}</p>\r\n              @if (error.details) {\r\n                <p class=\"text-sm opacity-75\">{{ error.details }}</p>\r\n              }\r\n            </div>\r\n            <!-- <button \r\n              (click)=\"removeError(error)\"\r\n              class=\"text-current opacity-50 hover:opacity-100\"\r\n            >\r\n              <i class=\"bi bi-x text-xl\"></i>\r\n            </button> -->\r\n          </div>\r\n        </div>\r\n      }\r\n    </div>\r\n  `,\r\n  styles: [`\r\n   i:hover {\r\n      cursor: pointer;\r\n    }\r\n    .error-toast {\r\n      @apply p-4 rounded-lg shadow-lg max-w-md w-full;\r\n      \r\n      &.error {\r\n        @apply bg-red-100 text-red-800;\r\n      }\r\n      \r\n      &.warning {\r\n        @apply bg-yellow-100 text-yellow-800;\r\n      }\r\n      \r\n      &.info {\r\n        @apply bg-blue-100 text-blue-800;\r\n      }\r\n    }\r\n  `],\r\n  animations: [\r\n    trigger('slideIn', [\r\n      transition(':enter', [\r\n        style({ transform: 'translateX(100%)', opacity: 0 }),\r\n        animate('200ms ease-out', style({ transform: 'translateX(0)', opacity: 1 }))\r\n      ]),\r\n      transition(':leave', [\r\n        animate('200ms ease-in', style({ transform: 'translateX(100%)', opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class ErrorToastComponent implements OnInit {\r\n  errors: ApiError[] = [];\r\n\r\n  constructor(private errorService: ErrorService) { }\r\n\r\n  ngOnInit() {\r\n    this.errorService.errors$.subscribe(errors => {\r\n      this.errors = errors;\r\n    });\r\n  }\r\n\r\n  removeError(error: ApiError) {\r\n    this.errorService.removeError(error.id);\r\n  }\r\n\r\n  getToastClass(error: ApiError): string {\r\n    return error.severity;\r\n  }\r\n\r\n  getIconClass(error: ApiError): string {\r\n    switch (error.severity) {\r\n      case 'error': return 'bi bi-x-circle';\r\n      case 'warning': return 'bi bi-exclamation-triangle';\r\n      case 'info': return 'bi bi-info-circle';\r\n      default: return 'bi bi-info-circle';\r\n    }\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n   i:hover {\n      cursor: pointer;\n    }\n    .error-toast {\n      @apply p-4 rounded-lg shadow-lg max-w-md w-full;\n      \n      &.error {\n        @apply bg-red-100 text-red-800;\n      }\n      \n      &.warning {\n        @apply bg-yellow-100 text-yellow-800;\n      }\n      \n      &.info {\n        @apply bg-blue-100 text-blue-800;\n      }\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "FileUploadComponent",
            "id": "component-FileUploadComponent-24117199a7de46bf4119dee6b8ae5045f015d4df1e2bdf9a596051c0c7846220b37891a42948a4de5d36c79c5a87b3c4ab3c0fc46cbb1cc044865ac8b9125c55",
            "file": "src/app/shared/components/file-upload/file-upload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-file-upload",
            "styleUrls": [],
            "styles": [
                "\n    .file-upload {\n      width: 100%;\n    }\n\n    .upload-container {\n      border: 2px dashed var(--border);\n      border-radius: 8px;\n      padding: 1rem;\n      text-align: center;\n      cursor: pointer;\n      transition: all 0.3s ease;\n\n      &:hover {\n        border-color: var(--primary);\n        background-color: var(--bg-hover);\n      }\n\n      &.has-file {\n        border-style: solid;\n      }\n    }\n\n    .upload-prompt {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 0.5rem;\n      color: var(--text-secondary);\n\n      mat-icon {\n        font-size: 2rem;\n        width: 2rem;\n        height: 2rem;\n      }\n\n      p {\n        margin: 0;\n        color: var(--text-primary);\n      }\n\n      .hint {\n        font-size: 0.875rem;\n      }\n    }\n\n    .image-preview {\n      position: relative;\n      display: inline-block;\n\n      img {\n        max-width: 100%;\n        max-height: 200px;\n        border-radius: 4px;\n      }\n\n      .remove-button {\n        position: absolute;\n        top: -12px;\n        right: -12px;\n        background-color: var(--bg-secondary);\n      }\n    }\n\n    .error-message {\n      color: var(--error);\n      font-size: 0.875rem;\n      margin-top: 0.5rem;\n    }\n  "
            ],
            "template": "<div class=\"file-upload\">\n  <div class=\"upload-container\"\n       (dragover)=\"onDragOver($event)\"\n       (drop)=\"onDrop($event)\"\n       [class.has-file]=\"currentImage || previewUrl\">\n\n    @if (currentImage || previewUrl) {\n      <div class=\"image-preview\">\n        <img [src]=\"previewUrl || currentImage\" alt=\"Preview\">\n        <button mat-icon-button color=\"warn\"\n                class=\"remove-button\"\n                (click)=\"removeImage()\">\n          <mat-icon>close</mat-icon>\n        </button>\n      </div>\n    } @else {\n      <div class=\"upload-prompt\" (click)=\"fileInput.click()\">\n        <mat-icon>cloud_upload</mat-icon>\n        <p>Drag and drop an image here or click to browse</p>\n        <span class=\"hint\">Maximum file size: 5MB</span>\n      </div>\n    }\n\n    <input #fileInput\n           type=\"file\"\n           (change)=\"onFileSelected($event)\"\n           accept=\"image/*\"\n           style=\"display: none\">\n  </div>\n\n  @if (error) {\n    <div class=\"error-message\">\n      {{ error }}\n    </div>\n  }\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currentImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 121,
                    "type": "string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fileSelected",
                    "defaultValue": "new EventEmitter<File>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 122,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "error",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "previewUrl",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 124
                }
            ],
            "methodsClass": [
                {
                    "name": "createPreview",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFileSelected",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n    selector: 'app-file-upload',\r\n    standalone: true,\r\n    imports: [CommonModule, MatButtonModule, MatIconModule],\r\n    template: `\r\n    <div class=\"file-upload\">\r\n      <div class=\"upload-container\" \r\n           (dragover)=\"onDragOver($event)\"\r\n           (drop)=\"onDrop($event)\"\r\n           [class.has-file]=\"currentImage || previewUrl\">\r\n        \r\n        @if (currentImage || previewUrl) {\r\n          <div class=\"image-preview\">\r\n            <img [src]=\"previewUrl || currentImage\" alt=\"Preview\">\r\n            <button mat-icon-button color=\"warn\" \r\n                    class=\"remove-button\"\r\n                    (click)=\"removeImage()\">\r\n              <mat-icon>close</mat-icon>\r\n            </button>\r\n          </div>\r\n        } @else {\r\n          <div class=\"upload-prompt\" (click)=\"fileInput.click()\">\r\n            <mat-icon>cloud_upload</mat-icon>\r\n            <p>Drag and drop an image here or click to browse</p>\r\n            <span class=\"hint\">Maximum file size: 5MB</span>\r\n          </div>\r\n        }\r\n\r\n        <input #fileInput\r\n               type=\"file\"\r\n               (change)=\"onFileSelected($event)\"\r\n               accept=\"image/*\"\r\n               style=\"display: none\">\r\n      </div>\r\n\r\n      @if (error) {\r\n        <div class=\"error-message\">\r\n          {{ error }}\r\n        </div>\r\n      }\r\n    </div>\r\n  `,\r\n    styles: [`\r\n    .file-upload {\r\n      width: 100%;\r\n    }\r\n\r\n    .upload-container {\r\n      border: 2px dashed var(--border);\r\n      border-radius: 8px;\r\n      padding: 1rem;\r\n      text-align: center;\r\n      cursor: pointer;\r\n      transition: all 0.3s ease;\r\n\r\n      &:hover {\r\n        border-color: var(--primary);\r\n        background-color: var(--bg-hover);\r\n      }\r\n\r\n      &.has-file {\r\n        border-style: solid;\r\n      }\r\n    }\r\n\r\n    .upload-prompt {\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      gap: 0.5rem;\r\n      color: var(--text-secondary);\r\n\r\n      mat-icon {\r\n        font-size: 2rem;\r\n        width: 2rem;\r\n        height: 2rem;\r\n      }\r\n\r\n      p {\r\n        margin: 0;\r\n        color: var(--text-primary);\r\n      }\r\n\r\n      .hint {\r\n        font-size: 0.875rem;\r\n      }\r\n    }\r\n\r\n    .image-preview {\r\n      position: relative;\r\n      display: inline-block;\r\n\r\n      img {\r\n        max-width: 100%;\r\n        max-height: 200px;\r\n        border-radius: 4px;\r\n      }\r\n\r\n      .remove-button {\r\n        position: absolute;\r\n        top: -12px;\r\n        right: -12px;\r\n        background-color: var(--bg-secondary);\r\n      }\r\n    }\r\n\r\n    .error-message {\r\n      color: var(--error);\r\n      font-size: 0.875rem;\r\n      margin-top: 0.5rem;\r\n    }\r\n  `]\r\n})\r\nexport class FileUploadComponent {\r\n    @Input() currentImage: string | undefined;\r\n    @Output() fileSelected = new EventEmitter<File>();\r\n\r\n    previewUrl: string | null = null;\r\n    error: string | null = null;\r\n\r\n    onFileSelected(event: Event) {\r\n        const input = event.target as HTMLInputElement;\r\n        if (input.files?.length) {\r\n            this.handleFile(input.files[0]);\r\n        }\r\n    }\r\n\r\n    onDragOver(event: DragEvent) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    onDrop(event: DragEvent) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        const files = event.dataTransfer?.files;\r\n        if (files?.length) {\r\n            this.handleFile(files[0]);\r\n        }\r\n    }\r\n\r\n    removeImage() {\r\n        this.previewUrl = null;\r\n        this.fileSelected.emit();\r\n    }\r\n\r\n    private handleFile(file: File) {\r\n        if (!file.type.startsWith('image/')) {\r\n            this.error = 'Please upload an image file';\r\n            return;\r\n        }\r\n\r\n        if (file.size > 5 * 1024 * 1024) {  // 5MB\r\n            this.error = 'File size must not exceed 5MB';\r\n            return;\r\n        }\r\n\r\n        this.error = null;\r\n        this.createPreview(file);\r\n        this.fileSelected.emit(file);\r\n    }\r\n\r\n    private createPreview(file: File) {\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n            this.previewUrl = reader.result as string;\r\n        };\r\n        reader.readAsDataURL(file);\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .file-upload {\n      width: 100%;\n    }\n\n    .upload-container {\n      border: 2px dashed var(--border);\n      border-radius: 8px;\n      padding: 1rem;\n      text-align: center;\n      cursor: pointer;\n      transition: all 0.3s ease;\n\n      &:hover {\n        border-color: var(--primary);\n        background-color: var(--bg-hover);\n      }\n\n      &.has-file {\n        border-style: solid;\n      }\n    }\n\n    .upload-prompt {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 0.5rem;\n      color: var(--text-secondary);\n\n      mat-icon {\n        font-size: 2rem;\n        width: 2rem;\n        height: 2rem;\n      }\n\n      p {\n        margin: 0;\n        color: var(--text-primary);\n      }\n\n      .hint {\n        font-size: 0.875rem;\n      }\n    }\n\n    .image-preview {\n      position: relative;\n      display: inline-block;\n\n      img {\n        max-width: 100%;\n        max-height: 200px;\n        border-radius: 4px;\n      }\n\n      .remove-button {\n        position: absolute;\n        top: -12px;\n        right: -12px;\n        background-color: var(--bg-secondary);\n      }\n    }\n\n    .error-message {\n      color: var(--error);\n      font-size: 0.875rem;\n      margin-top: 0.5rem;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "FormlyColorPickerTypeComponent",
            "id": "component-FormlyColorPickerTypeComponent-cfe53862fa9ad6f2e94c2555d48a6b1d073359f1b5e033dcbc30fdf0072e82e22c83ff52541907461ee28da44013612d1f95c3e44982529c713674fb4a1ac518",
            "file": "src/app/shared/formly/color-picker.type.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "formly-field-color-picker",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field class=\"w-full\">\n  <mat-label>{{ props.label }}</mat-label>\n  <div class=\"flex items-center\">\n    <input\n      matInput\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"props.placeholder || ''\"\n      class=\"flex-grow\"\n    />\n  <input\n  type=\"color\"\n  #colorPicker\n  (input)=\"updateColor($event)\"\n  class=\"w-full h-10 border-none rounded-md cursor-pointer\"\n  />\n  </div>\n  <mat-hint *ngIf=\"props.description\">{{ props.description }}</mat-hint>\n  <mat-error *ngIf=\"formControl.invalid\">{{ getErrorMessage() }}</mat-error>\n</mat-form-field>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colorPickerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'colorPicker'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateColor",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "FormlyModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, ElementRef } from '@angular/core';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'formly-field-color-picker',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    FormlyModule\r\n  ],\r\n  template: `\r\n    <mat-form-field class=\"w-full\">\r\n      <mat-label>{{ props.label }}</mat-label>\r\n      <div class=\"flex items-center\">\r\n        <input\r\n          matInput\r\n          [formControl]=\"formControl\"\r\n          [formlyAttributes]=\"field\"\r\n          [placeholder]=\"props.placeholder || ''\"\r\n          class=\"flex-grow\"\r\n        />\r\n      <input\r\n      type=\"color\"\r\n      #colorPicker\r\n      (input)=\"updateColor($event)\"\r\n      class=\"w-full h-10 border-none rounded-md cursor-pointer\"\r\n      />\r\n      </div>\r\n      <mat-hint *ngIf=\"props.description\">{{ props.description }}</mat-hint>\r\n      <mat-error *ngIf=\"formControl.invalid\">{{ getErrorMessage() }}</mat-error>\r\n    </mat-form-field>\r\n  `\r\n})\r\nexport class FormlyColorPickerTypeComponent extends FieldType<FieldTypeConfig> {\r\n  @ViewChild('colorPicker') colorPickerRef!: ElementRef<HTMLInputElement>;\r\n\r\n\r\n\r\n  updateColor(event: Event): void {\r\n    const input = event.target as HTMLInputElement;\r\n    if (input && input.value) {\r\n      this.formControl.setValue(input.value);\r\n    }\r\n  }\r\n\r\n  getErrorMessage(): string {\r\n    const errors = this.formControl.errors;\r\n    if (!errors) return '';\r\n\r\n    if (errors['required']) {\r\n      return 'This field is required';\r\n    }\r\n\r\n    if (errors['pattern']) {\r\n      return 'Invalid color format. Use hex format (#RRGGBB)';\r\n    }\r\n\r\n    return Object.keys(errors).map(key => errors[key]).join(', ');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "FieldType"
            ]
        },
        {
            "name": "FormlyImageUploadTypeComponent",
            "id": "component-FormlyImageUploadTypeComponent-01ada8c7fbeb3e8500ba7ecb64f61fe4c9d357e271cb8b6c9396703f979af3a60e9c951f55596453890d53b22b240a5b1be437e2386328bf62c18418d01bf433",
            "file": "src/app/shared/formly/image-upload.type.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "formly-field-file",
            "styleUrls": [
                "./image-upload.type.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image-upload.type.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "files",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "previewUrls",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "handleFiles",
                    "args": [
                        {
                            "name": "newFiles",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newFiles",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFileInputClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeImage",
                    "args": [
                        {
                            "name": "previewUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "previewUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FieldType, FieldTypeConfig } from '@ngx-formly/core';\r\n\r\n@Component({\r\n  selector: 'formly-field-file',\r\n  standalone: true,\r\n  templateUrl: './image-upload.type.html',\r\n  styleUrls: ['./image-upload.type.scss']\r\n})\r\nexport class FormlyImageUploadTypeComponent extends FieldType<FieldTypeConfig> {\r\n  previewUrls: string[] = [];\r\n  private files: File[] = [];  // Store actual File objects\r\n\r\n  onFileInputClick(): void {\r\n    const fileInput = document.createElement('input');\r\n    fileInput.type = 'file';\r\n    fileInput.multiple = true;\r\n    fileInput.accept = 'image/*';\r\n    fileInput.onchange = (e: Event) => {\r\n      const input = e.target as HTMLInputElement;\r\n      if (input.files) {\r\n        this.handleFiles(Array.from(input.files));\r\n      }\r\n    };\r\n    fileInput.click();\r\n  }\r\n\r\n  onDragOver(event: DragEvent): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n  }\r\n\r\n  onDrop(event: DragEvent): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    const files = event.dataTransfer?.files;\r\n    if (files) {\r\n      this.handleFiles(Array.from(files));\r\n    }\r\n  }\r\n\r\n  handleFiles(newFiles: File[]): void {\r\n    if (!this.formControl) {\r\n      console.error('Form control is not initialized');\r\n      return;\r\n    }\r\n\r\n    const imageFiles = newFiles.filter(file =>\r\n      file.type.startsWith('image/') &&\r\n      file.size <= 5 * 1024 * 1024\r\n    );\r\n\r\n    if (this.files.length + imageFiles.length > 5) {\r\n      this.formControl.setErrors({ maxFiles: true });\r\n      return;\r\n    }\r\n\r\n    imageFiles.forEach(file => {\r\n      // Store the actual File object\r\n      this.files.push(file);\r\n\r\n      // Create preview URL\r\n      const reader = new FileReader();\r\n      reader.onload = (e: ProgressEvent<FileReader>) => {\r\n        const result = e.target?.result as string;\r\n        if (result) {\r\n          this.previewUrls = [...this.previewUrls, result];\r\n        }\r\n      };\r\n      reader.readAsDataURL(file);\r\n    });\r\n\r\n    // Set the actual File objects as the form value\r\n    this.formControl.setValue(this.files);\r\n    this.formControl.markAsTouched();\r\n  }\r\n\r\n  removeImage(previewUrl: string): void {\r\n    const index = this.previewUrls.indexOf(previewUrl);\r\n    if (index !== -1) {\r\n      this.previewUrls.splice(index, 1);\r\n      this.files.splice(index, 1);\r\n      this.formControl?.setValue(this.files);\r\n      this.formControl?.markAsTouched();\r\n    }\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'sass:map';\r\n\r\n.file-container {\r\n    .file-box {\r\n        border: 2px dashed var(--primary);\r\n        border-radius: 8px;\r\n        padding: 1rem;\r\n        text-align: center;\r\n        cursor: pointer;\r\n        background-color: var(--bg-secondary);\r\n        transition: all 0.3s ease;\r\n\r\n        &:hover {\r\n            background-color: rgba(var(--primary-rgb), 0.1);\r\n        }\r\n\r\n        i {\r\n            color: var(--primary);\r\n        }\r\n\r\n        p {\r\n            color: var(--text-primary);\r\n            margin: 0;\r\n        }\r\n    }\r\n}\r\n\r\n.image-preview-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\r\n    gap: 1rem;\r\n    margin-top: 1rem;\r\n}\r\n\r\n.image-preview {\r\n    aspect-ratio: 1;\r\n    position: relative;\r\n\r\n    img {\r\n        width: 100%;\r\n        height: 100%;\r\n        object-fit: cover;\r\n        border-radius: 4px;\r\n    }\r\n\r\n    .remove-image {\r\n        position: absolute;\r\n        top: -0.5rem;\r\n        right: -0.5rem;\r\n        width: 1.5rem;\r\n        height: 1.5rem;\r\n        border-radius: 50%;\r\n        background-color: var(--primary);\r\n        color: white;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        cursor: pointer;\r\n        border: none;\r\n        padding: 0;\r\n\r\n        &:hover {\r\n            filter: brightness(90%);\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./image-upload.type.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "FieldType"
            ],
            "templateData": "<div class=\"file-container\">\r\n    <div class=\"file-box bg-opacity-10 hover:bg-opacity-20 transition-all\" (click)=\"onFileInputClick()\"\r\n        (dragover)=\"onDragOver($event)\" (drop)=\"onDrop($event)\">\r\n        <div class=\"flex flex-col items-center justify-center p-6 border-2 border-dashed rounded-lg border-primary\">\r\n            <span>Drag and drop images here or click to browse</span>\r\n            <span class=\"mt-2 text-sm\">Max file size: 5MB | Supported formats: JPG, PNG</span>\r\n        </div>\r\n    </div>\r\n\r\n    @if (previewUrls.length > 0) {\r\n    <div class=\"image-preview-grid mt-4\">\r\n        @for (url of previewUrls; track url) {\r\n        <div class=\"image-preview relative\">\r\n            <img [src]=\"url\" alt=\"Preview\" class=\"w-full h-full object-cover rounded\" />\r\n            <button class=\"remove-image\" (click)=\"removeImage(url)\">×</button>\r\n        </div>\r\n        }\r\n    </div>\r\n    }\r\n</div>"
        },
        {
            "name": "GenericErrorComponent",
            "id": "component-GenericErrorComponent-1de4dbe6e6d3b45289b7dccb6cee9febbd5f5cac5f2df7c9ad934ff5c5d4e261fcd0cf66e0782215ea5867a02f96577d96f412c10096196876f9df128504e0ae",
            "file": "src/app/features/error-pages/generic-error/generic-error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-generic-error",
            "styleUrls": [],
            "styles": [],
            "template": "<app-error-page [config]=\"errorConfig\"></app-error-page>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ErrorPageComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from \"@angular/core\";\r\nimport { ErrorConfig, ErrorPageComponent } from \"../error-page.component\";\r\n\r\n// src/app/features/error-pages/generic-error/generic-error.component.ts\r\n@Component({\r\n    selector: 'app-generic-error',\r\n    standalone: true,\r\n    imports: [ErrorPageComponent],\r\n    template: `\r\n        <app-error-page [config]=\"errorConfig\"></app-error-page>\r\n    `\r\n})\r\nexport class GenericErrorComponent {\r\n    @Input() message?: string;\r\n\r\n    get errorConfig(): ErrorConfig {\r\n        return {\r\n            title: 'Error',\r\n            message: this.message || 'An unexpected error occurred. Please try again.',\r\n            icon: 'warning',\r\n            showRetryButton: true,\r\n            showHomeButton: true\r\n        };\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "errorConfig": {
                    "name": "errorConfig",
                    "getSignature": {
                        "name": "errorConfig",
                        "type": "",
                        "returnType": "ErrorConfig",
                        "line": 16
                    }
                }
            }
        },
        {
            "name": "GlobalLoadingComponent",
            "id": "component-GlobalLoadingComponent-b1c241f47375adf40d4c3bc0f84514f59731214991cd6bae750a3d70beab3c979e0f50498d4ac0acaea2ee227448e94ba473e6052057a6080406ab9866b3188e",
            "file": "src/app/shared/components/global-loading/global-loading.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-global-loading",
            "styleUrls": [],
            "styles": [],
            "template": "@if (loading$ | async; as loadingState) {\n    @if (loadingState.loading) {\n        <app-loading-spinner\n            [overlay]=\"true\"\n            [message]=\"loadingState.message ?? ''\"\n            [size]='48'>\n        </app-loading-spinner>\n    }\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "LoadingSpinnerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoadingService } from '../../../core/services/loading.service';\r\nimport { LoadingSpinnerComponent } from '../loading-spinner/loading-spinner.component';\r\n\r\n@Component({\r\n    selector: 'app-global-loading',\r\n    standalone: true,\r\n    imports: [CommonModule, LoadingSpinnerComponent],\r\n    template: `\r\n        @if (loading$ | async; as loadingState) {\r\n            @if (loadingState.loading) {\r\n                <app-loading-spinner\r\n                    [overlay]=\"true\"\r\n                    [message]=\"loadingState.message ?? ''\"\r\n                    [size]='48'>\r\n                </app-loading-spinner>\r\n            }\r\n        }\r\n    `\r\n})\r\nexport class GlobalLoadingComponent {\r\n    loading$;\r\n\r\n    constructor(private readonly loadingService: LoadingService) {\r\n        this.loading$ = this.loadingService.loading$;\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loadingService",
                        "type": "LoadingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "loadingService",
                        "type": "LoadingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-b214d03a52f2836f9f0757df043720a8e672bd9ccca5c9018bbc73e63036b8423cb6a633156096f46fe64fa77edeaceb3f85bd5a979a54e25a58b778668e4c31",
            "file": "src/app/features/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"container mx-auto p-4 md:p-6\">\n  <!-- Dashboard Header -->\n  <div class=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-6\">\n    <div>\n      <h1 class=\"text-2xl font-bold text-slate-900 dark:text-white\">Dashboard</h1>\n      <p class=\"text-sm text-slate-500 dark:text-slate-400\">Welcome back to your admin dashboard</p>\n    </div>\n\n    <div class=\"mt-4 md:mt-0 flex items-center space-x-2\">\n      <button\n        class=\"px-3 py-2 bg-white dark:bg-slate-800 text-slate-600 dark:text-slate-300 border border-slate-200 dark:border-slate-700 rounded-md shadow-sm flex items-center hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\" />\n        </svg>\n        Export\n      </button>\n\n      <button\n        class=\"px-3 py-2 bg-primary-600 text-white rounded-md shadow-sm flex items-center hover:bg-primary-700 transition-colors\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n        </svg>\n        New Report\n      </button>\n    </div>\n  </div>\n\n  <!-- Metrics Overview -->\n  <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n    <div *ngFor=\"let metric of metrics\"\n      class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm p-5 border border-slate-200 dark:border-slate-700\">\n      <div class=\"flex justify-between items-start\">\n        <div>\n          <p class=\"text-sm font-medium text-slate-500 dark:text-slate-400\">{{ metric.title }}</p>\n          <p class=\"text-2xl font-bold text-slate-900 dark:text-white mt-1\">{{ metric.value }}</p>\n\n          <div *ngIf=\"metric.change\" class=\"flex items-center mt-2\">\n            <span\n              [class.text-emerald-600]=\"metric.change.isPositive\"\n              [class.text-rose-600]=\"!metric.change.isPositive\"\n              [class.dark:text-emerald-400]=\"metric.change.isPositive\"\n              [class.dark:text-rose-400]=\"!metric.change.isPositive\"\n              class=\"text-xs font-medium flex items-center\">\n\n              <svg *ngIf=\"metric.change.isPositive\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-3 w-3 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z\" clip-rule=\"evenodd\" />\n              </svg>\n\n              <svg *ngIf=\"!metric.change.isPositive\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-3 w-3 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M12 13a1 1 0 100 2h5a1 1 0 001-1v-5a1 1 0 10-2 0v2.586l-4.293-4.293a1 1 0 00-1.414 0L8 9.586 3.707 5.293a1 1 0 00-1.414 1.414l5 5a1 1 0 001.414 0L11 9.414 14.586 13H12z\" clip-rule=\"evenodd\" />\n              </svg>\n\n              {{ metric.change.value }}% {{ metric.change.label }}\n            </span>\n          </div>\n        </div>\n\n        <div [class]=\"'p-3 rounded-full ' + metric.color\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" [innerHTML]=\"getSvgPath(metric.icon)\"></svg>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Quick Actions -->\n  <h2 class=\"text-lg font-semibold text-slate-900 dark:text-white mb-4\">Quick Actions</h2>\n  <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mb-8\">\n    <div *ngFor=\"let action of quickActions\"\n        [routerLink]=\"action.route\"\n        class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 overflow-hidden hover:shadow-md transition-shadow cursor-pointer group\">\n      <div class=\"p-5\">\n        <div class=\"flex items-center mb-4\">\n          <div [class]=\"'p-3 rounded-full ' + action.color\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" [innerHTML]=\"getSvgPath(action.icon)\"></svg>\n          </div>\n          <h3 class=\"ml-3 text-base font-medium text-slate-900 dark:text-white\">{{ action.title }}</h3>\n        </div>\n        <p class=\"text-sm text-slate-500 dark:text-slate-400\">{{ action.description }}</p>\n      </div>\n      <div class=\"px-5 py-3 bg-slate-50 dark:bg-slate-700 border-t border-slate-200 dark:border-slate-700\">\n        <span class=\"text-sm font-medium text-primary-600 dark:text-primary-400 flex items-center group-hover:translate-x-0.5 transition-transform\">\n          Get Started\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 ml-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fill-rule=\"evenodd\" d=\"M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n          </svg>\n        </span>\n      </div>\n    </div>\n  </div>\n\n  <!-- Recent Activity -->\n  <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n    <!-- Recent Orders -->\n    <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 overflow-hidden\">\n      <div class=\"px-5 py-4 border-b border-slate-200 dark:border-slate-700 flex justify-between items-center\">\n        <h3 class=\"font-medium text-slate-900 dark:text-white\">Recent Orders</h3>\n        <a routerLink=\"/orders\" class=\"text-sm font-medium text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300\">\n          View All\n        </a>\n      </div>\n\n      <div class=\"p-5\">\n        <div *ngIf=\"recentOrders.length === 0\" class=\"text-center py-6\">\n          <p class=\"text-slate-500 dark:text-slate-400\">No recent orders found</p>\n        </div>\n\n        <div *ngFor=\"let order of recentOrders\" class=\"border-b border-slate-200 dark:border-slate-700 last:border-b-0 py-3\">\n          <div class=\"flex justify-between items-center\">\n            <div>\n              <p class=\"text-sm font-medium text-slate-900 dark:text-white\">#{{ order.id }}</p>\n              <p class=\"text-xs text-slate-500 dark:text-slate-400\">{{ order.date }}</p>\n            </div>\n            <div>\n              <span [class]=\"getOrderStatusClass(order.status)\">\n                {{ order.status }}\n              </span>\n            </div>\n            <div class=\"text-right\">\n              <p class=\"text-sm font-medium text-slate-900 dark:text-white\">{{ order.amount }}</p>\n              <p class=\"text-xs text-slate-500 dark:text-slate-400\">{{ order.items }} items</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Low Stock Items -->\n    <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 overflow-hidden\">\n      <div class=\"px-5 py-4 border-b border-slate-200 dark:border-slate-700 flex justify-between items-center\">\n        <h3 class=\"font-medium text-slate-900 dark:text-white\">Low Stock Items</h3>\n        <a routerLink=\"/products/list\" class=\"text-sm font-medium text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300\">\n          View All\n        </a>\n      </div>\n\n      <div class=\"p-5\">\n        <div *ngIf=\"lowStockItems.length === 0\" class=\"text-center py-6\">\n          <p class=\"text-slate-500 dark:text-slate-400\">No low stock items found</p>\n        </div>\n\n        <div *ngFor=\"let item of lowStockItems\" class=\"border-b border-slate-200 dark:border-slate-700 last:border-b-0 py-3\">\n          <div class=\"flex items-center\">\n            <div class=\"h-10 w-10 bg-slate-100 dark:bg-slate-700 rounded-md flex items-center justify-center\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-slate-500 dark:text-slate-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\n              </svg>\n            </div>\n            <div class=\"ml-3 flex-grow\">\n              <p class=\"text-sm font-medium text-slate-900 dark:text-white\">{{ item.name }}</p>\n              <p class=\"text-xs text-slate-500 dark:text-slate-400\">{{ item.sku }}</p>\n            </div>\n            <div class=\"text-right\">\n              <p class=\"text-sm font-medium text-amber-600 dark:text-amber-400\">{{ item.stock }} left</p>\n              <p class=\"text-xs text-slate-500 dark:text-slate-400\">Threshold: {{ item.threshold }}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 283,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "lowStockItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 281
                },
                {
                    "name": "metrics",
                    "defaultValue": "[\r\n    {\r\n      title: 'Total Products',\r\n      value: 0,\r\n      icon: 'M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4',\r\n      color: 'bg-primary-600'\r\n    },\r\n    {\r\n      title: 'Active Products',\r\n      value: 0,\r\n      icon: 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z',\r\n      color: 'bg-emerald-600'\r\n    },\r\n    {\r\n      title: 'Revenue',\r\n      value: '$0',\r\n      icon: 'M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z',\r\n      color: 'bg-amber-600',\r\n      change: {\r\n        value: 0,\r\n        isPositive: true,\r\n        label: 'vs last month'\r\n      }\r\n    },\r\n    {\r\n      title: 'Orders',\r\n      value: 0,\r\n      icon: 'M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z',\r\n      color: 'bg-purple-600',\r\n      change: {\r\n        value: 0,\r\n        isPositive: false,\r\n        label: 'vs last month'\r\n      }\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DashboardMetric[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 212
                },
                {
                    "name": "quickActions",
                    "defaultValue": "[\r\n    {\r\n      title: 'Add Product',\r\n      icon: 'M12 6v6m0 0v6m0-6h6m-6 0H6',\r\n      description: 'Create a new product listing with details and imagery',\r\n      route: '/products/add',\r\n      color: 'bg-primary-600'\r\n    },\r\n    {\r\n      title: 'Manage Orders',\r\n      icon: 'M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z',\r\n      description: 'View and manage customer orders and shipments',\r\n      route: '/orders',\r\n      color: 'bg-amber-600'\r\n    },\r\n    {\r\n      title: 'View Statistics',\r\n      icon: 'M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z',\r\n      description: 'Check your store performance and key metrics',\r\n      route: '/statistics',\r\n      color: 'bg-emerald-600'\r\n    },\r\n    {\r\n      title: 'Manage Categories',\r\n      icon: 'M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z',\r\n      description: 'Organize products with categories and tags',\r\n      route: '/categories',\r\n      color: 'bg-purple-600'\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuickAction[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 249
                },
                {
                    "name": "recentOrders",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 280
                }
            ],
            "methodsClass": [
                {
                    "name": "createSampleLowStockItems",
                    "args": [],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 341,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "createSampleOrders",
                    "args": [],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 332,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getOrderStatusClass",
                    "args": [
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 350,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSvgPath",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 365,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadDashboardData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 300,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 295,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 290,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateMetrics",
                    "args": [
                        {
                            "name": "stats",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "stats",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { Store } from '@ngrx/store';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { ProductService } from '../../core/services/product.service';\r\n\r\ninterface QuickAction {\r\n  title: string;\r\n  icon: string;\r\n  description: string;\r\n  route: string;\r\n  color: string;\r\n}\r\n\r\ninterface DashboardMetric {\r\n  title: string;\r\n  value: number | string;\r\n  icon: string;\r\n  change?: {\r\n    value: number;\r\n    isPositive: boolean;\r\n    label: string;\r\n  };\r\n  color: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    MatTooltipModule\r\n  ],\r\n  template: `\r\n    <div class=\"container mx-auto p-4 md:p-6\">\r\n      <!-- Dashboard Header -->\r\n      <div class=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-6\">\r\n        <div>\r\n          <h1 class=\"text-2xl font-bold text-slate-900 dark:text-white\">Dashboard</h1>\r\n          <p class=\"text-sm text-slate-500 dark:text-slate-400\">Welcome back to your admin dashboard</p>\r\n        </div>\r\n        \r\n        <div class=\"mt-4 md:mt-0 flex items-center space-x-2\">\r\n          <button \r\n            class=\"px-3 py-2 bg-white dark:bg-slate-800 text-slate-600 dark:text-slate-300 border border-slate-200 dark:border-slate-700 rounded-md shadow-sm flex items-center hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\" />\r\n            </svg>\r\n            Export\r\n          </button>\r\n          \r\n          <button \r\n            class=\"px-3 py-2 bg-primary-600 text-white rounded-md shadow-sm flex items-center hover:bg-primary-700 transition-colors\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n            </svg>\r\n            New Report\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Metrics Overview -->\r\n      <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\r\n        <div *ngFor=\"let metric of metrics\" \r\n          class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm p-5 border border-slate-200 dark:border-slate-700\">\r\n          <div class=\"flex justify-between items-start\">\r\n            <div>\r\n              <p class=\"text-sm font-medium text-slate-500 dark:text-slate-400\">{{ metric.title }}</p>\r\n              <p class=\"text-2xl font-bold text-slate-900 dark:text-white mt-1\">{{ metric.value }}</p>\r\n              \r\n              <div *ngIf=\"metric.change\" class=\"flex items-center mt-2\">\r\n                <span \r\n                  [class.text-emerald-600]=\"metric.change.isPositive\"\r\n                  [class.text-rose-600]=\"!metric.change.isPositive\"\r\n                  [class.dark:text-emerald-400]=\"metric.change.isPositive\"\r\n                  [class.dark:text-rose-400]=\"!metric.change.isPositive\"\r\n                  class=\"text-xs font-medium flex items-center\">\r\n                  \r\n                  <svg *ngIf=\"metric.change.isPositive\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-3 w-3 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                    <path fill-rule=\"evenodd\" d=\"M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z\" clip-rule=\"evenodd\" />\r\n                  </svg>\r\n                  \r\n                  <svg *ngIf=\"!metric.change.isPositive\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-3 w-3 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                    <path fill-rule=\"evenodd\" d=\"M12 13a1 1 0 100 2h5a1 1 0 001-1v-5a1 1 0 10-2 0v2.586l-4.293-4.293a1 1 0 00-1.414 0L8 9.586 3.707 5.293a1 1 0 00-1.414 1.414l5 5a1 1 0 001.414 0L11 9.414 14.586 13H12z\" clip-rule=\"evenodd\" />\r\n                  </svg>\r\n                  \r\n                  {{ metric.change.value }}% {{ metric.change.label }}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            \r\n            <div [class]=\"'p-3 rounded-full ' + metric.color\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" [innerHTML]=\"getSvgPath(metric.icon)\"></svg>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Quick Actions -->\r\n      <h2 class=\"text-lg font-semibold text-slate-900 dark:text-white mb-4\">Quick Actions</h2>\r\n      <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mb-8\">\r\n        <div *ngFor=\"let action of quickActions\" \r\n            [routerLink]=\"action.route\"\r\n            class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 overflow-hidden hover:shadow-md transition-shadow cursor-pointer group\">\r\n          <div class=\"p-5\">\r\n            <div class=\"flex items-center mb-4\">\r\n              <div [class]=\"'p-3 rounded-full ' + action.color\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" [innerHTML]=\"getSvgPath(action.icon)\"></svg>\r\n              </div>\r\n              <h3 class=\"ml-3 text-base font-medium text-slate-900 dark:text-white\">{{ action.title }}</h3>\r\n            </div>\r\n            <p class=\"text-sm text-slate-500 dark:text-slate-400\">{{ action.description }}</p>\r\n          </div>\r\n          <div class=\"px-5 py-3 bg-slate-50 dark:bg-slate-700 border-t border-slate-200 dark:border-slate-700\">\r\n            <span class=\"text-sm font-medium text-primary-600 dark:text-primary-400 flex items-center group-hover:translate-x-0.5 transition-transform\">\r\n              Get Started\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 ml-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                <path fill-rule=\"evenodd\" d=\"M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\r\n              </svg>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Recent Activity -->\r\n      <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <!-- Recent Orders -->\r\n        <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 overflow-hidden\">\r\n          <div class=\"px-5 py-4 border-b border-slate-200 dark:border-slate-700 flex justify-between items-center\">\r\n            <h3 class=\"font-medium text-slate-900 dark:text-white\">Recent Orders</h3>\r\n            <a routerLink=\"/orders\" class=\"text-sm font-medium text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300\">\r\n              View All\r\n            </a>\r\n          </div>\r\n          \r\n          <div class=\"p-5\">\r\n            <div *ngIf=\"recentOrders.length === 0\" class=\"text-center py-6\">\r\n              <p class=\"text-slate-500 dark:text-slate-400\">No recent orders found</p>\r\n            </div>\r\n            \r\n            <div *ngFor=\"let order of recentOrders\" class=\"border-b border-slate-200 dark:border-slate-700 last:border-b-0 py-3\">\r\n              <div class=\"flex justify-between items-center\">\r\n                <div>\r\n                  <p class=\"text-sm font-medium text-slate-900 dark:text-white\">#{{ order.id }}</p>\r\n                  <p class=\"text-xs text-slate-500 dark:text-slate-400\">{{ order.date }}</p>\r\n                </div>\r\n                <div>\r\n                  <span [class]=\"getOrderStatusClass(order.status)\">\r\n                    {{ order.status }}\r\n                  </span>\r\n                </div>\r\n                <div class=\"text-right\">\r\n                  <p class=\"text-sm font-medium text-slate-900 dark:text-white\">{{ order.amount }}</p>\r\n                  <p class=\"text-xs text-slate-500 dark:text-slate-400\">{{ order.items }} items</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Low Stock Items -->\r\n        <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 overflow-hidden\">\r\n          <div class=\"px-5 py-4 border-b border-slate-200 dark:border-slate-700 flex justify-between items-center\">\r\n            <h3 class=\"font-medium text-slate-900 dark:text-white\">Low Stock Items</h3>\r\n            <a routerLink=\"/products/list\" class=\"text-sm font-medium text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300\">\r\n              View All\r\n            </a>\r\n          </div>\r\n          \r\n          <div class=\"p-5\">\r\n            <div *ngIf=\"lowStockItems.length === 0\" class=\"text-center py-6\">\r\n              <p class=\"text-slate-500 dark:text-slate-400\">No low stock items found</p>\r\n            </div>\r\n            \r\n            <div *ngFor=\"let item of lowStockItems\" class=\"border-b border-slate-200 dark:border-slate-700 last:border-b-0 py-3\">\r\n              <div class=\"flex items-center\">\r\n                <div class=\"h-10 w-10 bg-slate-100 dark:bg-slate-700 rounded-md flex items-center justify-center\">\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-slate-500 dark:text-slate-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n                  </svg>\r\n                </div>\r\n                <div class=\"ml-3 flex-grow\">\r\n                  <p class=\"text-sm font-medium text-slate-900 dark:text-white\">{{ item.name }}</p>\r\n                  <p class=\"text-xs text-slate-500 dark:text-slate-400\">{{ item.sku }}</p>\r\n                </div>\r\n                <div class=\"text-right\">\r\n                  <p class=\"text-sm font-medium text-amber-600 dark:text-amber-400\">{{ item.stock }} left</p>\r\n                  <p class=\"text-xs text-slate-500 dark:text-slate-400\">Threshold: {{ item.threshold }}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class HomeComponent implements OnInit, OnDestroy {\r\n  metrics: DashboardMetric[] = [\r\n    {\r\n      title: 'Total Products',\r\n      value: 0,\r\n      icon: 'M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4',\r\n      color: 'bg-primary-600'\r\n    },\r\n    {\r\n      title: 'Active Products',\r\n      value: 0,\r\n      icon: 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z',\r\n      color: 'bg-emerald-600'\r\n    },\r\n    {\r\n      title: 'Revenue',\r\n      value: '$0',\r\n      icon: 'M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z',\r\n      color: 'bg-amber-600',\r\n      change: {\r\n        value: 0,\r\n        isPositive: true,\r\n        label: 'vs last month'\r\n      }\r\n    },\r\n    {\r\n      title: 'Orders',\r\n      value: 0,\r\n      icon: 'M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z',\r\n      color: 'bg-purple-600',\r\n      change: {\r\n        value: 0,\r\n        isPositive: false,\r\n        label: 'vs last month'\r\n      }\r\n    }\r\n  ];\r\n\r\n  quickActions: QuickAction[] = [\r\n    {\r\n      title: 'Add Product',\r\n      icon: 'M12 6v6m0 0v6m0-6h6m-6 0H6',\r\n      description: 'Create a new product listing with details and imagery',\r\n      route: '/products/add',\r\n      color: 'bg-primary-600'\r\n    },\r\n    {\r\n      title: 'Manage Orders',\r\n      icon: 'M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z',\r\n      description: 'View and manage customer orders and shipments',\r\n      route: '/orders',\r\n      color: 'bg-amber-600'\r\n    },\r\n    {\r\n      title: 'View Statistics',\r\n      icon: 'M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z',\r\n      description: 'Check your store performance and key metrics',\r\n      route: '/statistics',\r\n      color: 'bg-emerald-600'\r\n    },\r\n    {\r\n      title: 'Manage Categories',\r\n      icon: 'M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z',\r\n      description: 'Organize products with categories and tags',\r\n      route: '/categories',\r\n      color: 'bg-purple-600'\r\n    }\r\n  ];\r\n\r\n  recentOrders: any[] = [];\r\n  lowStockItems: any[] = [];\r\n\r\n  private readonly destroy$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private readonly store: Store,\r\n    private readonly productService: ProductService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    // Load dashboard data\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  loadDashboardData(): void {\r\n    this.productService.getStats().pipe(\r\n      takeUntil(this.destroy$)\r\n    ).subscribe(stats => {\r\n      // Update metrics with real data\r\n      this.updateMetrics(stats);\r\n\r\n      // Create sample recent orders for demo\r\n      this.recentOrders = this.createSampleOrders();\r\n\r\n      // Create sample low stock items for demo\r\n      this.lowStockItems = this.createSampleLowStockItems();\r\n    });\r\n  }\r\n\r\n  private updateMetrics(stats: any): void {\r\n    this.metrics[0].value = stats.totalProducts || 0;\r\n    this.metrics[1].value = stats.activeProductCount || 0;\r\n    this.metrics[2].value = `$${(stats.totalRevenue || 0).toLocaleString()}`;\r\n    this.metrics[2].change = {\r\n      value: stats.revenueChange || 8.2,\r\n      isPositive: (stats.revenueChange || 8.2) >= 0,\r\n      label: 'vs last month'\r\n    };\r\n    this.metrics[3].value = stats.totalOrders || 0;\r\n    this.metrics[3].change = {\r\n      value: stats.ordersChange || -2.5,\r\n      isPositive: (stats.ordersChange || -2.5) >= 0,\r\n      label: 'vs last month'\r\n    };\r\n  }\r\n\r\n  private createSampleOrders(): any[] {\r\n    return [\r\n      { id: '10042', date: '2 hours ago', status: 'Completed', amount: '$245.99', items: 3 },\r\n      { id: '10041', date: '5 hours ago', status: 'Processing', amount: '$129.50', items: 2 },\r\n      { id: '10040', date: 'Yesterday', status: 'Shipped', amount: '$89.99', items: 1 },\r\n      { id: '10039', date: 'Yesterday', status: 'Completed', amount: '$432.25', items: 5 }\r\n    ];\r\n  }\r\n\r\n  private createSampleLowStockItems(): any[] {\r\n    return [\r\n      { name: 'Wireless Headphones', sku: 'WH-12345', stock: 3, threshold: 5 },\r\n      { name: 'Smartphone Case', sku: 'SC-54321', stock: 2, threshold: 10 },\r\n      { name: 'Smart Watch', sku: 'SW-98765', stock: 4, threshold: 8 },\r\n      { name: 'Bluetooth Speaker', sku: 'BS-45678', stock: 1, threshold: 5 }\r\n    ];\r\n  }\r\n\r\n  getOrderStatusClass(status: string): string {\r\n    switch (status.toLowerCase()) {\r\n      case 'completed':\r\n        return 'px-2 py-1 text-xs rounded-full bg-emerald-100 dark:bg-emerald-900/30 text-emerald-700 dark:text-emerald-400';\r\n      case 'processing':\r\n        return 'px-2 py-1 text-xs rounded-full bg-amber-100 dark:bg-amber-900/30 text-amber-700 dark:text-amber-400';\r\n      case 'shipped':\r\n        return 'px-2 py-1 text-xs rounded-full bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400';\r\n      case 'cancelled':\r\n        return 'px-2 py-1 text-xs rounded-full bg-rose-100 dark:bg-rose-900/30 text-rose-700 dark:text-rose-400';\r\n      default:\r\n        return 'px-2 py-1 text-xs rounded-full bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-400';\r\n    }\r\n  }\r\n\r\n  getSvgPath(path: string): string {\r\n    return `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"${path}\" />`;\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 283,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "ImagePreviewDialogComponent",
            "id": "component-ImagePreviewDialogComponent-491d13d2ff2ba89f278a4c6bcfeff17080d45224c69ce8a17cabc172341a66ea48adb7b7dcada3779f9ca39419e4a27f6f3d60ec768bb71f1d44f14c61689249",
            "file": "src/app/features/products/product-list/image-preview-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image-preview-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "  <div class=\"image-preview-dialog bg-transparent\">\n    <img [src]=\"data.url\" alt=\"Image Preview\" />\n</div>\n    <!-- <div class=\"relative\">\n      <button\n        mat-icon-button\n        class=\"absolute top-2 right-2 text-white bg-slate-800 bg-opacity-50 hover:bg-opacity-70 z-10 transition-colors\"\n        [mat-dialog-close]=\"true\">\n        <mat-icon>close</mat-icon>\n      </button>\n\n      <div class=\"image-preview-container\">\n        <img\n          [src]=\"data.url\"\n          [alt]=\"data.alt || 'Image preview'\"\n          class=\"max-w-full max-h-[80vh] object-contain rounded-md\"\n          loading=\"lazy\">\n      </div>\n\n      <div *ngIf=\"data.fileName || data.size\" class=\"p-4 bg-slate-50 dark:bg-slate-800 border-t border-slate-200 dark:border-slate-700\">\n        <div *ngIf=\"data.fileName\" class=\"text-sm text-slate-500 dark:text-slate-400\">\n          <span class=\"font-medium text-slate-700 dark:text-slate-300\">Filename:</span> {{ data.fileName }}\n        </div>\n        <div *ngIf=\"data.size\" class=\"text-sm text-slate-500 dark:text-slate-400\">\n          <span class=\"font-medium text-slate-700 dark:text-slate-300\">Size:</span> {{ formatFileSize(data.size) }}\n        </div>\n      </div>\n    </div> -->\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "formatFileSize",
                    "args": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MAT_DIALOG_DATA, MatDialogModule, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-image-preview-dialog',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule\r\n  ],\r\n  template: `\r\n  <div class=\"image-preview-dialog bg-transparent\">\r\n    <img [src]=\"data.url\" alt=\"Image Preview\" />\r\n</div>\r\n    <!-- <div class=\"relative\">\r\n      <button \r\n        mat-icon-button \r\n        class=\"absolute top-2 right-2 text-white bg-slate-800 bg-opacity-50 hover:bg-opacity-70 z-10 transition-colors\"\r\n        [mat-dialog-close]=\"true\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n      \r\n      <div class=\"image-preview-container\">\r\n        <img \r\n          [src]=\"data.url\" \r\n          [alt]=\"data.alt || 'Image preview'\" \r\n          class=\"max-w-full max-h-[80vh] object-contain rounded-md\"\r\n          loading=\"lazy\">\r\n      </div>\r\n      \r\n      <div *ngIf=\"data.fileName || data.size\" class=\"p-4 bg-slate-50 dark:bg-slate-800 border-t border-slate-200 dark:border-slate-700\">\r\n        <div *ngIf=\"data.fileName\" class=\"text-sm text-slate-500 dark:text-slate-400\">\r\n          <span class=\"font-medium text-slate-700 dark:text-slate-300\">Filename:</span> {{ data.fileName }}\r\n        </div>\r\n        <div *ngIf=\"data.size\" class=\"text-sm text-slate-500 dark:text-slate-400\">\r\n          <span class=\"font-medium text-slate-700 dark:text-slate-300\">Size:</span> {{ formatFileSize(data.size) }}\r\n        </div>\r\n      </div>\r\n    </div> -->\r\n  `,\r\n})\r\nexport class ImagePreviewDialogComponent {\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: {\r\n      url: string;\r\n      alt?: string;\r\n      fileName?: string;\r\n      size?: number;\r\n    },\r\n    private dialogRef: MatDialogRef<ImagePreviewDialogComponent>\r\n  ) { }\r\n\r\n  // Helper method to format file size\r\n  formatFileSize(bytes: number): string {\r\n    if (bytes < 1024) return bytes + ' B';\r\n    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';\r\n    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ImagePreviewDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ImagePreviewDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "LoadingSpinnerComponent",
            "id": "component-LoadingSpinnerComponent-c634d37fbe90e6b5d50fda9fb2974a1befd0a14ac6591e66606cdd22cd8feae45b03778ca788e5546a37aaa40c6bf0036c249db5c373b4892ade6a9bd98f47ed",
            "file": "src/app/shared/components/loading-spinner/loading-spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading-spinner",
            "styleUrls": [],
            "styles": [
                "\n        .loading-container {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            gap: 1rem;\n        }\n\n        .overlay {\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background-color: rgba(0, 0, 0, 0.5);\n            z-index: 9999;\n            \n            .loading-message {\n                color: white;\n            }\n        }\n\n        .inline {\n            padding: 1rem;\n            \n            .loading-message {\n                color: var(--text-secondary);\n            }\n        }\n\n        .loading-message {\n            font-size: 0.875rem;\n        }\n    "
            ],
            "template": "<div class=\"loading-container\" [class.overlay]=\"overlay\" [class.inline]=\"!overlay\">\n    <mat-spinner\n        [diameter]=\"size\"\n        [strokeWidth]=\"strokeWidth\"\n        [color]=\"color\">\n    </mat-spinner>\n    @if (message) {\n        <span class=\"loading-message\">{{ message }}</span>\n    }\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "\"primary\" | \"accent\" | \"warn\"",
                    "decorators": []
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "overlay",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "strokeWidth",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressSpinnerModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\n@Component({\r\n  selector: 'app-loading-spinner',\r\n  standalone: true,\r\n  imports: [CommonModule, MatProgressSpinnerModule],\r\n  template: `\r\n        <div class=\"loading-container\" [class.overlay]=\"overlay\" [class.inline]=\"!overlay\">\r\n            <mat-spinner \r\n                [diameter]=\"size\" \r\n                [strokeWidth]=\"strokeWidth\"\r\n                [color]=\"color\">\r\n            </mat-spinner>\r\n            @if (message) {\r\n                <span class=\"loading-message\">{{ message }}</span>\r\n            }\r\n        </div>\r\n    `,\r\n  styles: [`\r\n        .loading-container {\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            justify-content: center;\r\n            gap: 1rem;\r\n        }\r\n\r\n        .overlay {\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background-color: rgba(0, 0, 0, 0.5);\r\n            z-index: 9999;\r\n            \r\n            .loading-message {\r\n                color: white;\r\n            }\r\n        }\r\n\r\n        .inline {\r\n            padding: 1rem;\r\n            \r\n            .loading-message {\r\n                color: var(--text-secondary);\r\n            }\r\n        }\r\n\r\n        .loading-message {\r\n            font-size: 0.875rem;\r\n        }\r\n    `]\r\n})\r\nexport class LoadingSpinnerComponent {\r\n  @Input() size = 40;\r\n  @Input() strokeWidth = 4;\r\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\r\n  @Input() message?: string;\r\n  @Input() overlay = false;\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        .loading-container {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            gap: 1rem;\n        }\n\n        .overlay {\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background-color: rgba(0, 0, 0, 0.5);\n            z-index: 9999;\n            \n            .loading-message {\n                color: white;\n            }\n        }\n\n        .inline {\n            padding: 1rem;\n            \n            .loading-message {\n                color: var(--text-secondary);\n            }\n        }\n\n        .loading-message {\n            font-size: 0.875rem;\n        }\n    \n",
            "extends": []
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-d98d9e6f68d019885a9c25821514d8db6de01fc055b1e264b3995f5f37123e6bee02c443ae04b027e8cff09b092b4593b2e045e5ee04eb548bd9561df9707e8a",
            "file": "src/app/features/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [
                "\n        .card {\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            border: none;\n            padding: 2rem;\n        }\n        \n        .btn-lg {\n            padding: 1rem 2rem;\n            font-size: 1.2rem;\n        }\n    "
            ],
            "template": "<div class=\"container\">\n    <div class=\"row justify-content-center mt-5\">\n        <div class=\"col-md-6 text-center\">\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <h2 class=\"card-title mb-4\">Welcome to AL Store Admin</h2>\n                    <p class=\"card-text\">Please sign in to continue</p>\n                    <button\n                        class=\"btn btn-primary btn-lg\"\n                        (click)=\"login()\"\n                        [disabled]=\"loading\">\n                        {{ loading ? 'Loading...' : 'Sign In' }}\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AuthService } from '../../../core/services/auth.service';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    standalone: true,\r\n    imports: [CommonModule],\r\n    template: `\r\n        <div class=\"container\">\r\n            <div class=\"row justify-content-center mt-5\">\r\n                <div class=\"col-md-6 text-center\">\r\n                    <div class=\"card\">\r\n                        <div class=\"card-body\">\r\n                            <h2 class=\"card-title mb-4\">Welcome to AL Store Admin</h2>\r\n                            <p class=\"card-text\">Please sign in to continue</p>\r\n                            <button \r\n                                class=\"btn btn-primary btn-lg\"\r\n                                (click)=\"login()\"\r\n                                [disabled]=\"loading\">\r\n                                {{ loading ? 'Loading...' : 'Sign In' }}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .card {\r\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n            border: none;\r\n            padding: 2rem;\r\n        }\r\n        \r\n        .btn-lg {\r\n            padding: 1rem 2rem;\r\n            font-size: 1.2rem;\r\n        }\r\n    `]\r\n})\r\nexport class LoginComponent {\r\n    loading = false;\r\n\r\n    constructor(private authService: AuthService) { }\r\n\r\n    async login() {\r\n        this.loading = true;\r\n        try {\r\n            await this.authService.login();\r\n            // The login method will redirect to Identity Server,\r\n            // so we don't need to handle navigation here\r\n        } catch (error) {\r\n            console.error('Login error:', error);\r\n            this.loading = false;\r\n        }\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        .card {\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            border: none;\n            padding: 2rem;\n        }\n        \n        .btn-lg {\n            padding: 1rem 2rem;\n            font-size: 1.2rem;\n        }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "MainLayoutComponent",
            "id": "component-MainLayoutComponent-c0a240b0cd211ca1a7c79abbf4261373951b27b9d97cabaab546f3dc2fd55165f67116d1e2cf7152a5186622fed1ccf5ae2c5b5d4d8fa6a06a7169caa7100ce6",
            "file": "src/app/layout/main-layout/main-layout.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-layout",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-white\">\n  <!-- Top Navigation Bar - Mobile Only -->\n  <header class=\"lg:hidden bg-white dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700 shadow-sm z-10\">\n    <div class=\"flex justify-between items-center px-4 py-2\">\n      <div class=\"flex items-center\">\n        <button\n          (click)=\"toggleSidebar()\"\n          class=\"p-2 rounded-full text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h16M4 18h16\" />\n          </svg>\n        </button>\n        <span class=\"ml-2 text-lg font-medium\">Admin Dashboard</span>\n      </div>\n      <div class=\"flex items-center space-x-2\">\n        <button\n          (click)=\"themeService.toggleTheme()\"\n          class=\"p-2 rounded-full text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700\">\n          <svg *ngIf=\"isDarkTheme\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\" />\n          </svg>\n          <svg *ngIf=\"!isDarkTheme\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\" />\n          </svg>\n        </button>\n      </div>\n    </div>\n  </header>\n\n  <!-- Main Content -->\n  <div class=\"flex flex-1 overflow-hidden\">\n    <!-- Sidebar - Hidden on mobile until toggled -->\n    <app-sidebar [collapsed]=\"sidebarCollapsed\" [ngClass]=\"{'hidden': !sidebarVisible && !isDesktop}\"></app-sidebar>\n\n    <!-- Main Content Area -->\n    <main class=\"flex-1 overflow-auto\">\n      <div class=\"mx-auto p-4 md:p-6\">\n        <ng-content></ng-content>\n      </div>\n    </main>\n  </div>\n\n  <!-- Mobile Navigation Footer -->\n  <footer class=\"lg:hidden bg-white dark:bg-slate-800 border-t border-slate-200 dark:border-slate-700 shadow-sm\">\n    <div class=\"grid grid-cols-4 h-16\">\n      <a routerLink=\"/\" class=\"flex flex-col items-center justify-center text-primary-600 dark:text-primary-400\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" />\n        </svg>\n        <span class=\"text-xs mt-1\">Home</span>\n      </a>\n      <a routerLink=\"/products\" class=\"flex flex-col items-center justify-center text-slate-600 dark:text-slate-400\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\n        </svg>\n        <span class=\"text-xs mt-1\">Products</span>\n      </a>\n      <a routerLink=\"/statistics\" class=\"flex flex-col items-center justify-center text-slate-600 dark:text-slate-400\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n        </svg>\n        <span class=\"text-xs mt-1\">Stats</span>\n      </a>\n      <a routerLink=\"/settings\" class=\"flex flex-col items-center justify-center text-slate-600 dark:text-slate-400\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n        </svg>\n        <span class=\"text-xs mt-1\">Settings</span>\n      </a>\n    </div>\n  </footer>\n\n  <!-- Toast Messages and Dialogs -->\n  <app-error-toast></app-error-toast>\n  <app-global-loading></app-global-loading>\n  <app-dialog></app-dialog>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDarkTheme",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "isDesktop",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "sidebarCollapsed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "sidebarVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "themeService",
                    "defaultValue": "inject(ThemeService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkScreenSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "SidebarComponent",
                    "type": "component"
                },
                {
                    "name": "ErrorToastComponent",
                    "type": "component"
                },
                {
                    "name": "DialogComponent",
                    "type": "component"
                },
                {
                    "name": "GlobalLoadingComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, inject, effect, ViewEncapsulation } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SidebarComponent } from '../sidebar/sidebar.component';\r\nimport { ErrorToastComponent } from '../../shared/components/error-toast/error-toast.component';\r\nimport { DialogComponent } from \"../../shared/components/dialog/dialog.component\";\r\nimport { ThemeService } from 'src/app/core/services/theme.service';\r\nimport { GlobalLoadingComponent } from 'src/app/shared/components/global-loading/global-loading.component';\r\n\r\n@Component({\r\n  selector: 'app-main-layout',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    SidebarComponent,\r\n    ErrorToastComponent,\r\n    DialogComponent,\r\n    GlobalLoadingComponent,\r\n  ],\r\n  template: `\r\n    <div class=\"h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-white\">\r\n      <!-- Top Navigation Bar - Mobile Only -->\r\n      <header class=\"lg:hidden bg-white dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700 shadow-sm z-10\">\r\n        <div class=\"flex justify-between items-center px-4 py-2\">\r\n          <div class=\"flex items-center\">\r\n            <button \r\n              (click)=\"toggleSidebar()\" \r\n              class=\"p-2 rounded-full text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h16M4 18h16\" />\r\n              </svg>\r\n            </button>\r\n            <span class=\"ml-2 text-lg font-medium\">Admin Dashboard</span>\r\n          </div>\r\n          <div class=\"flex items-center space-x-2\">\r\n            <button \r\n              (click)=\"themeService.toggleTheme()\" \r\n              class=\"p-2 rounded-full text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700\">\r\n              <svg *ngIf=\"isDarkTheme\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\" />\r\n              </svg>\r\n              <svg *ngIf=\"!isDarkTheme\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <!-- Main Content -->\r\n      <div class=\"flex flex-1 overflow-hidden\">\r\n        <!-- Sidebar - Hidden on mobile until toggled -->\r\n        <app-sidebar [collapsed]=\"sidebarCollapsed\" [ngClass]=\"{'hidden': !sidebarVisible && !isDesktop}\"></app-sidebar>\r\n        \r\n        <!-- Main Content Area -->\r\n        <main class=\"flex-1 overflow-auto\">\r\n          <div class=\"mx-auto p-4 md:p-6\">\r\n            <ng-content></ng-content>\r\n          </div>\r\n        </main>\r\n      </div>\r\n\r\n      <!-- Mobile Navigation Footer -->\r\n      <footer class=\"lg:hidden bg-white dark:bg-slate-800 border-t border-slate-200 dark:border-slate-700 shadow-sm\">\r\n        <div class=\"grid grid-cols-4 h-16\">\r\n          <a routerLink=\"/\" class=\"flex flex-col items-center justify-center text-primary-600 dark:text-primary-400\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" />\r\n            </svg>\r\n            <span class=\"text-xs mt-1\">Home</span>\r\n          </a>\r\n          <a routerLink=\"/products\" class=\"flex flex-col items-center justify-center text-slate-600 dark:text-slate-400\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n            </svg>\r\n            <span class=\"text-xs mt-1\">Products</span>\r\n          </a>\r\n          <a routerLink=\"/statistics\" class=\"flex flex-col items-center justify-center text-slate-600 dark:text-slate-400\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\r\n            </svg>\r\n            <span class=\"text-xs mt-1\">Stats</span>\r\n          </a>\r\n          <a routerLink=\"/settings\" class=\"flex flex-col items-center justify-center text-slate-600 dark:text-slate-400\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n            </svg>\r\n            <span class=\"text-xs mt-1\">Settings</span>\r\n          </a>\r\n        </div>\r\n      </footer>\r\n\r\n      <!-- Toast Messages and Dialogs -->\r\n      <app-error-toast></app-error-toast>\r\n      <app-global-loading></app-global-loading>\r\n      <app-dialog></app-dialog>\r\n    </div>\r\n  `,\r\n  styles: [],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class MainLayoutComponent implements OnInit {\r\n  readonly themeService = inject(ThemeService);\r\n\r\n  isDarkTheme = false;\r\n  sidebarCollapsed = false;\r\n  sidebarVisible = false;\r\n  isDesktop = false;\r\n\r\n  constructor() {\r\n    // Listen to theme changes\r\n    effect(() => {\r\n      this.isDarkTheme = this.themeService.isDarkTheme();\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Check screen size\r\n    this.checkScreenSize();\r\n    window.addEventListener('resize', () => this.checkScreenSize());\r\n\r\n    // Default to showing sidebar on desktop\r\n    this.sidebarVisible = this.isDesktop;\r\n  }\r\n\r\n  toggleSidebar() {\r\n    this.sidebarVisible = !this.sidebarVisible;\r\n  }\r\n\r\n  private checkScreenSize() {\r\n    this.isDesktop = window.innerWidth >= 1024; // lg breakpoint in Tailwind\r\n    if (this.isDesktop) {\r\n      this.sidebarVisible = true;\r\n    }\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 109
            },
            "extends": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "NetworkErrorComponent",
            "id": "component-NetworkErrorComponent-eef5dcabdc957530ec2cf3df10e4ed04cb5f05eed2fbf53b1c0736203598bede3ac561840a9a539ff094a4ba385f09d56d6e1b2d6625e61df96d9063597c8136",
            "file": "src/app/features/error-pages/network-error/network-error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-network-error",
            "styleUrls": [],
            "styles": [],
            "template": "<app-error-page [config]=\"errorConfig\"></app-error-page>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorConfig",
                    "defaultValue": "{\r\n        title: 'Connection Error',\r\n        message: 'Unable to connect to the server. Please check your internet connection and try again.',\r\n        icon: 'wifi_off',\r\n        showRetryButton: true\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ErrorConfig",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ErrorPageComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\r\nimport { ErrorConfig, ErrorPageComponent } from \"../error-page.component\";\r\n\r\n// src/app/features/error-pages/network-error/network-error.component.ts\r\n@Component({\r\n    selector: 'app-network-error',\r\n    standalone: true,\r\n    imports: [ErrorPageComponent],\r\n    template: `\r\n        <app-error-page [config]=\"errorConfig\"></app-error-page>\r\n    `\r\n})\r\nexport class NetworkErrorComponent {\r\n    errorConfig: ErrorConfig = {\r\n        title: 'Connection Error',\r\n        message: 'Unable to connect to the server. Please check your internet connection and try again.',\r\n        icon: 'wifi_off',\r\n        showRetryButton: true\r\n    };\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-a13bc955353b1ea428fba605118267a72a14b11f9f39d9d6a4c04d696425f60aa7afa6639d45dd372bb49ef0daacad227c1e80039b01bc0e96e5c282d0b2b2e2",
            "file": "src/app/features/error-pages/not-found/not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [],
            "styles": [],
            "template": "<app-error-page [config]=\"errorConfig\"></app-error-page>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorConfig",
                    "defaultValue": "{\r\n        title: 'Page Not Found',\r\n        message: 'Sorry, the page you are looking for doesn\\'t exist or has been moved.',\r\n        icon: 'search_off',\r\n        showHomeButton: true\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ErrorConfig",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ErrorPageComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\r\nimport { ErrorConfig, ErrorPageComponent } from \"../error-page.component\";\r\n\r\n// src/app/features/error-pages/not-found/not-found.component.ts\r\n@Component({\r\n    selector: 'app-not-found',\r\n    standalone: true,\r\n    imports: [ErrorPageComponent],\r\n    template: `\r\n        <app-error-page [config]=\"errorConfig\"></app-error-page>\r\n    `\r\n})\r\nexport class NotFoundComponent {\r\n    errorConfig: ErrorConfig = {\r\n        title: 'Page Not Found',\r\n        message: 'Sorry, the page you are looking for doesn\\'t exist or has been moved.',\r\n        icon: 'search_off',\r\n        showHomeButton: true\r\n    };\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "OrderDetailsDialogComponent",
            "id": "component-OrderDetailsDialogComponent-d93e0a35b009b317ac5adaeeb8bf65a23d09d4019a3dd42494e9b08a864e6f08e69a74b79f93e9c7c84a4f91858ec0effd58370d9b47b94c329428a773dbb5a9",
            "file": "src/app/features/orders/components/order-details-dialog/order-details-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-order-details-dialog",
            "styleUrls": [],
            "styles": [
                "\n        .dialog-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 1rem;\n        }\n\n        .section-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 1rem;\n        }\n\n        .tab-content {\n            padding: 1rem;\n        }\n\n        .info-section {\n            margin-bottom: 2rem;\n\n            h3 {\n                margin: 0;\n                color: var(--text-primary);\n            }\n        }\n\n        .info-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 1rem;\n            margin-top: 1rem;\n        }\n\n        .info-item {\n            label {\n                display: block;\n                font-size: 0.875rem;\n                color: var(--text-secondary);\n                margin-bottom: 0.25rem;\n            }\n        }\n\n        .items-table, .history-table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-top: 1rem;\n\n            th, td {\n                padding: 0.75rem;\n                text-align: left;\n                border-bottom: 1px solid var(--border);\n            }\n\n            th {\n                font-weight: 500;\n                color: var(--text-secondary);\n            }\n\n            .total-row {\n                font-weight: 500;\n                td {\n                    border-top: 2px solid var(--border);\n                }\n            }\n        }\n\n        .addresses-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 1rem;\n            margin-top: 1rem;\n        }\n\n        .address-box {\n            padding: 1rem;\n            background-color: var(--bg-secondary);\n            border-radius: 8px;\n            border: 1px solid var(--border);\n\n            h4 {\n                margin: 0 0 0.5rem;\n                color: var(--text-primary);\n            }\n\n            p {\n                margin: 0.25rem 0;\n                color: var(--text-secondary);\n            }\n        }\n\n        .notes-list {\n            margin-top: 1rem;\n\n            .note-item {\n                padding: 1rem;\n                background-color: var(--bg-secondary);\n                border-radius: 8px;\n                border: 1px solid var(--border);\n                margin-bottom: 1rem;\n\n                .note-header {\n                    display: flex;\n                    justify-content: space-between;\n                    margin-bottom: 0.5rem;\n                    font-size: 0.875rem;\n                    color: var(--text-secondary);\n                }\n\n                .note-content {\n                    margin: 0;\n                    color: var(--text-primary);\n                }\n            }\n        }\n\n        .no-notes {\n            color: var(--text-secondary);\n            font-style: italic;\n            margin: 1rem 0;\n        }\n    "
            ],
            "template": "<div class=\"order-details-dialog\">\n    <div class=\"dialog-header\">\n        <h2 mat-dialog-title>Order #{{order.orderNumber}}</h2>\n        <app-status-badge [status]=\"order.status\"></app-status-badge>\n    </div>\n\n    <mat-dialog-content>\n        <mat-tab-group>\n            <!-- Order Details Tab -->\n            <mat-tab label=\"Details\">\n                <div class=\"tab-content\">\n                    <div class=\"info-section\">\n                        <div class=\"section-header\">\n                            <h3>Order Information</h3>\n                            <button mat-button color=\"primary\" (click)=\"updateStatus()\">\n                                Update Status\n                            </button>\n                        </div>\n                        <div class=\"info-grid\">\n                            <div class=\"info-item\">\n                                <label>Created</label>\n                                <span>{{order.createdAt | date:'medium'}}</span>\n                            </div>\n                            <div class=\"info-item\">\n                                <label>Last Modified</label>\n                                <span>{{order.lastModifiedAt | date:'medium'}}</span>\n                            </div>\n                            <div class=\"info-item\">\n                                <label>Created By</label>\n                                <span>{{order.createdBy?.username || 'Customer'}}</span>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"info-section\">\n                        <div class=\"section-header\">\n                            <h3>Items</h3>\n                            <button mat-button color=\"primary\" (click)=\"editItems()\">\n                                Edit Items\n                            </button>\n                        </div>\n                        <table class=\"items-table\">\n                            <thead>\n                                <tr>\n                                    <th>SKU</th>\n                                    <th>Product</th>\n                                    <th>Quantity</th>\n                                    <th>Unit Price</th>\n                                    <th>Total</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                @for (item of order.items; track item.id) {\n                                    <tr>\n                                        <td>{{item.sku}}</td>\n                                        <td>{{item.productName}}</td>\n                                        <td>{{item.quantity}}</td>\n                                        <td>{{item.price.amount | currency:item.price.currency}}</td>\n                                        <td>{{item.quantity * item.price.amount | currency:item.price.currency}}</td>\n                                    </tr>\n                                }\n                            </tbody>\n                            <tfoot>\n                                <tr>\n                                    <td colspan=\"4\">Subtotal</td>\n                                    <td>{{order.subtotal.amount | currency:order.subtotal.currency}}</td>\n                                </tr>\n                                <tr>\n                                    <td colspan=\"4\">Shipping</td>\n                                    <td>{{order.shipping.amount | currency:order.shipping.currency}}</td>\n                                </tr>\n                                <tr>\n                                    <td colspan=\"4\">Tax</td>\n                                    <td>{{order.tax.amount | currency:order.tax.currency}}</td>\n                                </tr>\n                                <tr class=\"total-row\">\n                                    <td colspan=\"4\">Total</td>\n                                    <td>{{order.total.amount | currency:order.total.currency}}</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n                </div>\n            </mat-tab>\n\n            <!-- Payment Tab -->\n            <mat-tab label=\"Payment\">\n                <div class=\"tab-content\">\n                    <div class=\"info-section\">\n                        <div class=\"section-header\">\n                            <h3>Payment Information</h3>\n                            <button mat-button color=\"primary\"\n                                    [disabled]=\"order.paymentStatus === 'paid'\"\n                                    (click)=\"addPayment()\">\n                                Add Payment\n                            </button>\n                        </div>\n                        <div class=\"info-grid\">\n                            <div class=\"info-item\">\n                                <label>Status</label>\n                                <app-status-badge [status]=\"order.paymentStatus\"></app-status-badge>\n                            </div>\n                            <div class=\"info-item\">\n                                <label>Method</label>\n                                <span>{{order.paymentMethod}}</span>\n                            </div>\n                            <div class=\"info-item\">\n                                <label>Transaction ID</label>\n                                <span>{{order.payment?.transactionId || 'N/A'}}</span>\n                            </div>\n                        </div>\n\n                        @if (order.payment) {\n                            <div class=\"payment-history\">\n                                <h4>Payment History</h4>\n                                <table class=\"history-table\">\n                                    <thead>\n                                        <tr>\n                                            <th>Date</th>\n                                            <th>Amount</th>\n                                            <th>Status</th>\n                                            <th>Reference</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr>\n                                            <td>{{order.payment.date | date:'short'}}</td>\n                                            <td>{{order.payment.amount | currency:order.payment.currency}}</td>\n                                            <td>\n                                                <app-status-badge [status]=\"order.payment.status\">\n                                                </app-status-badge>\n                                            </td>\n                                            <td>{{order.payment.reference}}</td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        }\n                    </div>\n                </div>\n            </mat-tab>\n\n            <!-- Shipping Tab -->\n            <mat-tab label=\"Shipping\">\n                <div class=\"tab-content\">\n                    <div class=\"info-section\">\n                        <div class=\"section-header\">\n                            <h3>Shipping Information</h3>\n                            <button mat-button color=\"primary\"\n                                    [disabled]=\"!canUpdateShipping()\"\n                                    (click)=\"updateShipping()\">\n                                Update Shipping\n                            </button>\n                        </div>\n\n                        <div class=\"addresses-grid\">\n                            <div class=\"address-box\">\n                                <h4>Shipping Address</h4>\n                                <div class=\"address-content\">\n                                    <p>{{order.shippingAddress.firstName}} {{order.shippingAddress.lastName}}</p>\n                                    <p>{{order.shippingAddress.addressLine1}}</p>\n                                    <p>{{order.shippingAddress?.addressLine2}}</p>\n                                    <p>{{order.shippingAddress.city}}, {{order.shippingAddress.state}} {{order.shippingAddress.postalCode}}</p>\n                                    <p>{{order.shippingAddress.country}}</p>\n                                    @if (order.shippingAddress.phone) {\n                                        <p>{{order.shippingAddress.phone}}</p>\n                                    }\n                                </div>\n                            </div>\n\n                            @if (order.shippingInfo) {\n                                <div class=\"shipping-details\">\n                                    <h4>Tracking Information</h4>\n                                    <div class=\"info-grid\">\n                                        <div class=\"info-item\">\n                                            <label>Carrier</label>\n                                            <span>{{order.shippingInfo.carrier}}</span>\n                                        </div>\n                                        <div class=\"info-item\">\n                                            <label>Tracking Number</label>\n                                            <span>{{order.shippingInfo.trackingNumber}}</span>\n                                        </div>\n                                        <div class=\"info-item\">\n                                            <label>Estimated Delivery</label>\n                                            <span>{{order.shippingInfo.estimatedDeliveryDate | date}}</span>\n                                        </div>\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                    </div>\n                </div>\n            </mat-tab>\n\n            <!-- Admin Notes Tab -->\n            <mat-tab label=\"Notes\">\n                <div class=\"tab-content\">\n                    <div class=\"info-section\">\n                        <div class=\"section-header\">\n                            <h3>Admin Notes</h3>\n                            <button mat-button color=\"primary\" (click)=\"addNote()\">\n                                Add Note\n                            </button>\n                        </div>\n\n                        @if (order.notes?.length) {\n                            <div class=\"notes-list\">\n                                @for (note of order.notes; track note.id) {\n                                    <div class=\"note-item\">\n                                        <div class=\"note-header\">\n                                            <span class=\"note-author\">{{note.createdBy.username}}</span>\n                                            <span class=\"note-date\">{{note.createdAt | date:'short'}}</span>\n                                        </div>\n                                        <p class=\"note-content\">{{note.content}}</p>\n                                    </div>\n                                }\n                            </div>\n                        } @else {\n                            <p class=\"no-notes\">No notes added yet</p>\n                        }\n                    </div>\n                </div>\n            </mat-tab>\n        </mat-tab-group>\n    </mat-dialog-content>\n\n    <mat-dialog-actions align=\"end\">\n        <button mat-button (click)=\"close()\">Close</button>\n        @if (order.status !== 'cancelled') {\n            <button mat-button color=\"warn\" (click)=\"cancelOrder()\">\n                Cancel Order\n            </button>\n        }\n    </mat-dialog-actions>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 392
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<OrderDetailsDialogComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 395,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dialogService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 393
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Order",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 396,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 451,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addPayment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 413,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cancelOrder",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 464,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "canUpdateShipping",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 401,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 479,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 409,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateShipping",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 433,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 405,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "StatusBadgeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { Store } from '@ngrx/store';\r\nimport { OrderActions } from 'src/app/store/order/order.actions';\r\nimport { StatusBadgeComponent } from 'src/app/shared/components/badges/status-badge.component';\r\nimport { AddPaymentDialogComponent } from '../add-payment-dialog/add-payment-dialog.component';\r\nimport { Order } from 'src/app/shared/models/order.model';\r\n\r\n@Component({\r\n    selector: 'app-order-details-dialog',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        MatDialogModule,\r\n        MatButtonModule,\r\n        MatTabsModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        StatusBadgeComponent,\r\n    ],\r\n    template: `\r\n        <div class=\"order-details-dialog\">\r\n            <div class=\"dialog-header\">\r\n                <h2 mat-dialog-title>Order #{{order.orderNumber}}</h2>\r\n                <app-status-badge [status]=\"order.status\"></app-status-badge>\r\n            </div>\r\n            \r\n            <mat-dialog-content>\r\n                <mat-tab-group>\r\n                    <!-- Order Details Tab -->\r\n                    <mat-tab label=\"Details\">\r\n                        <div class=\"tab-content\">\r\n                            <div class=\"info-section\">\r\n                                <div class=\"section-header\">\r\n                                    <h3>Order Information</h3>\r\n                                    <button mat-button color=\"primary\" (click)=\"updateStatus()\">\r\n                                        Update Status\r\n                                    </button>\r\n                                </div>\r\n                                <div class=\"info-grid\">\r\n                                    <div class=\"info-item\">\r\n                                        <label>Created</label>\r\n                                        <span>{{order.createdAt | date:'medium'}}</span>\r\n                                    </div>\r\n                                    <div class=\"info-item\">\r\n                                        <label>Last Modified</label>\r\n                                        <span>{{order.lastModifiedAt | date:'medium'}}</span>\r\n                                    </div>\r\n                                    <div class=\"info-item\">\r\n                                        <label>Created By</label>\r\n                                        <span>{{order.createdBy?.username || 'Customer'}}</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"info-section\">\r\n                                <div class=\"section-header\">\r\n                                    <h3>Items</h3>\r\n                                    <button mat-button color=\"primary\" (click)=\"editItems()\">\r\n                                        Edit Items\r\n                                    </button>\r\n                                </div>\r\n                                <table class=\"items-table\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>SKU</th>\r\n                                            <th>Product</th>\r\n                                            <th>Quantity</th>\r\n                                            <th>Unit Price</th>\r\n                                            <th>Total</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        @for (item of order.items; track item.id) {\r\n                                            <tr>\r\n                                                <td>{{item.sku}}</td>\r\n                                                <td>{{item.productName}}</td>\r\n                                                <td>{{item.quantity}}</td>\r\n                                                <td>{{item.price.amount | currency:item.price.currency}}</td>\r\n                                                <td>{{item.quantity * item.price.amount | currency:item.price.currency}}</td>\r\n                                            </tr>\r\n                                        }\r\n                                    </tbody>\r\n                                    <tfoot>\r\n                                        <tr>\r\n                                            <td colspan=\"4\">Subtotal</td>\r\n                                            <td>{{order.subtotal.amount | currency:order.subtotal.currency}}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td colspan=\"4\">Shipping</td>\r\n                                            <td>{{order.shipping.amount | currency:order.shipping.currency}}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td colspan=\"4\">Tax</td>\r\n                                            <td>{{order.tax.amount | currency:order.tax.currency}}</td>\r\n                                        </tr>\r\n                                        <tr class=\"total-row\">\r\n                                            <td colspan=\"4\">Total</td>\r\n                                            <td>{{order.total.amount | currency:order.total.currency}}</td>\r\n                                        </tr>\r\n                                    </tfoot>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </mat-tab>\r\n\r\n                    <!-- Payment Tab -->\r\n                    <mat-tab label=\"Payment\">\r\n                        <div class=\"tab-content\">\r\n                            <div class=\"info-section\">\r\n                                <div class=\"section-header\">\r\n                                    <h3>Payment Information</h3>\r\n                                    <button mat-button color=\"primary\" \r\n                                            [disabled]=\"order.paymentStatus === 'paid'\"\r\n                                            (click)=\"addPayment()\">\r\n                                        Add Payment\r\n                                    </button>\r\n                                </div>\r\n                                <div class=\"info-grid\">\r\n                                    <div class=\"info-item\">\r\n                                        <label>Status</label>\r\n                                        <app-status-badge [status]=\"order.paymentStatus\"></app-status-badge>\r\n                                    </div>\r\n                                    <div class=\"info-item\">\r\n                                        <label>Method</label>\r\n                                        <span>{{order.paymentMethod}}</span>\r\n                                    </div>\r\n                                    <div class=\"info-item\">\r\n                                        <label>Transaction ID</label>\r\n                                        <span>{{order.payment?.transactionId || 'N/A'}}</span>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                @if (order.payment) {\r\n                                    <div class=\"payment-history\">\r\n                                        <h4>Payment History</h4>\r\n                                        <table class=\"history-table\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>Date</th>\r\n                                                    <th>Amount</th>\r\n                                                    <th>Status</th>\r\n                                                    <th>Reference</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                <tr>\r\n                                                    <td>{{order.payment.date | date:'short'}}</td>\r\n                                                    <td>{{order.payment.amount | currency:order.payment.currency}}</td>\r\n                                                    <td>\r\n                                                        <app-status-badge [status]=\"order.payment.status\">\r\n                                                        </app-status-badge>\r\n                                                    </td>\r\n                                                    <td>{{order.payment.reference}}</td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </mat-tab>\r\n\r\n                    <!-- Shipping Tab -->\r\n                    <mat-tab label=\"Shipping\">\r\n                        <div class=\"tab-content\">\r\n                            <div class=\"info-section\">\r\n                                <div class=\"section-header\">\r\n                                    <h3>Shipping Information</h3>\r\n                                    <button mat-button color=\"primary\" \r\n                                            [disabled]=\"!canUpdateShipping()\"\r\n                                            (click)=\"updateShipping()\">\r\n                                        Update Shipping\r\n                                    </button>\r\n                                </div>\r\n\r\n                                <div class=\"addresses-grid\">\r\n                                    <div class=\"address-box\">\r\n                                        <h4>Shipping Address</h4>\r\n                                        <div class=\"address-content\">\r\n                                            <p>{{order.shippingAddress.firstName}} {{order.shippingAddress.lastName}}</p>\r\n                                            <p>{{order.shippingAddress.addressLine1}}</p>\r\n                                            <p>{{order.shippingAddress?.addressLine2}}</p>\r\n                                            <p>{{order.shippingAddress.city}}, {{order.shippingAddress.state}} {{order.shippingAddress.postalCode}}</p>\r\n                                            <p>{{order.shippingAddress.country}}</p>\r\n                                            @if (order.shippingAddress.phone) {\r\n                                                <p>{{order.shippingAddress.phone}}</p>\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    @if (order.shippingInfo) {\r\n                                        <div class=\"shipping-details\">\r\n                                            <h4>Tracking Information</h4>\r\n                                            <div class=\"info-grid\">\r\n                                                <div class=\"info-item\">\r\n                                                    <label>Carrier</label>\r\n                                                    <span>{{order.shippingInfo.carrier}}</span>\r\n                                                </div>\r\n                                                <div class=\"info-item\">\r\n                                                    <label>Tracking Number</label>\r\n                                                    <span>{{order.shippingInfo.trackingNumber}}</span>\r\n                                                </div>\r\n                                                <div class=\"info-item\">\r\n                                                    <label>Estimated Delivery</label>\r\n                                                    <span>{{order.shippingInfo.estimatedDeliveryDate | date}}</span>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </mat-tab>\r\n\r\n                    <!-- Admin Notes Tab -->\r\n                    <mat-tab label=\"Notes\">\r\n                        <div class=\"tab-content\">\r\n                            <div class=\"info-section\">\r\n                                <div class=\"section-header\">\r\n                                    <h3>Admin Notes</h3>\r\n                                    <button mat-button color=\"primary\" (click)=\"addNote()\">\r\n                                        Add Note\r\n                                    </button>\r\n                                </div>\r\n\r\n                                @if (order.notes?.length) {\r\n                                    <div class=\"notes-list\">\r\n                                        @for (note of order.notes; track note.id) {\r\n                                            <div class=\"note-item\">\r\n                                                <div class=\"note-header\">\r\n                                                    <span class=\"note-author\">{{note.createdBy.username}}</span>\r\n                                                    <span class=\"note-date\">{{note.createdAt | date:'short'}}</span>\r\n                                                </div>\r\n                                                <p class=\"note-content\">{{note.content}}</p>\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n                                } @else {\r\n                                    <p class=\"no-notes\">No notes added yet</p>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </mat-tab>\r\n                </mat-tab-group>\r\n            </mat-dialog-content>\r\n\r\n            <mat-dialog-actions align=\"end\">\r\n                <button mat-button (click)=\"close()\">Close</button>\r\n                @if (order.status !== 'cancelled') {\r\n                    <button mat-button color=\"warn\" (click)=\"cancelOrder()\">\r\n                        Cancel Order\r\n                    </button>\r\n                }\r\n            </mat-dialog-actions>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .dialog-header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            margin-bottom: 1rem;\r\n        }\r\n\r\n        .section-header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            margin-bottom: 1rem;\r\n        }\r\n\r\n        .tab-content {\r\n            padding: 1rem;\r\n        }\r\n\r\n        .info-section {\r\n            margin-bottom: 2rem;\r\n\r\n            h3 {\r\n                margin: 0;\r\n                color: var(--text-primary);\r\n            }\r\n        }\r\n\r\n        .info-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n            gap: 1rem;\r\n            margin-top: 1rem;\r\n        }\r\n\r\n        .info-item {\r\n            label {\r\n                display: block;\r\n                font-size: 0.875rem;\r\n                color: var(--text-secondary);\r\n                margin-bottom: 0.25rem;\r\n            }\r\n        }\r\n\r\n        .items-table, .history-table {\r\n            width: 100%;\r\n            border-collapse: collapse;\r\n            margin-top: 1rem;\r\n\r\n            th, td {\r\n                padding: 0.75rem;\r\n                text-align: left;\r\n                border-bottom: 1px solid var(--border);\r\n            }\r\n\r\n            th {\r\n                font-weight: 500;\r\n                color: var(--text-secondary);\r\n            }\r\n\r\n            .total-row {\r\n                font-weight: 500;\r\n                td {\r\n                    border-top: 2px solid var(--border);\r\n                }\r\n            }\r\n        }\r\n\r\n        .addresses-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n            gap: 1rem;\r\n            margin-top: 1rem;\r\n        }\r\n\r\n        .address-box {\r\n            padding: 1rem;\r\n            background-color: var(--bg-secondary);\r\n            border-radius: 8px;\r\n            border: 1px solid var(--border);\r\n\r\n            h4 {\r\n                margin: 0 0 0.5rem;\r\n                color: var(--text-primary);\r\n            }\r\n\r\n            p {\r\n                margin: 0.25rem 0;\r\n                color: var(--text-secondary);\r\n            }\r\n        }\r\n\r\n        .notes-list {\r\n            margin-top: 1rem;\r\n\r\n            .note-item {\r\n                padding: 1rem;\r\n                background-color: var(--bg-secondary);\r\n                border-radius: 8px;\r\n                border: 1px solid var(--border);\r\n                margin-bottom: 1rem;\r\n\r\n                .note-header {\r\n                    display: flex;\r\n                    justify-content: space-between;\r\n                    margin-bottom: 0.5rem;\r\n                    font-size: 0.875rem;\r\n                    color: var(--text-secondary);\r\n                }\r\n\r\n                .note-content {\r\n                    margin: 0;\r\n                    color: var(--text-primary);\r\n                }\r\n            }\r\n        }\r\n\r\n        .no-notes {\r\n            color: var(--text-secondary);\r\n            font-style: italic;\r\n            margin: 1rem 0;\r\n        }\r\n    `]\r\n})\r\nexport class OrderDetailsDialogComponent {\r\n    dialog: any;\r\n    dialogService: any;\r\n    constructor(\r\n        public dialogRef: MatDialogRef<OrderDetailsDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public order: Order,\r\n        private readonly store: Store,\r\n        private readonly fb: FormBuilder\r\n    ) { }\r\n\r\n    canUpdateShipping(): boolean {\r\n        return ['confirmed', 'processing'].includes(this.order.status);\r\n    }\r\n\r\n    updateStatus() {\r\n        // Implement status update dialog\r\n    }\r\n\r\n    editItems() {\r\n        // Implement items edit dialog\r\n    }\r\n\r\n    addPayment() {\r\n        // Open payment dialog to add new payment\r\n        const dialogRef = this.dialog.open(AddPaymentDialogComponent, {\r\n            data: {\r\n                orderId: this.order.id,\r\n                amount: this.order.total.amount,\r\n                currency: this.order.total.currency\r\n            }\r\n        });\r\n\r\n        dialogRef.afterClosed().subscribe((payment: any) => {\r\n            if (payment) {\r\n                this.store.dispatch(OrderActions.addPayment({\r\n                    orderId: this.order.id,\r\n                    payment\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    updateShipping() {\r\n        const dialogRef = this.dialog.open(UpdateShippingDialogComponent, {\r\n            data: {\r\n                orderId: this.order.id,\r\n                currentShipping: this.order.shippingInfo\r\n            }\r\n        });\r\n\r\n        dialogRef.afterClosed().subscribe(shipping => {\r\n            if (shipping) {\r\n                this.store.dispatch(OrderActions.updateShipping({\r\n                    orderId: this.order.id,\r\n                    shipping\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    addNote() {\r\n        const dialogRef = this.dialog.open(AddNoteDialogComponent);\r\n\r\n        dialogRef.afterClosed().subscribe(note => {\r\n            if (note) {\r\n                this.store.dispatch(OrderActions.addNote({\r\n                    orderId: this.order.id,\r\n                    note\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    cancelOrder() {\r\n        this.dialogService.confirm(\r\n            'Are you sure you want to cancel this order?',\r\n            'Cancel Order'\r\n        ).then((confirmed: any) => {\r\n            if (confirmed) {\r\n                this.store.dispatch(OrderActions.updateStatus({\r\n                    orderId: this.order.id,\r\n                    newStatus: OrderStatus.Cancelled\r\n                }));\r\n                this.close();\r\n            }\r\n        });\r\n    }\r\n\r\n    close() {\r\n        this.dialogRef.close();\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        .dialog-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 1rem;\n        }\n\n        .section-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 1rem;\n        }\n\n        .tab-content {\n            padding: 1rem;\n        }\n\n        .info-section {\n            margin-bottom: 2rem;\n\n            h3 {\n                margin: 0;\n                color: var(--text-primary);\n            }\n        }\n\n        .info-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 1rem;\n            margin-top: 1rem;\n        }\n\n        .info-item {\n            label {\n                display: block;\n                font-size: 0.875rem;\n                color: var(--text-secondary);\n                margin-bottom: 0.25rem;\n            }\n        }\n\n        .items-table, .history-table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-top: 1rem;\n\n            th, td {\n                padding: 0.75rem;\n                text-align: left;\n                border-bottom: 1px solid var(--border);\n            }\n\n            th {\n                font-weight: 500;\n                color: var(--text-secondary);\n            }\n\n            .total-row {\n                font-weight: 500;\n                td {\n                    border-top: 2px solid var(--border);\n                }\n            }\n        }\n\n        .addresses-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 1rem;\n            margin-top: 1rem;\n        }\n\n        .address-box {\n            padding: 1rem;\n            background-color: var(--bg-secondary);\n            border-radius: 8px;\n            border: 1px solid var(--border);\n\n            h4 {\n                margin: 0 0 0.5rem;\n                color: var(--text-primary);\n            }\n\n            p {\n                margin: 0.25rem 0;\n                color: var(--text-secondary);\n            }\n        }\n\n        .notes-list {\n            margin-top: 1rem;\n\n            .note-item {\n                padding: 1rem;\n                background-color: var(--bg-secondary);\n                border-radius: 8px;\n                border: 1px solid var(--border);\n                margin-bottom: 1rem;\n\n                .note-header {\n                    display: flex;\n                    justify-content: space-between;\n                    margin-bottom: 0.5rem;\n                    font-size: 0.875rem;\n                    color: var(--text-secondary);\n                }\n\n                .note-content {\n                    margin: 0;\n                    color: var(--text-primary);\n                }\n            }\n        }\n\n        .no-notes {\n            color: var(--text-secondary);\n            font-style: italic;\n            margin: 1rem 0;\n        }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<OrderDetailsDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "order",
                        "type": "Order",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 393,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<OrderDetailsDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "order",
                        "type": "Order",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "OrderListComponent",
            "id": "component-OrderListComponent-16f26f02169ac93856a6e0a8d102860a3099de0b7461b33f8da631b166b3cef2152bd4f82847c25df7dbb2e68689b2bfd7bb195fd7e5c7f5d06f93ca42efb303",
            "file": "src/app/features/orders/order-list/order-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-order-list",
            "styleUrls": [],
            "styles": [
                "\n        .order-list-container {\n            padding: 1rem;\n        }\n\n        .filters-section {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 1rem;\n            margin-bottom: 1rem;\n        }\n\n        table {\n            width: 100%;\n        }\n\n        .mat-column-actions {\n            width: 100px;\n            text-align: center;\n        }\n\n        .mat-column-status {\n            width: 120px;\n        }\n\n        .mat-column-total {\n            width: 120px;\n            text-align: right;\n        }\n\n        .mat-column-createdAt {\n            width: 150px;\n        }\n    "
            ],
            "template": "<div class=\"order-list-container\">\n    <!-- Filters -->\n    <div class=\"filters-section\">\n        <mat-form-field>\n            <mat-label>Search</mat-label>\n            <input matInput [formControl]=\"searchControl\" placeholder=\"Search orders...\">\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label>Status</mat-label>\n            <mat-select [formControl]=\"statusFilter\">\n                <mat-option [value]=\"null\">All</mat-option>\n                <mat-option *ngFor=\"let status of orderStatuses\" [value]=\"status\">\n                    {{status}}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label>From Date</mat-label>\n            <input matInput [matDatepicker]=\"fromPicker\" [formControl]=\"fromDateFilter\">\n            <mat-datepicker-toggle matSuffix [for]=\"fromPicker\"></mat-datepicker-toggle>\n            <mat-datepicker #fromPicker></mat-datepicker>\n        </mat-form-field>\n\n        <mat-form-field>\n            <mat-label>To Date</mat-label>\n            <input matInput [matDatepicker]=\"toPicker\" [formControl]=\"toDateFilter\">\n            <mat-datepicker-toggle matSuffix [for]=\"toPicker\"></mat-datepicker-toggle>\n            <mat-datepicker #toPicker></mat-datepicker>\n        </mat-form-field>\n    </div>\n\n    <!-- Orders Table -->\n    <table mat-table [dataSource]=\"(orders$ | async) ?? []\" matSort (matSortChange)=\"sortChange($event)\">\n         <!-- Selection Column -->\n    <ng-container matColumnDef=\"select\">\n        <th mat-header-cell *matHeaderCellDef>\n            <mat-checkbox\n                (change)=\"$event ? masterToggle() : null\"\n                [checked]=\"selection.hasValue() && isAllSelected()\"\n                [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                [aria-label]=\"checkboxLabel()\">\n            </mat-checkbox>\n        </th>\n        <td mat-cell *matCellDef=\"let row\">\n            <mat-checkbox\n                (click)=\"$event.stopPropagation()\"\n                (change)=\"$event ? selection.toggle(row) : null\"\n                [checked]=\"selection.isSelected(row)\"\n                [aria-label]=\"checkboxLabel(row)\">\n            </mat-checkbox>\n        </td>\n    </ng-container>\n        <!-- Order Number Column -->\n        <ng-container matColumnDef=\"orderNumber\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Order #</th>\n            <td mat-cell *matCellDef=\"let order\">{{order.orderNumber}}</td>\n        </ng-container>\n\n        <!-- Status Column -->\n        <ng-container matColumnDef=\"status\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Status</th>\n            <td mat-cell *matCellDef=\"let order\">\n                <app-status-badge [status]=\"order.status\"></app-status-badge>\n            </td>\n        </ng-container>\n\n        <!-- Customer Column -->\n        <ng-container matColumnDef=\"customer\">\n            <th mat-header-cell *matHeaderCellDef>Customer</th>\n            <td mat-cell *matCellDef=\"let order\">\n                {{order.customerName}}\n            </td>\n        </ng-container>\n\n        <!-- Total Column -->\n        <ng-container matColumnDef=\"total\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Total</th>\n            <td mat-cell *matCellDef=\"let order\">\n                {{order.total | currency:order.currency}}\n            </td>\n        </ng-container>\n\n        <!-- Date Column -->\n        <ng-container matColumnDef=\"createdAt\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Date</th>\n            <td mat-cell *matCellDef=\"let order\">\n                {{order.createdAt | date:'short'}}\n            </td>\n        </ng-container>\n\n        <!-- Actions Column -->\n        <ng-container matColumnDef=\"actions\">\n            <th mat-header-cell *matHeaderCellDef>Actions</th>\n            <td mat-cell *matCellDef=\"let order\">\n                <button mat-button [matMenuTriggerFor]=\"statusMenu\">\n                    Update Status\n                </button>\n                <mat-menu #statusMenu=\"matMenu\">\n                    <button mat-menu-item *ngFor=\"let status of orderStatuses\"\n                            [disabled]=\"order.status === status\"\n                            (click)=\"updateStatus(order.id, status)\">\n                        {{status}}\n                    </button>\n                </mat-menu>\n            </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n        <!-- No Data Row -->\n        <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell\" colspan=\"6\">No orders found</td>\n        </tr>\n    </table>\n\n    <mat-paginator\n        [length]=\"(pagination$ | async)?.totalItems\"\n        [pageSize]=\"10\"\n        [pageSizeOptions]=\"[10, 25, 50]\"\n        (page)=\"onPageChange($event)\">\n    </mat-paginator>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 211,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['orderNumber', 'status', 'customer', 'total', 'createdAt', 'actions']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 209
                },
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 215
                },
                {
                    "name": "fromDateFilter",
                    "defaultValue": "new FormControl<Date | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 221
                },
                {
                    "name": "loading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 214
                },
                {
                    "name": "orders$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Order[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 213
                },
                {
                    "name": "orderStatuses",
                    "defaultValue": "Object.values(OrderStatus)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 210
                },
                {
                    "name": "pagination$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 216
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 207,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 219
                },
                {
                    "name": "selection",
                    "defaultValue": "new SelectionModel<Order>(true, [])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 205
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 206,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "statusFilter",
                    "defaultValue": "new FormControl<OrderStatus | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 220
                },
                {
                    "name": "toDateFilter",
                    "defaultValue": "new FormControl<Date | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 222
                }
            ],
            "methodsClass": [
                {
                    "name": "checkboxLabel",
                    "args": [
                        {
                            "name": "row",
                            "type": "Order",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "Order",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAllSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 276,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadOrders",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "masterToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 270,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 299,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortChange",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 290,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateStatus",
                    "args": [
                        {
                            "name": "orderId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newStatus",
                            "type": "OrderStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 294,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orderId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newStatus",
                            "type": "OrderStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatPaginatorModule",
                    "type": "module"
                },
                {
                    "name": "MatSortModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "StatusBadgeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginator, MatPaginatorModule, PageEvent } from '@angular/material/paginator';\r\nimport { MatSort, MatSortModule, Sort } from '@angular/material/sort';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, Subject, combineLatest } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map, takeUntil } from 'rxjs/operators';\r\nimport { OrderActions } from '../../../store/order/order.actions';\r\nimport { selectAllOrders, selectOrdersLoading, selectOrdersError, selectOrderPagination } from '../../../store/order/order.selectors';\r\nimport { StatusBadgeComponent } from 'src/app/shared/components/badges/status-badge.component';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { Order, OrderStatus } from 'src/app/shared/models/order.model';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\n\r\n@Component({\r\n    selector: 'app-order-list',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        MatTableModule,\r\n        MatPaginatorModule,\r\n        MatSortModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatButtonModule,\r\n        MatSelectModule,\r\n        MatDatepickerModule,\r\n        MatMenuModule,\r\n        MatCheckboxModule,\r\n        StatusBadgeComponent\r\n    ],\r\n    template: `\r\n        <div class=\"order-list-container\">\r\n            <!-- Filters -->\r\n            <div class=\"filters-section\">\r\n                <mat-form-field>\r\n                    <mat-label>Search</mat-label>\r\n                    <input matInput [formControl]=\"searchControl\" placeholder=\"Search orders...\">\r\n                </mat-form-field>\r\n\r\n                <mat-form-field>\r\n                    <mat-label>Status</mat-label>\r\n                    <mat-select [formControl]=\"statusFilter\">\r\n                        <mat-option [value]=\"null\">All</mat-option>\r\n                        <mat-option *ngFor=\"let status of orderStatuses\" [value]=\"status\">\r\n                            {{status}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field>\r\n                    <mat-label>From Date</mat-label>\r\n                    <input matInput [matDatepicker]=\"fromPicker\" [formControl]=\"fromDateFilter\">\r\n                    <mat-datepicker-toggle matSuffix [for]=\"fromPicker\"></mat-datepicker-toggle>\r\n                    <mat-datepicker #fromPicker></mat-datepicker>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field>\r\n                    <mat-label>To Date</mat-label>\r\n                    <input matInput [matDatepicker]=\"toPicker\" [formControl]=\"toDateFilter\">\r\n                    <mat-datepicker-toggle matSuffix [for]=\"toPicker\"></mat-datepicker-toggle>\r\n                    <mat-datepicker #toPicker></mat-datepicker>\r\n                </mat-form-field>\r\n            </div>\r\n\r\n            <!-- Orders Table -->\r\n            <table mat-table [dataSource]=\"(orders$ | async) ?? []\" matSort (matSortChange)=\"sortChange($event)\">\r\n                 <!-- Selection Column -->\r\n            <ng-container matColumnDef=\"select\">\r\n                <th mat-header-cell *matHeaderCellDef>\r\n                    <mat-checkbox\r\n                        (change)=\"$event ? masterToggle() : null\"\r\n                        [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                        [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\r\n                        [aria-label]=\"checkboxLabel()\">\r\n                    </mat-checkbox>\r\n                </th>\r\n                <td mat-cell *matCellDef=\"let row\">\r\n                    <mat-checkbox\r\n                        (click)=\"$event.stopPropagation()\"\r\n                        (change)=\"$event ? selection.toggle(row) : null\"\r\n                        [checked]=\"selection.isSelected(row)\"\r\n                        [aria-label]=\"checkboxLabel(row)\">\r\n                    </mat-checkbox>\r\n                </td>\r\n            </ng-container>\r\n                <!-- Order Number Column -->\r\n                <ng-container matColumnDef=\"orderNumber\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>Order #</th>\r\n                    <td mat-cell *matCellDef=\"let order\">{{order.orderNumber}}</td>\r\n                </ng-container>\r\n\r\n                <!-- Status Column -->\r\n                <ng-container matColumnDef=\"status\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>Status</th>\r\n                    <td mat-cell *matCellDef=\"let order\">\r\n                        <app-status-badge [status]=\"order.status\"></app-status-badge>\r\n                    </td>\r\n                </ng-container>\r\n\r\n                <!-- Customer Column -->\r\n                <ng-container matColumnDef=\"customer\">\r\n                    <th mat-header-cell *matHeaderCellDef>Customer</th>\r\n                    <td mat-cell *matCellDef=\"let order\">\r\n                        {{order.customerName}}\r\n                    </td>\r\n                </ng-container>\r\n\r\n                <!-- Total Column -->\r\n                <ng-container matColumnDef=\"total\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>Total</th>\r\n                    <td mat-cell *matCellDef=\"let order\">\r\n                        {{order.total | currency:order.currency}}\r\n                    </td>\r\n                </ng-container>\r\n\r\n                <!-- Date Column -->\r\n                <ng-container matColumnDef=\"createdAt\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>Date</th>\r\n                    <td mat-cell *matCellDef=\"let order\">\r\n                        {{order.createdAt | date:'short'}}\r\n                    </td>\r\n                </ng-container>\r\n\r\n                <!-- Actions Column -->\r\n                <ng-container matColumnDef=\"actions\">\r\n                    <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n                    <td mat-cell *matCellDef=\"let order\">\r\n                        <button mat-button [matMenuTriggerFor]=\"statusMenu\">\r\n                            Update Status\r\n                        </button>\r\n                        <mat-menu #statusMenu=\"matMenu\">\r\n                            <button mat-menu-item *ngFor=\"let status of orderStatuses\"\r\n                                    [disabled]=\"order.status === status\"\r\n                                    (click)=\"updateStatus(order.id, status)\">\r\n                                {{status}}\r\n                            </button>\r\n                        </mat-menu>\r\n                    </td>\r\n                </ng-container>\r\n\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n                <!-- No Data Row -->\r\n                <tr class=\"mat-row\" *matNoDataRow>\r\n                    <td class=\"mat-cell\" colspan=\"6\">No orders found</td>\r\n                </tr>\r\n            </table>\r\n\r\n            <mat-paginator \r\n                [length]=\"(pagination$ | async)?.totalItems\"\r\n                [pageSize]=\"10\"\r\n                [pageSizeOptions]=\"[10, 25, 50]\"\r\n                (page)=\"onPageChange($event)\">\r\n            </mat-paginator>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .order-list-container {\r\n            padding: 1rem;\r\n        }\r\n\r\n        .filters-section {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n            gap: 1rem;\r\n            margin-bottom: 1rem;\r\n        }\r\n\r\n        table {\r\n            width: 100%;\r\n        }\r\n\r\n        .mat-column-actions {\r\n            width: 100px;\r\n            text-align: center;\r\n        }\r\n\r\n        .mat-column-status {\r\n            width: 120px;\r\n        }\r\n\r\n        .mat-column-total {\r\n            width: 120px;\r\n            text-align: right;\r\n        }\r\n\r\n        .mat-column-createdAt {\r\n            width: 150px;\r\n        }\r\n    `]\r\n})\r\nexport class OrderListComponent implements OnInit, OnDestroy {\r\n    selection = new SelectionModel<Order>(true, []);\r\n    @ViewChild(MatSort) sort!: MatSort;\r\n    @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n\r\n    displayedColumns = ['orderNumber', 'status', 'customer', 'total', 'createdAt', 'actions'];\r\n    orderStatuses = Object.values(OrderStatus);\r\n    private destroy$ = new Subject<void>();\r\n\r\n    orders$: Observable<Order[]>;\r\n    loading$: Observable<boolean>;\r\n    error$: Observable<string | null>;\r\n    pagination$: Observable<any>;\r\n\r\n    // Filters\r\n    searchControl = new FormControl('');\r\n    statusFilter = new FormControl<OrderStatus | null>(null);\r\n    fromDateFilter = new FormControl<Date | null>(null);\r\n    toDateFilter = new FormControl<Date | null>(null);\r\n\r\n    constructor(private readonly store: Store) {\r\n        this.orders$ = this.store.select(selectAllOrders);\r\n        this.loading$ = this.store.select(selectOrdersLoading);\r\n        this.error$ = this.store.select(selectOrdersError);\r\n        this.pagination$ = this.store.select(selectOrderPagination);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initializeFilters();\r\n        this.loadOrders();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    private initializeFilters() {\r\n        combineLatest([\r\n            this.searchControl.valueChanges,\r\n            this.statusFilter.valueChanges,\r\n            this.fromDateFilter.valueChanges,\r\n            this.toDateFilter.valueChanges\r\n        ]).pipe(\r\n            debounceTime(300),\r\n            distinctUntilChanged(),\r\n            takeUntil(this.destroy$)\r\n        ).subscribe(() => {\r\n            this.loadOrders();\r\n        });\r\n    }\r\n\r\n    private loadOrders() {\r\n        const filters = {\r\n            searchTerm: this.searchControl.value || undefined,\r\n            status: this.statusFilter.value || undefined,\r\n            fromDate: this.fromDateFilter.value?.toISOString() || undefined,\r\n            toDate: this.toDateFilter.value?.toISOString() || undefined,\r\n            page: this.paginator?.pageIndex ? this.paginator.pageIndex + 1 : 1,\r\n            pageSize: this.paginator?.pageSize || 10,\r\n            sortBy: this.sort?.active,\r\n            sortDirection: this.sort?.direction || undefined\r\n        };\r\n\r\n        this.store.dispatch(OrderActions.loadOrders({ params: filters }));\r\n    }\r\n    masterToggle() {\r\n        this.isAllSelected() ?\r\n            this.selection.clear() :\r\n            this.orders$.subscribe(orders => orders.forEach(order => this.selection.select(order)));\r\n    }\r\n\r\n    isAllSelected() {\r\n        const numSelected = this.selection.selected.length;\r\n        let numRows = 0;\r\n        this.orders$.pipe(map(orders => orders.length)).subscribe(length => numRows = length);\r\n        return numSelected === numRows;\r\n    }\r\n\r\n    checkboxLabel(row?: Order): string {\r\n        if (!row) {\r\n            return `${this.isAllSelected() ? 'select' : 'deselect'} all`;\r\n        }\r\n        return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.orderNumber}`;\r\n    }\r\n\r\n    sortChange(sort: Sort) {\r\n        this.loadOrders();\r\n    }\r\n\r\n    updateStatus(orderId: string, newStatus: OrderStatus) {\r\n        this.store.dispatch(OrderActions.updateStatus({ orderId, newStatus }));\r\n    }\r\n\r\n\r\n    onPageChange(event: PageEvent) {\r\n        this.loadOrders();\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        .order-list-container {\n            padding: 1rem;\n        }\n\n        .filters-section {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 1rem;\n            margin-bottom: 1rem;\n        }\n\n        table {\n            width: 100%;\n        }\n\n        .mat-column-actions {\n            width: 100px;\n            text-align: center;\n        }\n\n        .mat-column-status {\n            width: 120px;\n        }\n\n        .mat-column-total {\n            width: 120px;\n            text-align: right;\n        }\n\n        .mat-column-createdAt {\n            width: 150px;\n        }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 222,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ProductImageManagerComponent",
            "id": "component-ProductImageManagerComponent-f0103e3a150b60d072a79e8c3e7445e42675f30896dce52ef108e215672308f896d9b6cf7dbc9cdabba89ece74a32f3e6bae328362408ddd09dae936162736c4",
            "file": "src/app/features/products/product-image-manager/product-image-manager.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-image-manager",
            "styleUrls": [],
            "styles": [
                "\n    .image-manager-container {\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n      margin-bottom: 1.5rem;\n    }\n    \n    .upload-area {\n      border: 2px dashed #ccc;\n      border-radius: 8px;\n      padding: 2rem;\n      text-align: center;\n      transition: all 0.2s ease;\n      cursor: pointer;\n    }\n    \n    .upload-area.dragover {\n      border-color: #3f51b5;\n      background-color: rgba(63, 81, 181, 0.05);\n    }\n    \n    .upload-prompt {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 0.5rem;\n      margin-bottom: 1rem;\n    }\n    \n    .upload-prompt mat-icon {\n      font-size: 48px;\n      width: 48px;\n      height: 48px;\n      color: #3f51b5;\n    }\n    \n    .upload-info p {\n      margin: 0.25rem 0;\n      color: #666;\n      font-size: 0.875rem;\n    }\n    \n    .upload-progress {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      gap: 0.5rem;\n    }\n    \n    .spin {\n      animation: spin 1.5s linear infinite;\n    }\n    \n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n    \n    .image-preview-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n      gap: 1rem;\n      margin-top: 1rem;\n    }\n    \n    .image-preview {\n      border-radius: 8px;\n      overflow: hidden;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      transition: all 0.2s ease;\n      background-color: white;\n    }\n    \n    .image-preview.primary {\n      border: 2px solid #3f51b5;\n    }\n    \n    .image-wrapper {\n      position: relative;\n      aspect-ratio: 1;\n    }\n    \n    .image-wrapper img {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n    \n    .primary-indicator {\n      position: absolute;\n      top: 0.5rem;\n      left: 0.5rem;\n      background-color: #3f51b5;\n      color: white;\n      font-size: 0.75rem;\n      padding: 0.25rem 0.5rem;\n      border-radius: 4px;\n      display: flex;\n      align-items: center;\n      gap: 0.25rem;\n    }\n    \n    .primary-indicator mat-icon {\n      font-size: 16px;\n      width: 16px;\n      height: 16px;\n    }\n    \n    .image-actions {\n      position: absolute;\n      top: 0.5rem;\n      right: 0.5rem;\n      opacity: 0;\n      transition: opacity 0.2s ease;\n    }\n    \n    .image-wrapper:hover .image-actions {\n      opacity: 1;\n    }\n    \n    .image-info {\n      padding: 0.5rem;\n      display: flex;\n      flex-direction: column;\n      font-size: 0.75rem;\n    }\n    \n    .file-name {\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n    \n    .file-size {\n      color: #666;\n    }\n    \n    .help-text {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      font-size: 0.875rem;\n      color: #666;\n      margin-top: 0.5rem;\n    }\n    \n    .cdk-drag-preview {\n      box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n    }\n    \n    .cdk-drag-placeholder {\n      opacity: 0.3;\n    }\n    \n    .cdk-drag-animating {\n      transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n    }\n  "
            ],
            "template": "<div class=\"image-manager-container\">\n  <h3>Product Images</h3>\n\n  <!-- Image upload area -->\n  <div\n    class=\"upload-area\"\n    [class.dragover]=\"isDragging\"\n    (dragover)=\"onDragOver($event)\"\n    (dragleave)=\"onDragLeave($event)\"\n    (drop)=\"onDrop($event)\">\n\n    <div class=\"upload-prompt\">\n      <mat-icon>cloud_upload</mat-icon>\n      <p>Drag & drop images here or</p>\n      <button\n        mat-stroked-button\n        color=\"primary\"\n        (click)=\"fileInput.click()\">\n        Browse Files\n      </button>\n      <input\n        #fileInput\n        type=\"file\"\n        multiple\n        accept=\"image/*\"\n        style=\"display: none\"\n        (change)=\"onFileSelected($event)\">\n    </div>\n\n    <div class=\"upload-info\" *ngIf=\"!isUploading\">\n      <p>Maximum 10 images. Supported formats: JPG, PNG, WEBP</p>\n      <p>Maximum file size: 5MB</p>\n    </div>\n\n    <div class=\"upload-progress\" *ngIf=\"isUploading\">\n      <mat-icon class=\"spin\">sync</mat-icon>\n      <p>Uploading {{ uploadProgress }}%</p>\n    </div>\n  </div>\n\n  <!-- Image preview and management area -->\n  <div\n    cdkDropList\n    class=\"image-preview-grid\"\n    (cdkDropListDropped)=\"drop($event)\"\n    *ngIf=\"images.length > 0\">\n\n    <div\n      *ngFor=\"let image of images; let i = index\"\n      class=\"image-preview\"\n      cdkDrag\n      [class.primary]=\"i === 0\">\n\n      <div class=\"image-wrapper\">\n        <img [src]=\"image.url\" [alt]=\"image.fileName\">\n\n        <!-- Primary badge -->\n        <div class=\"primary-indicator\" *ngIf=\"i === 0\">\n          <mat-icon>star</mat-icon>\n          <span>Primary</span>\n        </div>\n\n        <!-- Image actions -->\n        <div class=\"image-actions\">\n          <button\n            mat-icon-button\n            [matMenuTriggerFor]=\"menu\"\n            color=\"primary\">\n            <mat-icon>more_vert</mat-icon>\n          </button>\n\n          <mat-menu #menu=\"matMenu\">\n            <button\n              mat-menu-item\n              *ngIf=\"i !== 0\"\n              (click)=\"setAsPrimary(i)\">\n              <mat-icon>star</mat-icon>\n              <span>Set as Primary</span>\n            </button>\n            <button\n              mat-menu-item\n              (click)=\"editImageDetails(image, i)\">\n              <mat-icon>edit</mat-icon>\n              <span>Edit Details</span>\n            </button>\n            <button\n              mat-menu-item\n              (click)=\"removeImage(i)\">\n              <mat-icon>delete</mat-icon>\n              <span>Remove</span>\n            </button>\n          </mat-menu>\n        </div>\n      </div>\n\n      <div class=\"image-info\">\n        <span class=\"file-name\">{{ image.fileName }}</span>\n        <span class=\"file-size\">{{ formatFileSize(image.size) }}</span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"help-text\" *ngIf=\"images.length > 0\">\n    <mat-icon>info</mat-icon>\n    <span>Drag images to reorder. The first image will be used as the primary product image.</span>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "images",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 295,
                    "type": "ProductImage[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "imagesChange",
                    "defaultValue": "new EventEmitter<ProductImage[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 296,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 302,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isDragging",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 298
                },
                {
                    "name": "isUploading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 299
                },
                {
                    "name": "uploadProgress",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 300
                }
            ],
            "methodsClass": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<ProductImage[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 427,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<ProductImage[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editImageDetails",
                    "args": [
                        {
                            "name": "image",
                            "type": "ProductImage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 443,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "image",
                            "type": "ProductImage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatFileSize",
                    "args": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 462,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFiles",
                    "args": [
                        {
                            "name": "files",
                            "type": "FileList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 345,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "FileList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 311,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDragLeave",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 322,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 316,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 328,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFileSelected",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 338,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeImage",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 455,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAsPrimary",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 432,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "DragDropModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnInit, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { DragDropModule, CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { of, Subject } from 'rxjs';\r\nimport { takeUntil, finalize, catchError } from 'rxjs/operators';\r\nimport { ErrorService } from 'src/app/core/services/error.service';\r\nimport { ProductService } from 'src/app/core/services/product.service';\r\nimport { ProductImage } from 'src/app/shared/models/product.model';\r\n@Component({\r\n  selector: 'app-product-image-manager',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    MatTooltipModule,\r\n    DragDropModule\r\n  ],\r\n  template: `\r\n    <div class=\"image-manager-container\">\r\n      <h3>Product Images</h3>\r\n      \r\n      <!-- Image upload area -->\r\n      <div \r\n        class=\"upload-area\" \r\n        [class.dragover]=\"isDragging\"\r\n        (dragover)=\"onDragOver($event)\"\r\n        (dragleave)=\"onDragLeave($event)\"\r\n        (drop)=\"onDrop($event)\">\r\n        \r\n        <div class=\"upload-prompt\">\r\n          <mat-icon>cloud_upload</mat-icon>\r\n          <p>Drag & drop images here or</p>\r\n          <button \r\n            mat-stroked-button \r\n            color=\"primary\" \r\n            (click)=\"fileInput.click()\">\r\n            Browse Files\r\n          </button>\r\n          <input \r\n            #fileInput \r\n            type=\"file\" \r\n            multiple \r\n            accept=\"image/*\" \r\n            style=\"display: none\"\r\n            (change)=\"onFileSelected($event)\">\r\n        </div>\r\n        \r\n        <div class=\"upload-info\" *ngIf=\"!isUploading\">\r\n          <p>Maximum 10 images. Supported formats: JPG, PNG, WEBP</p>\r\n          <p>Maximum file size: 5MB</p>\r\n        </div>\r\n        \r\n        <div class=\"upload-progress\" *ngIf=\"isUploading\">\r\n          <mat-icon class=\"spin\">sync</mat-icon>\r\n          <p>Uploading {{ uploadProgress }}%</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Image preview and management area -->\r\n      <div \r\n        cdkDropList \r\n        class=\"image-preview-grid\" \r\n        (cdkDropListDropped)=\"drop($event)\"\r\n        *ngIf=\"images.length > 0\">\r\n        \r\n        <div \r\n          *ngFor=\"let image of images; let i = index\" \r\n          class=\"image-preview\" \r\n          cdkDrag\r\n          [class.primary]=\"i === 0\">\r\n          \r\n          <div class=\"image-wrapper\">\r\n            <img [src]=\"image.url\" [alt]=\"image.fileName\">\r\n            \r\n            <!-- Primary badge -->\r\n            <div class=\"primary-indicator\" *ngIf=\"i === 0\">\r\n              <mat-icon>star</mat-icon>\r\n              <span>Primary</span>\r\n            </div>\r\n            \r\n            <!-- Image actions -->\r\n            <div class=\"image-actions\">\r\n              <button \r\n                mat-icon-button \r\n                [matMenuTriggerFor]=\"menu\"\r\n                color=\"primary\">\r\n                <mat-icon>more_vert</mat-icon>\r\n              </button>\r\n              \r\n              <mat-menu #menu=\"matMenu\">\r\n                <button \r\n                  mat-menu-item \r\n                  *ngIf=\"i !== 0\"\r\n                  (click)=\"setAsPrimary(i)\">\r\n                  <mat-icon>star</mat-icon>\r\n                  <span>Set as Primary</span>\r\n                </button>\r\n                <button \r\n                  mat-menu-item\r\n                  (click)=\"editImageDetails(image, i)\">\r\n                  <mat-icon>edit</mat-icon>\r\n                  <span>Edit Details</span>\r\n                </button>\r\n                <button \r\n                  mat-menu-item\r\n                  (click)=\"removeImage(i)\">\r\n                  <mat-icon>delete</mat-icon>\r\n                  <span>Remove</span>\r\n                </button>\r\n              </mat-menu>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"image-info\">\r\n            <span class=\"file-name\">{{ image.fileName }}</span>\r\n            <span class=\"file-size\">{{ formatFileSize(image.size) }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"help-text\" *ngIf=\"images.length > 0\">\r\n        <mat-icon>info</mat-icon>\r\n        <span>Drag images to reorder. The first image will be used as the primary product image.</span>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .image-manager-container {\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 1rem;\r\n      margin-bottom: 1.5rem;\r\n    }\r\n    \r\n    .upload-area {\r\n      border: 2px dashed #ccc;\r\n      border-radius: 8px;\r\n      padding: 2rem;\r\n      text-align: center;\r\n      transition: all 0.2s ease;\r\n      cursor: pointer;\r\n    }\r\n    \r\n    .upload-area.dragover {\r\n      border-color: #3f51b5;\r\n      background-color: rgba(63, 81, 181, 0.05);\r\n    }\r\n    \r\n    .upload-prompt {\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      gap: 0.5rem;\r\n      margin-bottom: 1rem;\r\n    }\r\n    \r\n    .upload-prompt mat-icon {\r\n      font-size: 48px;\r\n      width: 48px;\r\n      height: 48px;\r\n      color: #3f51b5;\r\n    }\r\n    \r\n    .upload-info p {\r\n      margin: 0.25rem 0;\r\n      color: #666;\r\n      font-size: 0.875rem;\r\n    }\r\n    \r\n    .upload-progress {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      gap: 0.5rem;\r\n    }\r\n    \r\n    .spin {\r\n      animation: spin 1.5s linear infinite;\r\n    }\r\n    \r\n    @keyframes spin {\r\n      0% { transform: rotate(0deg); }\r\n      100% { transform: rotate(360deg); }\r\n    }\r\n    \r\n    .image-preview-grid {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\r\n      gap: 1rem;\r\n      margin-top: 1rem;\r\n    }\r\n    \r\n    .image-preview {\r\n      border-radius: 8px;\r\n      overflow: hidden;\r\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n      transition: all 0.2s ease;\r\n      background-color: white;\r\n    }\r\n    \r\n    .image-preview.primary {\r\n      border: 2px solid #3f51b5;\r\n    }\r\n    \r\n    .image-wrapper {\r\n      position: relative;\r\n      aspect-ratio: 1;\r\n    }\r\n    \r\n    .image-wrapper img {\r\n      width: 100%;\r\n      height: 100%;\r\n      object-fit: cover;\r\n    }\r\n    \r\n    .primary-indicator {\r\n      position: absolute;\r\n      top: 0.5rem;\r\n      left: 0.5rem;\r\n      background-color: #3f51b5;\r\n      color: white;\r\n      font-size: 0.75rem;\r\n      padding: 0.25rem 0.5rem;\r\n      border-radius: 4px;\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.25rem;\r\n    }\r\n    \r\n    .primary-indicator mat-icon {\r\n      font-size: 16px;\r\n      width: 16px;\r\n      height: 16px;\r\n    }\r\n    \r\n    .image-actions {\r\n      position: absolute;\r\n      top: 0.5rem;\r\n      right: 0.5rem;\r\n      opacity: 0;\r\n      transition: opacity 0.2s ease;\r\n    }\r\n    \r\n    .image-wrapper:hover .image-actions {\r\n      opacity: 1;\r\n    }\r\n    \r\n    .image-info {\r\n      padding: 0.5rem;\r\n      display: flex;\r\n      flex-direction: column;\r\n      font-size: 0.75rem;\r\n    }\r\n    \r\n    .file-name {\r\n      white-space: nowrap;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n    }\r\n    \r\n    .file-size {\r\n      color: #666;\r\n    }\r\n    \r\n    .help-text {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.5rem;\r\n      font-size: 0.875rem;\r\n      color: #666;\r\n      margin-top: 0.5rem;\r\n    }\r\n    \r\n    .cdk-drag-preview {\r\n      box-shadow: 0 5px 15px rgba(0,0,0,0.2);\r\n    }\r\n    \r\n    .cdk-drag-placeholder {\r\n      opacity: 0.3;\r\n    }\r\n    \r\n    .cdk-drag-animating {\r\n      transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\r\n    }\r\n  `]\r\n})\r\nexport class ProductImageManagerComponent implements OnInit, OnDestroy {\r\n  @Input() images: ProductImage[] = [];\r\n  @Output() imagesChange = new EventEmitter<ProductImage[]>();\r\n\r\n  isDragging = false;\r\n  isUploading = false;\r\n  uploadProgress = 0;\r\n\r\n  private destroy$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private productService: ProductService,\r\n    private errorService: ErrorService\r\n  ) { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  onDragOver(event: DragEvent): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.isDragging = true;\r\n  }\r\n\r\n  onDragLeave(event: DragEvent): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.isDragging = false;\r\n  }\r\n\r\n  onDrop(event: DragEvent): void {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.isDragging = false;\r\n\r\n    if (event.dataTransfer?.files) {\r\n      this.handleFiles(event.dataTransfer.files);\r\n    }\r\n  }\r\n\r\n  onFileSelected(event: Event): void {\r\n    const input = event.target as HTMLInputElement;\r\n    if (input.files?.length) {\r\n      this.handleFiles(input.files);\r\n    }\r\n  }\r\n\r\n  handleFiles(files: FileList): void {\r\n    // Filter for images and check size limits\r\n    const validFiles: File[] = [];\r\n    const maxSize = 5 * 1024 * 1024; // 5MB\r\n    const maxImages = 10;\r\n    const availableSlots = maxImages - this.images.length;\r\n\r\n    if (availableSlots <= 0) {\r\n      this.errorService.addError({\r\n        code: 'IMAGES_LIMIT_EXCEEDED',\r\n        message: 'Maximum of 10 images allowed per product',\r\n        severity: 'warning'\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Validate files\r\n    for (let i = 0; i < Math.min(files.length, availableSlots); i++) {\r\n      const file = files[i];\r\n\r\n      // Check mime type\r\n      if (!file.type.startsWith('image/')) {\r\n        this.errorService.addError({\r\n          code: 'INVALID_FILE_TYPE',\r\n          message: `${file.name} is not a valid image file`,\r\n          severity: 'warning'\r\n        });\r\n        continue;\r\n      }\r\n\r\n      // Check file size\r\n      if (file.size > maxSize) {\r\n        this.errorService.addError({\r\n          code: 'FILE_TOO_LARGE',\r\n          message: `${file.name} exceeds the 5MB size limit`,\r\n          severity: 'warning'\r\n        });\r\n        continue;\r\n      }\r\n\r\n      validFiles.push(file);\r\n    }\r\n\r\n    if (validFiles.length === 0) return;\r\n\r\n    // Upload valid files\r\n    this.isUploading = true;\r\n    this.uploadProgress = 0;\r\n\r\n    // Simulate progress updates\r\n    const progressInterval = setInterval(() => {\r\n      if (this.uploadProgress < 90) {\r\n        this.uploadProgress += 10;\r\n      }\r\n    }, 300);\r\n\r\n    this.productService.uploadImages(validFiles)\r\n      .pipe(\r\n        takeUntil(this.destroy$),\r\n        finalize(() => {\r\n          clearInterval(progressInterval);\r\n          this.isUploading = false;\r\n          this.uploadProgress = 0;\r\n        }),\r\n        catchError(error => {\r\n          this.errorService.addError({\r\n            code: 'UPLOAD_FAILED',\r\n            message: 'Failed to upload images. Please try again.',\r\n            severity: 'error'\r\n          });\r\n          return of([]);\r\n        })\r\n      )\r\n      .subscribe(uploadedImages => {\r\n        if (uploadedImages.length > 0) {\r\n          const updatedImages = [...this.images, ...uploadedImages];\r\n          this.images = updatedImages;\r\n          this.imagesChange.emit(updatedImages);\r\n        }\r\n      });\r\n  }\r\n\r\n  drop(event: CdkDragDrop<ProductImage[]>): void {\r\n    moveItemInArray(this.images, event.previousIndex, event.currentIndex);\r\n    this.imagesChange.emit([...this.images]);\r\n  }\r\n\r\n  setAsPrimary(index: number): void {\r\n    if (index === 0 || index >= this.images.length) return;\r\n\r\n    // Move the selected image to the front\r\n    const image = this.images[index];\r\n    this.images.splice(index, 1);\r\n    this.images.unshift(image);\r\n\r\n    this.imagesChange.emit([...this.images]);\r\n  }\r\n\r\n  editImageDetails(image: ProductImage, index: number): void {\r\n    // This would typically open a dialog to edit alt text and other metadata\r\n    // For now, we'll just update a placeholder value\r\n    const updatedImage = {\r\n      ...image,\r\n      alt: prompt('Enter alt text for this image:', image.alt) || image.alt\r\n    };\r\n\r\n    this.images[index] = updatedImage;\r\n    this.imagesChange.emit([...this.images]);\r\n  }\r\n\r\n  removeImage(index: number): void {\r\n    if (index < 0 || index >= this.images.length) return;\r\n\r\n    this.images.splice(index, 1);\r\n    this.imagesChange.emit([...this.images]);\r\n  }\r\n\r\n  formatFileSize(bytes: number): string {\r\n    if (bytes < 1024) return bytes + ' B';\r\n    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';\r\n    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .image-manager-container {\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n      margin-bottom: 1.5rem;\n    }\n    \n    .upload-area {\n      border: 2px dashed #ccc;\n      border-radius: 8px;\n      padding: 2rem;\n      text-align: center;\n      transition: all 0.2s ease;\n      cursor: pointer;\n    }\n    \n    .upload-area.dragover {\n      border-color: #3f51b5;\n      background-color: rgba(63, 81, 181, 0.05);\n    }\n    \n    .upload-prompt {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 0.5rem;\n      margin-bottom: 1rem;\n    }\n    \n    .upload-prompt mat-icon {\n      font-size: 48px;\n      width: 48px;\n      height: 48px;\n      color: #3f51b5;\n    }\n    \n    .upload-info p {\n      margin: 0.25rem 0;\n      color: #666;\n      font-size: 0.875rem;\n    }\n    \n    .upload-progress {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      gap: 0.5rem;\n    }\n    \n    .spin {\n      animation: spin 1.5s linear infinite;\n    }\n    \n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n    \n    .image-preview-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n      gap: 1rem;\n      margin-top: 1rem;\n    }\n    \n    .image-preview {\n      border-radius: 8px;\n      overflow: hidden;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      transition: all 0.2s ease;\n      background-color: white;\n    }\n    \n    .image-preview.primary {\n      border: 2px solid #3f51b5;\n    }\n    \n    .image-wrapper {\n      position: relative;\n      aspect-ratio: 1;\n    }\n    \n    .image-wrapper img {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n    \n    .primary-indicator {\n      position: absolute;\n      top: 0.5rem;\n      left: 0.5rem;\n      background-color: #3f51b5;\n      color: white;\n      font-size: 0.75rem;\n      padding: 0.25rem 0.5rem;\n      border-radius: 4px;\n      display: flex;\n      align-items: center;\n      gap: 0.25rem;\n    }\n    \n    .primary-indicator mat-icon {\n      font-size: 16px;\n      width: 16px;\n      height: 16px;\n    }\n    \n    .image-actions {\n      position: absolute;\n      top: 0.5rem;\n      right: 0.5rem;\n      opacity: 0;\n      transition: opacity 0.2s ease;\n    }\n    \n    .image-wrapper:hover .image-actions {\n      opacity: 1;\n    }\n    \n    .image-info {\n      padding: 0.5rem;\n      display: flex;\n      flex-direction: column;\n      font-size: 0.75rem;\n    }\n    \n    .file-name {\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n    \n    .file-size {\n      color: #666;\n    }\n    \n    .help-text {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      font-size: 0.875rem;\n      color: #666;\n      margin-top: 0.5rem;\n    }\n    \n    .cdk-drag-preview {\n      box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n    }\n    \n    .cdk-drag-placeholder {\n      opacity: 0.3;\n    }\n    \n    .cdk-drag-animating {\n      transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 302,
                "jsdoctags": [
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "ProductListComponent",
            "id": "component-ProductListComponent-743e9d22f0cb58bb85492136abc5dc6bcc87705b1dcc172128e8dd3e92a7ae50ecbddcb114aa1feaff0cad7c152df0d21b0100fd2d512670e12a173ae7b4b542",
            "file": "src/app/features/products/product-list/product-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./product-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "signal<{ id: string, name: string }[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "categoryFilter",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['image', 'name', 'category', 'price', 'stock', 'actions']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "inStockFilter",
                    "defaultValue": "new FormControl(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "loading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "maxPriceFilter",
                    "defaultValue": "new FormControl<number | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "minPriceFilter",
                    "defaultValue": "new FormControl<number | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "pagination$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "paginator",
                    "defaultValue": "viewChild.required(MatPaginator)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "products$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Product[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "sort",
                    "defaultValue": "viewChild.required(MatSort)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearPriceFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 267,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears only the price-related filters\n",
                    "description": "<p>Clears only the price-related filters</p>\n"
                },
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 284,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 295,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "{ search: any; categoryId: any; minPrice: any; maxPrice: any; inStock: any; page: any; pageSize: any; sortColumn: keyof Product; sortDirection: any; }",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPriceFilterLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns a formatted string representing the current price filter range\n",
                    "description": "<p>Returns a formatted string representing the current price filter range</p>\n"
                },
                {
                    "name": "hasActiveFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if any filter is currently active\n",
                    "description": "<p>Checks if any filter is currently active</p>\n"
                },
                {
                    "name": "initializeFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadProducts",
                    "args": [
                        {
                            "name": "filters",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.getCurrentFilters()"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.getCurrentFilters()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openImagePreview",
                    "args": [
                        {
                            "name": "imageUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "imageUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sortChange",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatSortModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltip"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "MatPaginatorModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressSpinner"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "StockManagementComponent",
                    "type": "component"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, signal, viewChild } from '@angular/core';\r\nimport { CommonModule, NgIf } from '@angular/common';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router, RouterLink, RouterModule } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, Subject, combineLatest } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, takeUntil, startWith } from 'rxjs/operators';\r\nimport { Product } from '../../../shared/models/product.model';\r\nimport { ProductActions } from '../../../store/product/product.actions';\r\nimport {\r\n    selectAllProducts,\r\n    selectProductsLoading,\r\n    selectProductsError,\r\n    selectProductPagination\r\n} from '../../../store/product/product.selectors';\r\nimport { DialogService } from '../../../core/services/dialog.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { EditProductDialogComponent } from '../../../shared/components/dialog/edit-product-dialog/edit-product-dialog.component';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatSort, MatSortModule, Sort } from '@angular/material/sort';\r\nimport { MatPaginator, MatPaginatorModule, PageEvent } from '@angular/material/paginator';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { ProductService } from 'src/app/core/services/product.service';\r\nimport { ErrorService } from 'src/app/core/services/error.service';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { StockActions } from 'src/app/store/stock/stock.actions';\r\nimport { StockManagementComponent } from '../components/stock-management/stock-management.component';\r\nimport { MatProgressSpinner } from '@angular/material/progress-spinner';\r\nimport { MatTooltip } from '@angular/material/tooltip';\r\nimport { ImagePreviewDialogComponent } from './image-preview-dialog.component';\r\n\r\n@Component({\r\n    selector: 'app-product-list',\r\n    templateUrl: './product-list.component.html',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        MatTableModule,\r\n        MatSortModule,\r\n        MatTooltip,\r\n        NgIf,\r\n        MatPaginatorModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatButtonModule,\r\n        MatCheckboxModule,\r\n        MatSelectModule,\r\n        MatProgressSpinner,\r\n        MatIconModule,\r\n        StockManagementComponent,\r\n        RouterModule\r\n    ]\r\n})\r\nexport class ProductListComponent implements OnInit, OnDestroy {\r\n    readonly sort = viewChild.required(MatSort);\r\n    readonly paginator = viewChild.required(MatPaginator);\r\n\r\n    displayedColumns = ['image', 'name', 'category', 'price', 'stock', 'actions'];\r\n    private readonly destroy$ = new Subject<void>();\r\n\r\n    products$: Observable<Product[]>;\r\n    loading$: Observable<boolean>;\r\n    error$: Observable<string | null>;\r\n    pagination$: Observable<any>;\r\n\r\n    // Form Controls\r\n    searchControl = new FormControl('');\r\n    categoryFilter = new FormControl('');\r\n    minPriceFilter = new FormControl<number | null>(null);\r\n    maxPriceFilter = new FormControl<number | null>(null);\r\n    inStockFilter = new FormControl(false);\r\n\r\n    categories = signal<{ id: string, name: string }[]>([]);\r\n\r\n    constructor(\r\n        private readonly store: Store,\r\n        private readonly dialogService: DialogService,\r\n        private readonly matDialog: MatDialog,\r\n        private readonly productService: ProductService,\r\n        private readonly errorService: ErrorService\r\n    ) {\r\n        this.products$ = this.store.select(selectAllProducts);\r\n        this.loading$ = this.store.select(selectProductsLoading);\r\n        this.error$ = this.store.select(selectProductsError);\r\n        this.pagination$ = this.store.select(selectProductPagination);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initializeFilters();\r\n        this.loadCategories();\r\n        this.products$.pipe(takeUntil(this.destroy$)).subscribe(products => {\r\n            products.forEach(product => {\r\n                this.store.dispatch(StockActions.loadStock({ productId: product.id }));\r\n            });\r\n        });\r\n        this.loadProducts();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    private initializeFilters() {\r\n        combineLatest([\r\n            this.searchControl.valueChanges.pipe(startWith('')),\r\n            this.categoryFilter.valueChanges.pipe(startWith('')),\r\n            this.minPriceFilter.valueChanges.pipe(startWith(null)),\r\n            this.maxPriceFilter.valueChanges.pipe(startWith(null)),\r\n            this.inStockFilter.valueChanges.pipe(startWith(false))\r\n        ]).pipe(\r\n            debounceTime(300),\r\n            distinctUntilChanged((prev, curr) => JSON.stringify(prev) === JSON.stringify(curr)),\r\n            takeUntil(this.destroy$)\r\n        ).subscribe(([search, category, minPrice, maxPrice, inStock]) => {\r\n            const paginator = this.paginator();\r\n            const sort = this.sort();\r\n            const filters = {\r\n                search: search ?? '',\r\n                categoryId: category ?? undefined,\r\n                minPrice: minPrice ?? null,\r\n                maxPrice: maxPrice ?? null,\r\n                inStock: inStock || undefined,\r\n                page: paginator?.pageIndex ? paginator.pageIndex + 1 : 1,\r\n                pageSize: this.paginator()?.pageSize || 10,\r\n                sortColumn: sort?.active as keyof Product,\r\n                sortDirection: sort?.direction || undefined\r\n            };\r\n\r\n            this.store.dispatch(ProductActions.setFilters({ filters }));\r\n            this.loadProducts(filters);\r\n        });\r\n    }\r\n\r\n    private loadCategories() {\r\n        this.productService.getCategories().subscribe({\r\n            next: (categories) => this.categories.set(categories),\r\n            error: (error) => {\r\n                this.errorService.addError({\r\n                    code: '',\r\n                    message: 'Failed to load categories',\r\n                    severity: 'error'\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    sortChange(sort: Sort) {\r\n        const filters = {\r\n            sortColumn: sort.active as keyof Product,\r\n            sortDirection: sort.direction || undefined\r\n        };\r\n\r\n        this.store.dispatch(ProductActions.setFilters({ filters }));\r\n        this.loadProducts({\r\n            ...this.getCurrentFilters(),\r\n            ...filters\r\n        });\r\n    }\r\n\r\n    onPageChange(event: PageEvent) {\r\n        const filters = {\r\n            page: event.pageIndex + 1,\r\n            pageSize: event.pageSize\r\n        };\r\n\r\n        this.store.dispatch(ProductActions.setFilters({ filters }));\r\n        this.loadProducts({\r\n            ...this.getCurrentFilters(),\r\n            ...filters\r\n        });\r\n    }\r\n\r\n    private getCurrentFilters() {\r\n        const paginator = this.paginator();\r\n        const sort = this.sort();\r\n        return {\r\n            search: this.searchControl.value ?? '',\r\n            categoryId: this.categoryFilter.value ?? undefined,\r\n            minPrice: this.minPriceFilter.value ?? null,\r\n            maxPrice: this.maxPriceFilter.value ?? null,\r\n            inStock: this.inStockFilter.value || undefined,\r\n            page: paginator?.pageIndex ? paginator.pageIndex + 1 : 1,\r\n            pageSize: this.paginator()?.pageSize || 10,\r\n            sortColumn: sort?.active as keyof Product,\r\n            sortDirection: sort?.direction || undefined\r\n        };\r\n    }\r\n\r\n    loadProducts(filters = this.getCurrentFilters()) {\r\n        this.store.dispatch(ProductActions.loadProducts({ filters }));\r\n    }\r\n\r\n    resetFilters() {\r\n        this.searchControl.reset();\r\n        this.categoryFilter.reset();\r\n        this.minPriceFilter.reset();\r\n        this.maxPriceFilter.reset();\r\n        this.inStockFilter.reset();\r\n\r\n        const paginator = this.paginator();\r\n        if (paginator) {\r\n            paginator.pageIndex = 0;\r\n            paginator.pageSize = 10;\r\n        }\r\n\r\n        const sort = this.sort();\r\n        if (sort) {\r\n            sort.active = '';\r\n            sort.direction = '';\r\n        }\r\n\r\n        this.store.dispatch(ProductActions.resetFilters());\r\n        this.loadProducts({\r\n            page: 1,\r\n            pageSize: 10,\r\n            search: '',\r\n            categoryId: undefined,\r\n            minPrice: null,\r\n            maxPrice: null,\r\n            inStock: undefined,\r\n            sortColumn: 'name' as keyof Product,  // Provide valid default\r\n            sortDirection: undefined\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if any filter is currently active\r\n     */\r\n    hasActiveFilters(): boolean {\r\n        return !!(\r\n            this.searchControl.value ||\r\n            this.categoryFilter.value ||\r\n            this.minPriceFilter.value ||\r\n            this.maxPriceFilter.value ||\r\n            this.inStockFilter.value\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns a formatted string representing the current price filter range\r\n     */\r\n    getPriceFilterLabel(): string {\r\n        const min = this.minPriceFilter.value;\r\n        const max = this.maxPriceFilter.value;\r\n\r\n        if (min && max) {\r\n            return `$${min} - $${max}`;\r\n        } else if (min) {\r\n            return `$${min}+`;\r\n        } else if (max) {\r\n            return `Up to $${max}`;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Clears only the price-related filters\r\n     */\r\n    clearPriceFilters(): void {\r\n        this.minPriceFilter.reset();\r\n        this.maxPriceFilter.reset();\r\n        this.loadProducts();\r\n    }\r\n\r\n    async openImagePreview(imageUrl: string) {\r\n        this.matDialog.open(ImagePreviewDialogComponent, {\r\n            width: '800px',\r\n            data: {\r\n                url: imageUrl,\r\n                alt: 'Product Image'\r\n            },\r\n            panelClass: 'image-preview-dialog'\r\n        });\r\n    }\r\n\r\n    async deleteProduct(product: Product) {\r\n        const confirmed = await this.dialogService.confirm(\r\n            `Are you sure you want to delete ${product.name}?`,\r\n            'Delete Product'\r\n        );\r\n\r\n        if (confirmed) {\r\n            this.store.dispatch(ProductActions.deleteProduct({ id: product.id }));\r\n        }\r\n    }\r\n\r\n    editProduct(product: Product, event?: Event) {\r\n        // Stop event propagation if event is provided\r\n        if (event) {\r\n            event.stopPropagation();\r\n        }\r\n\r\n        this.store.dispatch(ProductActions.selectProduct({ product }));\r\n\r\n        const dialogRef = this.matDialog.open(EditProductDialogComponent, {\r\n            width: '600px',\r\n            data: product\r\n        });\r\n\r\n        dialogRef.afterClosed().subscribe(result => {\r\n            if (result) {\r\n                this.store.dispatch(ProductActions.updateProduct({\r\n                    id: product.id,\r\n                    product: result\r\n                }));\r\n            }\r\n            this.store.dispatch(ProductActions.clearSelectedProduct());\r\n        });\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!-- Admin.WebApp/src/app/features/products/product-list/product-list.component.html -->\r\n<div class=\"p-6 max-w-screen-2xl mx-auto\">\r\n    <!-- Page Header -->\r\n    <div class=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6\">\r\n        <div>\r\n            <h1 class=\"text-2xl font-bold text-slate-900 dark:text-white\">Products</h1>\r\n            <p class=\"text-sm text-slate-500 dark:text-slate-400\">Manage your product inventory</p>\r\n        </div>\r\n        <div class=\"mt-4 sm:mt-0\">\r\n            <button mat-raised-button color=\"primary\"\r\n                class=\"bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 transition-colors\"\r\n                routerLink=\"/products/add\">\r\n                <mat-icon>add</mat-icon>\r\n                Add Product\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Filters Section -->\r\n    <div class=\"mb-6\">\r\n        <div class=\"bg-white dark:bg-slate-800 rounded-md shadow-sm mb-6 border border-slate-200 dark:border-slate-700\">\r\n            <!-- Filter Header -->\r\n            <div class=\"p-4 border-b border-slate-200 dark:border-slate-700 flex items-center justify-between\">\r\n                <div class=\"flex items-center\">\r\n                    <mat-icon class=\"text-primary-500 dark:text-primary-400 mr-2\">filter_list</mat-icon>\r\n                    <h2 class=\"text-lg font-medium text-slate-900 dark:text-white\">Filters</h2>\r\n                </div>\r\n\r\n                <div class=\"flex items-center gap-2\">\r\n                    <button mat-stroked-button (click)=\"resetFilters()\"\r\n                        class=\"border border-slate-200 dark:border-slate-700 h-9 px-4 py-0 text-sm rounded-md text-slate-700 dark:text-slate-300 hover:bg-slate-50 dark:hover:bg-slate-700 flex items-center\">\r\n                        <mat-icon class=\"text-sm h-5 w-5 mr-1\">refresh</mat-icon>\r\n                        Clear Filters\r\n                    </button>\r\n\r\n                    <button mat-icon-button\r\n                        class=\"flex items-center justify-center h-9 w-9 text-slate-700 dark:text-slate-300 bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-md hover:bg-slate-50 dark:hover:bg-slate-700\">\r\n                        <mat-icon>bookmark_add</mat-icon>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Filter Fields -->\r\n            <div class=\"p-4\">\r\n                <div class=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n                    <mat-form-field appearance=\"fill\">\r\n                        <!-- Search Field -->\r\n                        <mat-label>Search Products</mat-label>\r\n                        <input matInput type=\"text\" [formControl]=\"searchControl\" placeholder=\"Search Products\">\r\n                        <mat-icon matSuffix class=\"text-slate-400\">search</mat-icon>\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"fill\">\r\n                        <mat-select [formControl]=\"categoryFilter\">\r\n                            <mat-option value=\"\">All Categories</mat-option>\r\n                            <mat-option *ngFor=\"let category of categories()\" [value]=\"category.id\">{{ category.name\r\n                                }}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                        <mat-icon matSuffix class=\"text-slate-400\">category</mat-icon>\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"fill\">\r\n                        <!-- Min Price -->\r\n                        <mat-label>Min Price</mat-label>\r\n                        <div matSuffix class=\"text-slate-400 pe-3\">$</div>\r\n                        <input matInput type=\"number\" [formControl]=\"minPriceFilter\" placeholder=\"Min Price\">\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"fill\">\r\n                        <!-- Max Price -->\r\n                        <mat-label>Max Price</mat-label>\r\n                        <div matSuffix class=\"text-slate-400 pe-3\">$</div>\r\n                        <input matInput type=\"number\" [formControl]=\"maxPriceFilter\" placeholder=\"Max Price\">\r\n                    </mat-form-field>\r\n                </div>\r\n                <div class=\"mt-4 flex flex-wrap items-center gap-3\">\r\n                    <!-- In Stock Checkbox -->\r\n                    <label class=\"inline-flex items-center cursor-pointer text-slate-700 dark:text-slate-300\">\r\n                        <input type=\"checkbox\" [formControl]=\"inStockFilter\"\r\n                            class=\"h-4 w-4 rounded border-slate-300 dark:border-slate-600 text-primary-600 dark:text-primary-400\">\r\n                        <span class=\"ml-2\">In Stock Only</span>\r\n                    </label>\r\n\r\n                    <!-- Additional filter chips could go here -->\r\n                    <ng-container *ngIf=\"hasActiveFilters()\">\r\n                        <!-- Price Filter Chip Example -->\r\n                        <div *ngIf=\"minPriceFilter.value || maxPriceFilter.value\"\r\n                            class=\"inline-flex items-center px-3 py-1.5 rounded-full bg-primary-50 dark:bg-primary-900/20 text-primary-700 dark:text-primary-400 text-sm border border-primary-100 dark:border-primary-800/30\">\r\n                            <span>Price: {{ getPriceFilterLabel() }}</span>\r\n                            <button (click)=\"clearPriceFilters()\"\r\n                                class=\"ml-1.5 flex items-center justify-center h-4 w-4 rounded-full hover:bg-primary-200 dark:hover:bg-primary-700/30\">\r\n                                <mat-icon class=\"text-xs h-3 w-3\">close</mat-icon>\r\n                            </button>\r\n                        </div>\r\n\r\n                        <!-- Other filter chips would go here -->\r\n                    </ng-container>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Products Table -->\r\n    <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-subtle overflow-hidden\">\r\n        <!-- Loading indicator -->\r\n        <div *ngIf=\"loading$ | async\" class=\"flex justify-center items-center p-6\">\r\n            <mat-spinner [diameter]=\"40\"></mat-spinner>\r\n        </div>\r\n\r\n        <!-- Error message -->\r\n        @if (error$ | async; as error) {\r\n        <div\r\n            class=\"bg-rose-50 dark:bg-slate-900 text-rose-600 dark:text-rose-400 p-4 border border-rose-200 dark:border-rose-800 rounded-md mb-4\">\r\n            <div class=\"flex items-center\">\r\n                <mat-icon class=\"mr-2 text-rose-500\">error</mat-icon>\r\n                <span>{{ error }}</span>\r\n            </div>\r\n        </div>\r\n        }\r\n\r\n        <!-- Empty state -->\r\n        @if ((products$ | async)?.length === 0 && !(loading$ | async)) {\r\n        <div class=\"flex flex-col items-center justify-center p-12 text-center\">\r\n            <mat-icon class=\"text-6xl mb-4 text-slate-300 dark:text-slate-600\">inventory_2</mat-icon>\r\n            <h3 class=\"text-xl font-medium mb-2 text-slate-800 dark:text-slate-200\">No products found</h3>\r\n            <p class=\"text-slate-500 dark:text-slate-400 mb-6\">Try changing your filters or add a new product.</p>\r\n            <button mat-raised-button color=\"primary\"\r\n                class=\"bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 transition-colors\"\r\n                routerLink=\"/products/add\">\r\n                <mat-icon>add</mat-icon>\r\n                Add Product\r\n            </button>\r\n        </div>\r\n        }\r\n\r\n        <!-- Products table -->\r\n        <div class=\"overflow-x-auto\" *ngIf=\"!!(products$ | async)\">\r\n            <table mat-table [dataSource]=\"(products$ | async) || []\" matSort (matSortChange)=\"sortChange($event)\"\r\n                class=\"w-full\">\r\n                <!-- Image Column -->\r\n                <ng-container matColumnDef=\"image\">\r\n                    <th mat-header-cell *matHeaderCellDef\r\n                        class=\"py-4 px-4 font-medium text-slate-700 dark:text-slate-300 bg-slate-50 dark:bg-slate-700\">\r\n                        Image</th>\r\n                    <td mat-cell *matCellDef=\"let product\"\r\n                        class=\"py-3 px-4 border-b border-slate-200 dark:border-slate-700\">\r\n                        @if (product.images?.length) {\r\n                        <img class=\"w-12 h-12 object-cover rounded-md cursor-pointer hover:opacity-80 transition-opacity\"\r\n                            [src]=\"product.images[0].url\" [alt]=\"product.name\"\r\n                            (click)=\"openImagePreview(product.images[0].url)\">\r\n                        } @else {\r\n                        <div\r\n                            class=\"w-12 h-12 flex items-center justify-center bg-slate-100 dark:bg-slate-700 rounded-md\">\r\n                            <mat-icon class=\"text-slate-400 dark:text-slate-500\">image_not_supported</mat-icon>\r\n                        </div>\r\n                        }\r\n                    </td>\r\n                </ng-container>\r\n\r\n                <!-- Name Column -->\r\n                <ng-container matColumnDef=\"name\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n                        class=\"py-4 px-4 font-medium text-slate-700 dark:text-slate-300 bg-slate-50 dark:bg-slate-700\">\r\n                        Name</th>\r\n                    <td mat-cell *matCellDef=\"let product\"\r\n                        class=\"py-3 px-4 border-b border-slate-200 dark:border-slate-700\">\r\n                        <div class=\"font-medium text-slate-900 dark:text-white\">{{ product.name }}</div>\r\n                        <div class=\"text-xs text-slate-500 dark:text-slate-400\">SKU: {{ product.sku }}</div>\r\n                    </td>\r\n                </ng-container>\r\n\r\n                <!-- Category Column -->\r\n                <ng-container matColumnDef=\"category\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n                        class=\"py-4 px-4 font-medium text-slate-700 dark:text-slate-300 bg-slate-50 dark:bg-slate-700\">\r\n                        Category</th>\r\n                    <td mat-cell *matCellDef=\"let product\"\r\n                        class=\"py-3 px-4 border-b border-slate-200 dark:border-slate-700\">\r\n                        <span\r\n                            class=\"px-2 py-1 text-xs rounded-full bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-300\">\r\n                            {{ product.category?.name || 'Uncategorized' }}\r\n                        </span>\r\n                    </td>\r\n                </ng-container>\r\n\r\n                <!-- Price Column -->\r\n                <ng-container matColumnDef=\"price\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n                        class=\"py-4 px-4 font-medium text-slate-700 dark:text-slate-300 bg-slate-50 dark:bg-slate-700\">\r\n                        Price</th>\r\n                    <td mat-cell *matCellDef=\"let product\"\r\n                        class=\"py-3 px-4 border-b border-slate-200 dark:border-slate-700\">\r\n                        <div class=\"font-medium text-slate-900 dark:text-white\">\r\n                            {{ product.price | currency:product.currency }}\r\n                        </div>\r\n                        @if (product.compareAtPrice) {\r\n                        <div class=\"text-xs line-through text-slate-500 dark:text-slate-400\">\r\n                            {{ product.compareAtPrice | currency:product.currency }}\r\n                        </div>\r\n                        }\r\n                    </td>\r\n                </ng-container>\r\n\r\n                <!-- Stock Column -->\r\n                <ng-container matColumnDef=\"stock\">\r\n                    <th mat-header-cell *matHeaderCellDef\r\n                        class=\"py-4 px-4 font-medium text-slate-700 dark:text-slate-300 bg-slate-50 dark:bg-slate-700\">\r\n                        Stock</th>\r\n                    <td mat-cell *matCellDef=\"let product\"\r\n                        class=\"py-3 px-4 border-b border-slate-200 dark:border-slate-700\">\r\n                        <app-stock-management [product]=\"product\"></app-stock-management>\r\n                    </td>\r\n                </ng-container>\r\n\r\n                <!-- Actions Column -->\r\n                <ng-container matColumnDef=\"actions\">\r\n                    <th mat-header-cell *matHeaderCellDef\r\n                        class=\"py-4 px-4 font-medium text-slate-700 dark:text-slate-300 bg-slate-50 dark:bg-slate-700\">\r\n                        Actions</th>\r\n                    <td mat-cell *matCellDef=\"let product\"\r\n                        class=\"py-3 px-4 border-b border-slate-200 dark:border-slate-700\">\r\n                        <div class=\"flex space-x-2\">\r\n                            <button mat-icon-button class=\"btn-icon\"\r\n                                class=\"text-primary-600 hover:bg-primary-50 dark:hover:bg-slate-700 rounded-full transition-colors\"\r\n                                [matTooltip]=\"'Edit ' + product.name\" (click)=\"editProduct(product, $event)\">\r\n                                <mat-icon class=\"icon-success\">edit</mat-icon>\r\n                            </button>\r\n                            <button mat-icon-button\r\n                                class=\"text-rose-600 hover:bg-rose-50 dark:hover:bg-slate-700 rounded-full transition-colors\"\r\n                                [matTooltip]=\"'Delete ' + product.name\" [matTooltipClass]=\"'tooltip-danger'\"\r\n                                (click)=\"deleteProduct(product); $event.stopPropagation()\">\r\n                                <mat-icon class=\"icon-danger\">delete</mat-icon>\r\n                            </button>\r\n                        </div>\r\n                    </td>\r\n                </ng-container>\r\n\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"\r\n                    class=\"hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors cursor-pointer\"\r\n                    (click)=\"editProduct(row)\">\r\n                </tr>\r\n            </table>\r\n        </div>\r\n\r\n        <!-- Pagination -->\r\n        <mat-paginator class=\"border-t border-slate-200 dark:border-slate-700\"\r\n            [length]=\"(pagination$ | async)?.totalItems\" [pageSize]=\"10\" [pageSizeOptions]=\"[10, 25, 50]\"\r\n            (page)=\"onPageChange($event)\">\r\n        </mat-paginator>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ProductsComponent",
            "id": "component-ProductsComponent-dd28761a618aa9d631aad226d36eb18e358b73ec145a9865af04f7597eaf8db47dfd7d18c509524e5c741d0ddc4c4fda3b83c752b7f34930e406b1ac4e606d20",
            "file": "src/app/features/products/products.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-products",
            "styleUrls": [],
            "styles": [],
            "template": "<router-outlet></router-outlet>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\n@Component({\r\n  selector: 'app-products',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterOutlet, MatDialogModule, MatInputModule, MatButtonModule],\r\n  template: `\r\n    <router-outlet></router-outlet>\r\n  `\r\n})\r\nexport class ProductsComponent { }",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "SavePresetDialogComponent",
            "id": "component-SavePresetDialogComponent-04e58401884a4179d9e5c2a9ac4d00f26240fad0d5943a09e5cf02e9a2a9161652cefcff8826c1f88852894702d7560493aafa9111904a871fbb60768b593f6b",
            "file": "src/app/shared/components/dialog/save-preset-dialog/save-preset-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-save-preset-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"save-preset-dialog\">\n    <!-- Dialog Header -->\n    <div class=\"flex items-center justify-between px-6 py-4 border-b border-slate-200 dark:border-slate-700\">\n        <h2 class=\"text-xl font-medium text-slate-900 dark:text-white\">Save Search Preset</h2>\n        <button mat-icon-button (click)=\"onCancel()\"\n            class=\"text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-full transition-colors\">\n            <mat-icon>close</mat-icon>\n        </button>\n    </div>\n\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n        <!-- Dialog Content -->\n        <div class=\"p-6\">\n            <div class=\"grid grid-cols-1 gap-4\">\n                <mat-form-field  class=\"w-full\">\n                    <mat-label>Preset Name</mat-label>\n                    <input matInput formControlName=\"name\" placeholder=\"Enter preset name\">\n                    <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('name')?.errors?.['required']\">\n                        Name is required\n                    </mat-error>\n                    <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('name')?.errors?.['minlength']\">\n                        Name should be at least 3 characters\n                    </mat-error>\n                </mat-form-field>\n\n                <mat-form-field  class=\"w-full\">\n                    <mat-label>Description</mat-label>\n                    <textarea matInput formControlName=\"description\"\n                            placeholder=\"Enter description (optional)\"\n                            rows=\"3\"></textarea>\n                </mat-form-field>\n\n                <div class=\"mt-2\">\n                    <mat-checkbox formControlName=\"isGlobal\"\n                                class=\"text-slate-700 dark:text-slate-300\">\n                        Share with all admin users\n                    </mat-checkbox>\n                </div>\n            </div>\n        </div>\n\n        <!-- Dialog Actions -->\n        <div class=\"flex justify-end gap-3 px-6 py-4 border-t border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-700\">\n            <button mat-button type=\"button\" (click)=\"onCancel()\"\n                class=\"border border-slate-300 dark:border-slate-600 px-4 py-1 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-700\">\n                Cancel\n            </button>\n            <button mat-raised-button color=\"primary\"\n                    type=\"submit\"\n                    [disabled]=\"!form.valid\"\n                    class=\"bg-primary-600 text-white px-4 py-1 rounded-md hover:bg-primary-700 transition-colors\">\n                Save Preset\n            </button>\n        </div>\n    </form>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 85
                }
            ],
            "methodsClass": [
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n    selector: 'app-save-preset-dialog',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        MatDialogModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatButtonModule,\r\n        MatCheckboxModule,\r\n        MatIconModule\r\n    ],\r\n    template: `\r\n        <div class=\"save-preset-dialog\">\r\n            <!-- Dialog Header -->\r\n            <div class=\"flex items-center justify-between px-6 py-4 border-b border-slate-200 dark:border-slate-700\">\r\n                <h2 class=\"text-xl font-medium text-slate-900 dark:text-white\">Save Search Preset</h2>\r\n                <button mat-icon-button (click)=\"onCancel()\"\r\n                    class=\"text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-full transition-colors\">\r\n                    <mat-icon>close</mat-icon>\r\n                </button>\r\n            </div>\r\n            \r\n            <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n                <!-- Dialog Content -->\r\n                <div class=\"p-6\">\r\n                    <div class=\"grid grid-cols-1 gap-4\">\r\n                        <mat-form-field  class=\"w-full\">\r\n                            <mat-label>Preset Name</mat-label>\r\n                            <input matInput formControlName=\"name\" placeholder=\"Enter preset name\">\r\n                            <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('name')?.errors?.['required']\">\r\n                                Name is required\r\n                            </mat-error>\r\n                            <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('name')?.errors?.['minlength']\">\r\n                                Name should be at least 3 characters\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field  class=\"w-full\">\r\n                            <mat-label>Description</mat-label>\r\n                            <textarea matInput formControlName=\"description\" \r\n                                    placeholder=\"Enter description (optional)\"\r\n                                    rows=\"3\"></textarea>\r\n                        </mat-form-field>\r\n\r\n                        <div class=\"mt-2\">\r\n                            <mat-checkbox formControlName=\"isGlobal\" \r\n                                        class=\"text-slate-700 dark:text-slate-300\">\r\n                                Share with all admin users\r\n                            </mat-checkbox>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Dialog Actions -->\r\n                <div class=\"flex justify-end gap-3 px-6 py-4 border-t border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-700\">\r\n                    <button mat-button type=\"button\" (click)=\"onCancel()\"\r\n                        class=\"border border-slate-300 dark:border-slate-600 px-4 py-1 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-700\">\r\n                        Cancel\r\n                    </button>\r\n                    <button mat-raised-button color=\"primary\" \r\n                            type=\"submit\"\r\n                            [disabled]=\"!form.valid\"\r\n                            class=\"bg-primary-600 text-white px-4 py-1 rounded-md hover:bg-primary-700 transition-colors\">\r\n                        Save Preset\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    `,\r\n    styles: []\r\n})\r\nexport class SavePresetDialogComponent {\r\n    form: FormGroup;\r\n\r\n    constructor(\r\n        private readonly dialogRef: MatDialogRef<SavePresetDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: { filters: any[] },\r\n        private readonly fb: FormBuilder\r\n    ) {\r\n        this.form = this.fb.group({\r\n            name: ['', [Validators.required, Validators.minLength(3)]],\r\n            description: [''],\r\n            isGlobal: [false]\r\n        });\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.form.valid) {\r\n            this.dialogRef.close({\r\n                ...this.form.value,\r\n                filters: this.data.filters\r\n            });\r\n        }\r\n    }\r\n\r\n    onCancel() {\r\n        this.dialogRef.close();\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SavePresetDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 85,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SavePresetDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "ServerErrorComponent",
            "id": "component-ServerErrorComponent-ad2fa9b37209549dc0a98a83842d127b9e5d09717a86a6703a9c0eb012536b8990e6b9bc33135bed5847a52b1c929f115e7a1d490e98a6c602daa88ab0b5655f",
            "file": "src/app/features/error-pages/server-error/server-error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-server-error",
            "styleUrls": [],
            "styles": [],
            "template": "<app-error-page [config]=\"errorConfig\"></app-error-page>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorConfig",
                    "defaultValue": "{\r\n        title: 'Server Error',\r\n        message: 'Sorry, something went wrong on our end. Please try again later.',\r\n        icon: 'error',\r\n        showRetryButton: true,\r\n        showHomeButton: true\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ErrorConfig",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ErrorPageComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\r\nimport { ErrorConfig, ErrorPageComponent } from \"../error-page.component\";\r\n\r\n// src/app/features/error-pages/server-error/server-error.component.ts\r\n@Component({\r\n    selector: 'app-server-error',\r\n    standalone: true,\r\n    imports: [ErrorPageComponent],\r\n    template: `\r\n        <app-error-page [config]=\"errorConfig\"></app-error-page>\r\n    `\r\n})\r\nexport class ServerErrorComponent {\r\n    errorConfig: ErrorConfig = {\r\n        title: 'Server Error',\r\n        message: 'Sorry, something went wrong on our end. Please try again later.',\r\n        icon: 'error',\r\n        showRetryButton: true,\r\n        showHomeButton: true\r\n    };\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-5044d203ad85e8017cc09816e7fa833cd1e445005c8c4db2d4fe2591a484c1995f4f004f456d036887c5ee57727241b65a06ae835fd38263b067cc639460eda3",
            "file": "src/app/layout/sidebar/sidebar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [],
            "styles": [],
            "template": "<aside\n  class=\"h-full w-[280px] bg-white dark:bg-slate-800 border-r border-slate-200 dark:border-slate-700 flex flex-col\"\n  [class.w-[280px]]=\"!collapsed\"\n  [class.w-[70px]]=\"collapsed\">\n\n  <!-- Sidebar Header -->\n  <div class=\"flex items-center justify-between h-16 px-4 border-b border-slate-200 dark:border-slate-700\">\n    <!-- Logo -->\n    <div class=\"flex items-center\">\n      <div class=\"flex items-center justify-center w-10 h-10 rounded-lg bg-primary-600 text-white\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\n        </svg>\n      </div>\n      <h1 *ngIf=\"!collapsed\" class=\"ml-3 text-lg font-semibold text-slate-900 dark:text-white\">Admin</h1>\n    </div>\n\n    <!-- Collapse Button -->\n    <button\n      (click)=\"toggleCollapse()\"\n      class=\"p-1.5 rounded-full text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors\"\n      [matTooltip]=\"collapsed ? 'Expand' : 'Collapse'\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        class=\"h-5 w-5\"\n        viewBox=\"0 0 20 20\"\n        fill=\"currentColor\"\n        [class.rotate-180]=\"collapsed\">\n        <path fill-rule=\"evenodd\" d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\" clip-rule=\"evenodd\" />\n      </svg>\n    </button>\n  </div>\n\n  <!-- Navigation -->\n  <nav class=\"flex-1 overflow-y-auto py-4 px-3\">\n    <!-- Main Navigation Section -->\n    <div class=\"mb-6\">\n      <div *ngIf=\"!collapsed\" class=\"px-4 mb-2\">\n        <h2 class=\"text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n          Main\n        </h2>\n      </div>\n\n      <!-- Dashboard Link -->\n      <a\n        routerLink=\"/\"\n        routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\"\n        [routerLinkActiveOptions]=\"{exact: true}\"\n        class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors mb-1 cursor-pointer\"\n        [class.justify-center]=\"collapsed\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" />\n        </svg>\n        <span *ngIf=\"!collapsed\" class=\"ml-3\">Dashboard</span>\n      </a>\n\n      <!-- Products Section -->\n      <div class=\"mb-1\">\n        <!-- Products Dropdown Toggle -->\n        <div\n          (click)=\"toggleGroup('products')\"\n          class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors cursor-pointer\"\n          [class.justify-center]=\"collapsed\"\n          [class.bg-primary-50]=\"expandedGroups.has('products') && !collapsed\"\n          [class.dark:bg-slate-700]=\"expandedGroups.has('products') && !collapsed\"\n          [class.text-primary-700]=\"expandedGroups.has('products') && !collapsed\"\n          [class.dark:text-primary-400]=\"expandedGroups.has('products') && !collapsed\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\n          </svg>\n          <span *ngIf=\"!collapsed\" class=\"ml-3 flex-1\">Products</span>\n          <svg *ngIf=\"!collapsed\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 transition-transform duration-200 ease-in-out\" [class.rotate-90]=\"expandedGroups.has('products')\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\n          </svg>\n        </div>\n\n        <!-- Products Submenu -->\n        <div *ngIf=\"expandedGroups.has('products') && !collapsed\" class=\"mt-1 ml-4 space-y-1\">\n          <a\n            routerLink=\"/products/list\"\n            routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\"\n            class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors text-sm\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 10h16M4 14h16M4 18h16\" />\n            </svg>\n            <span class=\"ml-3\">Product List</span>\n          </a>\n          <a\n            routerLink=\"/products/add\"\n            routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\"\n            class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors text-sm\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n            </svg>\n            <span class=\"ml-3\">Add Product</span>\n          </a>\n          <a\n            routerLink=\"/categories\"\n            routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\"\n            class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors text-sm\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\" />\n            </svg>\n            <span class=\"ml-3\">Categories</span>\n          </a>\n        </div>\n      </div>\n\n      <!-- Stats Link -->\n      <a\n        routerLink=\"/statistics\"\n        routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\"\n        class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors mb-1 cursor-pointer\"\n        [class.justify-center]=\"collapsed\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n        </svg>\n        <span *ngIf=\"!collapsed\" class=\"ml-3\">Statistics</span>\n      </a>\n\n      <!-- Orders Link -->\n      <a\n        routerLink=\"/orders\"\n        routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\"\n        class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors mb-1 cursor-pointer\"\n        [class.justify-center]=\"collapsed\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z\" />\n        </svg>\n        <span *ngIf=\"!collapsed\" class=\"ml-3\">Orders</span>\n        <span\n          *ngIf=\"newOrdersCount > 0\"\n          class=\"ml-auto inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white bg-red-500 rounded-full\">\n          {{ newOrdersCount }}\n        </span>\n      </a>\n    </div>\n\n    <!-- System Section -->\n    <div>\n      <div *ngIf=\"!collapsed\" class=\"px-4 mb-2\">\n        <h2 class=\"text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n          System\n        </h2>\n      </div>\n\n      <!-- Settings Link -->\n      <a\n        routerLink=\"/settings\"\n        routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\"\n        class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors mb-1 cursor-pointer\"\n        [class.justify-center]=\"collapsed\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n        </svg>\n        <span *ngIf=\"!collapsed\" class=\"ml-3\">Settings</span>\n      </a>\n\n      <!-- Users Link -->\n      <a\n        routerLink=\"/users\"\n        routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\"\n        class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors mb-1 cursor-pointer\"\n        [class.justify-center]=\"collapsed\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z\" />\n        </svg>\n        <span *ngIf=\"!collapsed\" class=\"ml-3\">Users</span>\n      </a>\n    </div>\n  </nav>\n\n  <!-- User Profile & Theme Toggle -->\n  <div class=\"border-t border-slate-200 dark:border-slate-700 p-4\">\n    <!-- User Profile -->\n    <div *ngIf=\"!collapsed\" class=\"flex items-center mb-4\">\n      <div class=\"flex-shrink-0\">\n        <div class=\"w-10 h-10 rounded-full bg-primary-100 dark:bg-slate-700 flex items-center justify-center text-primary-700 dark:text-primary-400\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n          </svg>\n        </div>\n      </div>\n      <div class=\"ml-3 flex-1\">\n        <p class=\"text-sm font-medium text-slate-900 dark:text-white\">\n          {{ currentUser()?.username || 'Guest User' }}\n        </p>\n        <p class=\"text-xs text-slate-500 dark:text-slate-400\">\n          {{ currentUser()?.roles || 'No role assigned' }}\n        </p>\n      </div>\n      <button\n        (click)=\"toggleUserMenu()\"\n        class=\"p-1 rounded-full text-slate-400 hover:text-slate-500 dark:hover:text-slate-300\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n        </svg>\n      </button>\n    </div>\n\n    <!-- User Menu Dropdown -->\n    <div *ngIf=\"isUserMenuOpen && !collapsed\" class=\"mt-2 mb-4 py-1 bg-white dark:bg-slate-700 rounded-md shadow-lg border border-slate-200 dark:border-slate-700\">\n      <a\n        routerLink=\"/profile\"\n        class=\"flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 mr-3\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n        </svg>\n        My Profile\n      </a>\n      <a\n        (click)=\"logout()\"\n        class=\"flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 cursor-pointer\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 mr-3\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\n        </svg>\n        Logout\n      </a>\n    </div>\n\n    <!-- Theme Toggle -->\n    <div [class.flex]=\"!collapsed\" [class.justify-center]=\"collapsed\" class=\"items-center\">\n      <button\n        (click)=\"toggleTheme()\"\n        class=\"p-2 rounded-md text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors w-full flex items-center justify-center sm:justify-start\">\n        <svg *ngIf=\"isDarkTheme\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\" />\n        </svg>\n        <svg *ngIf=\"!isDarkTheme\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\" />\n        </svg>\n        <span *ngIf=\"!collapsed\" class=\"ml-3\">{{ isDarkTheme ? 'Light Mode' : 'Dark Mode' }}</span>\n      </button>\n    </div>\n  </div>\n</aside>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "collapsed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 274,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentUser",
                    "defaultValue": "signal<User | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 275
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 280,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "expandedGroups",
                    "defaultValue": "new Set()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Set<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 278
                },
                {
                    "name": "isDarkTheme",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 276
                },
                {
                    "name": "isUserMenuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 281
                },
                {
                    "name": "newOrdersCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 279
                },
                {
                    "name": "sidebarVisible",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 277
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 322,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 289,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleCollapse",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleGroup",
                    "args": [
                        {
                            "name": "group",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 308,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 318,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleUserMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input, ViewEncapsulation, signal } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Router, NavigationEnd } from '@angular/router';\r\nimport { ThemeService } from '../../core/services/theme.service';\r\nimport { AuthService } from 'src/app/core/services/auth.service';\r\nimport { User } from 'src/app/shared/models/auth.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { Subject, takeUntil, filter } from 'rxjs';\r\n\r\ninterface NavItem {\r\n  path: string;\r\n  icon: string;\r\n  label: string;\r\n  children?: NavItem[];\r\n}\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    MatIconModule,\r\n    MatTooltipModule\r\n  ],\r\n  template: `\r\n    <aside \r\n      class=\"h-full w-[280px] bg-white dark:bg-slate-800 border-r border-slate-200 dark:border-slate-700 flex flex-col\"\r\n      [class.w-[280px]]=\"!collapsed\"\r\n      [class.w-[70px]]=\"collapsed\">\r\n      \r\n      <!-- Sidebar Header -->\r\n      <div class=\"flex items-center justify-between h-16 px-4 border-b border-slate-200 dark:border-slate-700\">\r\n        <!-- Logo -->\r\n        <div class=\"flex items-center\">\r\n          <div class=\"flex items-center justify-center w-10 h-10 rounded-lg bg-primary-600 text-white\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n            </svg>\r\n          </div>\r\n          <h1 *ngIf=\"!collapsed\" class=\"ml-3 text-lg font-semibold text-slate-900 dark:text-white\">Admin</h1>\r\n        </div>\r\n        \r\n        <!-- Collapse Button -->\r\n        <button \r\n          (click)=\"toggleCollapse()\" \r\n          class=\"p-1.5 rounded-full text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors\"\r\n          [matTooltip]=\"collapsed ? 'Expand' : 'Collapse'\">\r\n          <svg \r\n            xmlns=\"http://www.w3.org/2000/svg\" \r\n            class=\"h-5 w-5\" \r\n            viewBox=\"0 0 20 20\" \r\n            fill=\"currentColor\" \r\n            [class.rotate-180]=\"collapsed\">\r\n            <path fill-rule=\"evenodd\" d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\" clip-rule=\"evenodd\" />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      \r\n      <!-- Navigation -->\r\n      <nav class=\"flex-1 overflow-y-auto py-4 px-3\">\r\n        <!-- Main Navigation Section -->\r\n        <div class=\"mb-6\">\r\n          <div *ngIf=\"!collapsed\" class=\"px-4 mb-2\">\r\n            <h2 class=\"text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\r\n              Main\r\n            </h2>\r\n          </div>\r\n          \r\n          <!-- Dashboard Link -->\r\n          <a \r\n            routerLink=\"/\" \r\n            routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\" \r\n            [routerLinkActiveOptions]=\"{exact: true}\"\r\n            class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors mb-1 cursor-pointer\"\r\n            [class.justify-center]=\"collapsed\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" />\r\n            </svg>\r\n            <span *ngIf=\"!collapsed\" class=\"ml-3\">Dashboard</span>\r\n          </a>\r\n          \r\n          <!-- Products Section -->\r\n          <div class=\"mb-1\">\r\n            <!-- Products Dropdown Toggle -->\r\n            <div \r\n              (click)=\"toggleGroup('products')\"\r\n              class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors cursor-pointer\"\r\n              [class.justify-center]=\"collapsed\"\r\n              [class.bg-primary-50]=\"expandedGroups.has('products') && !collapsed\"\r\n              [class.dark:bg-slate-700]=\"expandedGroups.has('products') && !collapsed\"\r\n              [class.text-primary-700]=\"expandedGroups.has('products') && !collapsed\"\r\n              [class.dark:text-primary-400]=\"expandedGroups.has('products') && !collapsed\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n              </svg>\r\n              <span *ngIf=\"!collapsed\" class=\"ml-3 flex-1\">Products</span>\r\n              <svg *ngIf=\"!collapsed\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 transition-transform duration-200 ease-in-out\" [class.rotate-90]=\"expandedGroups.has('products')\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\r\n              </svg>\r\n            </div>\r\n            \r\n            <!-- Products Submenu -->\r\n            <div *ngIf=\"expandedGroups.has('products') && !collapsed\" class=\"mt-1 ml-4 space-y-1\">\r\n              <a \r\n                routerLink=\"/products/list\" \r\n                routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\" \r\n                class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors text-sm\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 10h16M4 14h16M4 18h16\" />\r\n                </svg>\r\n                <span class=\"ml-3\">Product List</span>\r\n              </a>\r\n              <a \r\n                routerLink=\"/products/add\" \r\n                routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\" \r\n                class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors text-sm\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n                </svg>\r\n                <span class=\"ml-3\">Add Product</span>\r\n              </a>\r\n              <a \r\n                routerLink=\"/categories\" \r\n                routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\" \r\n                class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors text-sm\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\" />\r\n                </svg>\r\n                <span class=\"ml-3\">Categories</span>\r\n              </a>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Stats Link -->\r\n          <a \r\n            routerLink=\"/statistics\" \r\n            routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\" \r\n            class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors mb-1 cursor-pointer\"\r\n            [class.justify-center]=\"collapsed\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\r\n            </svg>\r\n            <span *ngIf=\"!collapsed\" class=\"ml-3\">Statistics</span>\r\n          </a>\r\n          \r\n          <!-- Orders Link -->\r\n          <a \r\n            routerLink=\"/orders\" \r\n            routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\" \r\n            class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors mb-1 cursor-pointer\"\r\n            [class.justify-center]=\"collapsed\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z\" />\r\n            </svg>\r\n            <span *ngIf=\"!collapsed\" class=\"ml-3\">Orders</span>\r\n            <span \r\n              *ngIf=\"newOrdersCount > 0\" \r\n              class=\"ml-auto inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white bg-red-500 rounded-full\">\r\n              {{ newOrdersCount }}\r\n            </span>\r\n          </a>\r\n        </div>\r\n        \r\n        <!-- System Section -->\r\n        <div>\r\n          <div *ngIf=\"!collapsed\" class=\"px-4 mb-2\">\r\n            <h2 class=\"text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\r\n              System\r\n            </h2>\r\n          </div>\r\n          \r\n          <!-- Settings Link -->\r\n          <a \r\n            routerLink=\"/settings\" \r\n            routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\" \r\n            class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors mb-1 cursor-pointer\"\r\n            [class.justify-center]=\"collapsed\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n            </svg>\r\n            <span *ngIf=\"!collapsed\" class=\"ml-3\">Settings</span>\r\n          </a>\r\n          \r\n          <!-- Users Link -->\r\n          <a \r\n            routerLink=\"/users\" \r\n            routerLinkActive=\"bg-primary-50 dark:bg-slate-700 text-primary-700 dark:text-primary-400\" \r\n            class=\"flex items-center px-3 py-2 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors mb-1 cursor-pointer\"\r\n            [class.justify-center]=\"collapsed\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z\" />\r\n            </svg>\r\n            <span *ngIf=\"!collapsed\" class=\"ml-3\">Users</span>\r\n          </a>\r\n        </div>\r\n      </nav>\r\n      \r\n      <!-- User Profile & Theme Toggle -->\r\n      <div class=\"border-t border-slate-200 dark:border-slate-700 p-4\">\r\n        <!-- User Profile -->\r\n        <div *ngIf=\"!collapsed\" class=\"flex items-center mb-4\">\r\n          <div class=\"flex-shrink-0\">\r\n            <div class=\"w-10 h-10 rounded-full bg-primary-100 dark:bg-slate-700 flex items-center justify-center text-primary-700 dark:text-primary-400\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          <div class=\"ml-3 flex-1\">\r\n            <p class=\"text-sm font-medium text-slate-900 dark:text-white\">\r\n              {{ currentUser()?.username || 'Guest User' }}\r\n            </p>\r\n            <p class=\"text-xs text-slate-500 dark:text-slate-400\">\r\n              {{ currentUser()?.roles || 'No role assigned' }}\r\n            </p>\r\n          </div>\r\n          <button \r\n            (click)=\"toggleUserMenu()\"\r\n            class=\"p-1 rounded-full text-slate-400 hover:text-slate-500 dark:hover:text-slate-300\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n              <path fill-rule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        \r\n        <!-- User Menu Dropdown -->\r\n        <div *ngIf=\"isUserMenuOpen && !collapsed\" class=\"mt-2 mb-4 py-1 bg-white dark:bg-slate-700 rounded-md shadow-lg border border-slate-200 dark:border-slate-700\">\r\n          <a \r\n            routerLink=\"/profile\" \r\n            class=\"flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 mr-3\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\r\n            </svg>\r\n            My Profile\r\n          </a>\r\n          <a \r\n            (click)=\"logout()\"\r\n            class=\"flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 cursor-pointer\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 mr-3\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\r\n            </svg>\r\n            Logout\r\n          </a>\r\n        </div>\r\n        \r\n        <!-- Theme Toggle -->\r\n        <div [class.flex]=\"!collapsed\" [class.justify-center]=\"collapsed\" class=\"items-center\">\r\n          <button \r\n            (click)=\"toggleTheme()\"\r\n            class=\"p-2 rounded-md text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors w-full flex items-center justify-center sm:justify-start\">\r\n            <svg *ngIf=\"isDarkTheme\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\" />\r\n            </svg>\r\n            <svg *ngIf=\"!isDarkTheme\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\" />\r\n            </svg>\r\n            <span *ngIf=\"!collapsed\" class=\"ml-3\">{{ isDarkTheme ? 'Light Mode' : 'Dark Mode' }}</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </aside>\r\n  `,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    '[class.dark]': 'isDarkTheme',\r\n    '[class.collapsed]': 'collapsed'\r\n  }\r\n})\r\nexport class SidebarComponent implements OnInit, OnDestroy {\r\n  @Input() collapsed = false;\r\n  currentUser = signal<User | null>(null);\r\n  isDarkTheme = false;\r\n  sidebarVisible = true;\r\n  expandedGroups: Set<string> = new Set();\r\n  newOrdersCount = 0; // Example count, replace with actual logic\r\n  private destroy$ = new Subject<void>();\r\n  isUserMenuOpen = false;\r\n\r\n  constructor(\r\n    private themeService: ThemeService,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.isDarkTheme = this.themeService.isDarkTheme();\r\n    this.authService.currentUser$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(user => {\r\n        this.currentUser.set(user);\r\n      });\r\n    this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      takeUntil(this.destroy$)\r\n    ).subscribe(() => {\r\n      this.sidebarVisible = true; // Show sidebar on navigation\r\n    });\r\n  }\r\n\r\n  toggleCollapse(): void {\r\n    this.collapsed = !this.collapsed;\r\n  }\r\n\r\n  toggleGroup(group: string): void {\r\n    if (this.expandedGroups.has(group)) {\r\n      this.expandedGroups.delete(group);\r\n    } else {\r\n      this.expandedGroups.add(group);\r\n    }\r\n  }\r\n  toggleUserMenu(): void {\r\n    this.isUserMenuOpen = !this.isUserMenuOpen;\r\n  }\r\n  toggleTheme(): void {\r\n    this.isDarkTheme = !this.isDarkTheme;\r\n    this.themeService.toggleTheme();\r\n  }\r\n  logout(): void {\r\n    this.authService.logout().then(() => { // Ensure logout is awaited\r\n      this.router.navigate(['/login']); // Redirect to login page after logout\r\n    });\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 281,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "StatisticsComponent",
            "id": "component-StatisticsComponent-3d85309f1273a5a756574cbdf5b69aedb688a0ce51bd048c437553627ca32ab08fe7f41c789da878ed624cc087ff9df0680f612008599a1e872b4cbe3909dd82",
            "file": "src/app/features/statistics/statistics.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-statistics",
            "styleUrls": [],
            "styles": [
                "\n        .bg-primary-50 {\n            background-color: #f0f9ff;\n        }\n        .text-primary-700 {\n            color: #1d4ed8;\n        }\n        .dark:bg-slate-700 {\n            background-color: #374151;\n        }\n        .dark:text-primary-400 {\n            color: #60a5fa;\n        }\n    "
            ],
            "template": "<div class=\"container mx-auto p-4 md:p-6\">\n    <!-- Dashboard Header -->\n    <div class=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-6\">\n        <div>\n            <h1 class=\"text-2xl font-bold text-slate-900 dark:text-white\">Statistics</h1>\n            <p class=\"text-sm text-slate-500 dark:text-slate-400\">Track your store performance and insights</p>\n        </div>\n\n        <div class=\"flex flex-col sm:flex-row gap-3 mt-4 md:mt-0\">\n            <div class=\"inline-flex rounded-md shadow-sm\" role=\"group\">\n                <button\n                    (click)=\"setTimeRange('day')\"\n                    [class.bg-primary-50]=\"timeRange === 'day'\"\n                    [class.text-primary-700]=\"timeRange === 'day'\"\n                    [class.dark:bg-slate-700]=\"timeRange === 'day'\"\n                    [class.dark:text-primary-400]=\"timeRange === 'day'\"\n                    class=\"px-4 py-2 text-sm font-medium text-slate-700 bg-white border border-slate-300 rounded-l-md hover:bg-slate-50 dark:bg-slate-800 dark:border-slate-600 dark:text-slate-300 dark:hover:bg-slate-700\">\n                    Today\n                </button>\n                <button\n                    (click)=\"setTimeRange('week')\"\n                    [class.bg-primary-50]=\"timeRange === 'week'\"\n                    [class.text-primary-700]=\"timeRange === 'week'\"\n                    [class.dark:bg-slate-700]=\"timeRange === 'week'\"\n                    [class.dark:text-primary-400]=\"timeRange === 'week'\"\n                    class=\"px-4 py-2 text-sm font-medium text-slate-700 bg-white border-t border-b border-slate-300 hover:bg-slate-50 dark:bg-slate-800 dark:border-slate-600 dark:text-slate-300 dark:hover:bg-slate-700\">\n                    Week\n                </button>\n                <button\n                    (click)=\"setTimeRange('month')\"\n                    [class.bg-primary-50]=\"timeRange === 'month'\"\n                    [class.text-primary-700]=\"timeRange === 'month'\"\n                    [class.dark:bg-slate-700]=\"timeRange === 'month'\"\n                    [class.dark:text-primary-400]=\"timeRange === 'month'\"\n                    class=\"px-4 py-2 text-sm font-medium text-slate-700 bg-white border border-slate-300 rounded-r-md hover:bg-slate-50 dark:bg-slate-800 dark:border-slate-600 dark:text-slate-300 dark:hover:bg-slate-700\">\n                    Month\n                </button>\n            </div>\n\n            <button\n                class=\"flex items-center px-4 py-2 text-sm font-medium text-slate-700 bg-white border border-slate-300 rounded-md shadow-sm hover:bg-slate-50 dark:bg-slate-800 dark:border-slate-600 dark:text-slate-300 dark:hover:bg-slate-700\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0l-4 4m4-4v12\" />\n                </svg>\n                Export Data\n            </button>\n        </div>\n    </div>\n\n    <!-- Stats Overview Cards -->\n    <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <!-- Total Products -->\n        <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 p-6\">\n            <div class=\"flex justify-between\">\n                <div>\n                    <p class=\"text-sm font-medium text-slate-500 dark:text-slate-400\">Total Products</p>\n                    <p class=\"mt-2 text-3xl font-bold text-slate-900 dark:text-white\">\n                        {{ (stats$ | async)?.totalProducts || 0 }}\n                    </p>\n                    <div class=\"mt-2 flex items-center\">\n                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">From {{ categoryCount }} categories</p>\n                    </div>\n                </div>\n                <div class=\"rounded-full bg-primary-100 dark:bg-primary-900/20 p-3 text-primary-700 dark:text-primary-400\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\n                    </svg>\n                </div>\n            </div>\n            <div class=\"mt-4\">\n                <a routerLink=\"/products/list\" class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 inline-flex items-center\">\n                    View All Products\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\n                    </svg>\n                </a>\n            </div>\n        </div>\n\n        <!-- Active Products -->\n        <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 p-6\">\n            <div class=\"flex justify-between\">\n                <div>\n                    <p class=\"text-sm font-medium text-slate-500 dark:text-slate-400\">Active Products</p>\n                    <p class=\"mt-2 text-3xl font-bold text-slate-900 dark:text-white\">\n                        {{ (stats$ | async)?.activeProductCount || 0 }}\n                    </p>\n                    <div class=\"mt-2 flex items-center\">\n                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">\n                            {{ getActivePercentage((stats$ | async)) }}% of total\n                        </p>\n                    </div>\n                </div>\n                <div class=\"rounded-full bg-emerald-100 dark:bg-emerald-900/20 p-3 text-emerald-700 dark:text-emerald-400\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                    </svg>\n                </div>\n            </div>\n            <div class=\"mt-4\">\n                <a routerLink=\"/products/list\" class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 inline-flex items-center\">\n                    View Active Products\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\n                    </svg>\n                </a>\n            </div>\n        </div>\n\n        <!-- Low Stock Items -->\n        <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 p-6\">\n            <div class=\"flex justify-between\">\n                <div>\n                    <p class=\"text-sm font-medium text-slate-500 dark:text-slate-400\">Low Stock Items</p>\n                    <p class=\"mt-2 text-3xl font-bold text-slate-900 dark:text-white\">\n                        {{ (stats$ | async)?.lowStockCount || 0 }}\n                    </p>\n                    <div class=\"mt-2 flex items-center\">\n                        <p *ngIf=\"(stats$ | async)?.lowStockCount\" class=\"text-xs text-amber-600 dark:text-amber-400 flex items-center\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n                            </svg>\n                            Needs attention\n                        </p>\n                        <p *ngIf=\"!(stats$ | async)?.lowStockCount\" class=\"text-xs text-emerald-600 dark:text-emerald-400 flex items-center\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\n                            </svg>\n                            Stock levels good\n                        </p>\n                    </div>\n                </div>\n                <div class=\"rounded-full bg-amber-100 dark:bg-amber-900/20 p-3 text-amber-700 dark:text-amber-400\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z\" />\n                    </svg>\n                </div>\n            </div>\n            <div class=\"mt-4\">\n                <a routerLink=\"/products/list\" class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 inline-flex items-center\">\n                    View Low Stock\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\n                    </svg>\n                </a>\n            </div>\n        </div>\n\n        <!-- Categories -->\n        <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 p-6\">\n            <div class=\"flex justify-between\">\n                <div>\n                    <p class=\"text-sm font-medium text-slate-500 dark:text-slate-400\">Categories</p>\n                    <p class=\"mt-2 text-3xl font-bold text-slate-900 dark:text-white\">\n                        {{ (stats$ | async)?.totalCategories || 0 }}\n                    </p>\n                    <div class=\"mt-2 flex items-center\">\n                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">\n                            {{ getProductsPerCategory((stats$ | async)) }} prods/category\n                        </p>\n                    </div>\n                </div>\n                <div class=\"rounded-full bg-purple-100 dark:bg-purple-900/20 p-3 text-purple-700 dark:text-purple-400\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\" />\n                    </svg>\n                </div>\n            </div>\n            <div class=\"mt-4\">\n                <a routerLink=\"/categories\" class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 inline-flex items-center\">\n                    Manage Categories\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\n                    </svg>\n                </a>\n            </div>\n        </div>\n    </div>\n\n    <!-- Charts Section -->\n    <div class=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n        <!-- Main Chart -->\n        <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 lg:col-span-2\">\n            <div class=\"flex justify-between items-center p-6 border-b border-slate-200 dark:border-slate-700\">\n                <h2 class=\"text-lg font-medium text-slate-900 dark:text-white\">Sales Overview</h2>\n\n                <div class=\"flex space-x-2\">\n                    <button\n                        [class.bg-primary-600]=\"chartView === 'revenue'\"\n                        [class.text-white]=\"chartView === 'revenue'\"\n                        [class.bg-white]=\"chartView !== 'revenue'\"\n                        [class.dark:bg-slate-700]=\"chartView !== 'revenue'\"\n                        [class.text-slate-700]=\"chartView !== 'revenue'\"\n                        [class.dark:text-white]=\"chartView !== 'revenue'\"\n                        [class.border-slate-300]=\"chartView !== 'revenue'\"\n                        [class.dark:border-slate-600]=\"chartView !== 'revenue'\"\n                        class=\"px-3 py-1 text-sm font-medium rounded-md border transition-colors\"\n                        (click)=\"setChartView('revenue')\">\n                        Revenue\n                    </button>\n                    <button\n                        [class.bg-primary-600]=\"chartView === 'orders'\"\n                        [class.text-white]=\"chartView === 'orders'\"\n                        [class.bg-white]=\"chartView !== 'orders'\"\n                        [class.dark:bg-slate-700]=\"chartView !== 'orders'\"\n                        [class.text-slate-700]=\"chartView !== 'orders'\"\n                        [class.dark:text-white]=\"chartView !== 'orders'\"\n                        [class.border-slate-300]=\"chartView !== 'orders'\"\n                        [class.dark:border-slate-600]=\"chartView !== 'orders'\"\n                        class=\"px-3 py-1 text-sm font-medium rounded-md border transition-colors\"\n                        (click)=\"setChartView('orders')\">\n                        Orders\n                    </button>\n                </div>\n            </div>\n\n            <div class=\"p-6\">\n                <!-- Placeholder for chart -->\n                <div class=\"bg-slate-50 dark:bg-slate-700 rounded-lg p-8 h-72 flex items-center justify-center\">\n                    <div class=\"text-center\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-16 w-16 mx-auto text-slate-300 dark:text-slate-600 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n                        </svg>\n                        <p class=\"text-slate-500 dark:text-slate-400\">\n                            {{ chartView === 'revenue' ? 'Revenue' : 'Orders' }} data visualization will be shown here\n                        </p>\n                        <button class=\"mt-4 px-4 py-2 bg-primary-600 text-white rounded-md text-sm hover:bg-primary-700 transition-colors\">\n                            Generate Chart\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Top Products -->\n        <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700\">\n            <div class=\"flex justify-between items-center p-6 border-b border-slate-200 dark:border-slate-700\">\n                <h2 class=\"text-lg font-medium text-slate-900 dark:text-white\">Top Products</h2>\n                <select\n                    class=\"form-select bg-white dark:bg-slate-700 text-slate-700 dark:text-white border border-slate-300 dark:border-slate-600 rounded-md text-sm transition-all focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500\">\n                    <option value=\"sales\">By Sales</option>\n                    <option value=\"revenue\">By Revenue</option>\n                </select>\n            </div>\n\n            <div class=\"px-6 py-4\">\n                <div class=\"divide-y divide-slate-200 dark:divide-slate-700\">\n                    <!-- Top product items - this would be populated from API data -->\n                    <div class=\"py-3 flex items-center justify-between\">\n                        <div class=\"flex items-center\">\n                            <div class=\"h-10 w-10 bg-slate-100 dark:bg-slate-700 rounded-md flex items-center justify-center mr-3\">\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-slate-400 dark:text-slate-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\n                                </svg>\n                            </div>\n                            <div>\n                                <p class=\"font-medium text-slate-900 dark:text-white\">Wireless Headphones</p>\n                                <p class=\"text-xs text-slate-500 dark:text-slate-400\">Electronics</p>\n                            </div>\n                        </div>\n                        <div class=\"text-right\">\n                            <p class=\"font-medium text-slate-900 dark:text-white\">$1,245.50</p>\n                            <p class=\"text-xs text-emerald-600 dark:text-emerald-400\">+12.5%</p>\n                        </div>\n                    </div>\n\n                    <div class=\"py-3 flex items-center justify-between\">\n                        <div class=\"flex items-center\">\n                            <div class=\"h-10 w-10 bg-slate-100 dark:bg-slate-700 rounded-md flex items-center justify-center mr-3\">\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-slate-400 dark:text-slate-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\n                                </svg>\n                            </div>\n                            <div>\n                                <p class=\"font-medium text-slate-900 dark:text-white\">Smart Watch</p>\n                                <p class=\"text-xs text-slate-500 dark:text-slate-400\">Wearables</p>\n                            </div>\n                        </div>\n                        <div class=\"text-right\">\n                            <p class=\"font-medium text-slate-900 dark:text-white\">$945.20</p>\n                            <p class=\"text-xs text-emerald-600 dark:text-emerald-400\">+8.3%</p>\n                        </div>\n                    </div>\n\n                    <div class=\"py-3 flex items-center justify-between\">\n                        <div class=\"flex items-center\">\n                            <div class=\"h-10 w-10 bg-slate-100 dark:bg-slate-700 rounded-md flex items-center justify-center mr-3\">\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-slate-400 dark:text-slate-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\n                                </svg>\n                            </div>\n                            <div>\n                                <p class=\"font-medium text-slate-900 dark:text-white\">Smartphone Case</p>\n                                <p class=\"text-xs text-slate-500 dark:text-slate-400\">Accessories</p>\n                            </div>\n                        </div>\n                        <div class=\"text-right\">\n                            <p class=\"font-medium text-slate-900 dark:text-white\">$625.40</p>\n                            <p class=\"text-xs text-rose-600 dark:text-rose-400\">-2.1%</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"p-6 border-t border-slate-200 dark:border-slate-700\">\n                <a routerLink=\"/products/list\" class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 inline-flex items-center\">\n                    View All Products\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\n                    </svg>\n                </a>\n            </div>\n        </div>\n    </div>\n\n    <!-- Recent Activity -->\n    <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 mb-8\">\n        <div class=\"flex justify-between items-center p-6 border-b border-slate-200 dark:border-slate-700\">\n            <h2 class=\"text-lg font-medium text-slate-900 dark:text-white\">Recent Activity</h2>\n            <button class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300\">\n                View All\n            </button>\n        </div>\n\n        <div class=\"p-6\">\n            <div class=\"flow-root\">\n                <ul class=\"-my-5 divide-y divide-slate-200 dark:divide-slate-700\">\n                    <li class=\"py-5\">\n                        <div class=\"relative flex items-start space-x-4\">\n                            <div class=\"flex-shrink-0\">\n                                <div class=\"bg-emerald-100 dark:bg-emerald-900/20 rounded-full p-2 text-emerald-700 dark:text-emerald-400\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                                    </svg>\n                                </div>\n                            </div>\n                            <div class=\"min-w-0 flex-1\">\n                                <div class=\"text-sm font-medium text-slate-900 dark:text-white\">\n                                    New product added: Wireless Headphones\n                                </div>\n                                <p class=\"mt-1 text-sm text-slate-500 dark:text-slate-400\">\n                                    Added by John Smith\n                                </p>\n                            </div>\n                            <div class=\"flex-shrink-0 self-center\">\n                                <p class=\"text-xs text-slate-500 dark:text-slate-400\">2 hours ago</p>\n                            </div>\n                        </div>\n                    </li>\n\n                    <li class=\"py-5\">\n                        <div class=\"relative flex items-start space-x-4\">\n                            <div class=\"flex-shrink-0\">\n                                <div class=\"bg-rose-100 dark:bg-rose-900/20 rounded-full p-2 text-rose-700 dark:text-rose-400\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V7m-6 4h6m-6 4h6m-6 4h6m-6 4h6m-9-8l3.5 3.5L15 11\" />\n                                    </svg>\n                                </div>\n                            </div>\n                            <div class=\"min-w-0 flex-1\">\n                                <div class=\"text-sm font-medium text-slate-900 dark:text-white\">\n                                    Order #12345 shipped\n                                </div>\n                                <p class=\"mt-1 text-sm text-slate-500 dark:text-slate-400\">\n                                    Shipped to Jane Doe\n                                </p>\n                            </div>\n                            <div class=\"flex-shrink-0 self-center\">\n                                <p class=\"text-xs text-slate-500 dark:text-slate-400\">5 hours ago</p>\n                            </div>\n                        </div>\n                    </li>\n\n                    <li class=\"py-5\">\n                        <div class=\"relative flex items-start space-x-4\">\n                            <div class=\"flex-shrink-0\">\n                                <div class=\"bg-blue-100 dark:bg-blue-900/20 rounded-full p-2 text-blue-700 dark:text-blue-400\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6 1a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                                    </svg>\n                                </div>\n                            </div>\n                            <div class=\"min-w-0 flex-1\">\n                                <div class=\"text-sm font-medium text-slate-900 dark:text-white\">\n                                    Product stock updated: Smart Watch\n                                </div>\n                                <p class=\"mt-1 text-sm text-slate-500 dark:text-slate-400\">\n                                    Updated by Sarah Connor\n                                </p>\n                            </div>\n                            <div class=\"flex-shrink-0 self-center\">\n                                <p class=\"text-xs text-slate-500 dark:text-slate-400\">1 day ago</p>\n                            </div>\n                        </div>\n                    </li>\n\n                    <li class=\"py-5\">\n                        <div class=\"relative flex items-start space-x-4\">\n                            <div class=\"flex-shrink-0\">\n                                <div class=\"bg-purple-100 dark:bg-purple-900/20 rounded-full p-2 text-purple-700 dark:text-purple-400\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6 1a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                                    </svg>\n                                </div>\n                            </div>\n                            <div class=\"min-w-0 flex-1\">\n                                <div class=\"text-sm font-medium text-slate-900 dark:text-white\">\n                                    New category added: Accessories\n                                </div>\n                                <p class=\"mt-1 text-sm text-slate-500 dark:text-slate-400\">\n                                    Added by John Smith\n                                </p>\n                            </div>\n                            <div class=\"flex-shrink-0 self-center\">\n                                <p class=\"text-xs text-slate-500 dark:text-slate-400\">2 days ago</p>\n                            </div>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categoryCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 482
                },
                {
                    "name": "chartView",
                    "defaultValue": "'revenue'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 481
                },
                {
                    "name": "stats$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Statistics> | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 479
                },
                {
                    "name": "timeRange",
                    "defaultValue": "'day'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 480
                }
            ],
            "methodsClass": [
                {
                    "name": "getActivePercentage",
                    "args": [
                        {
                            "name": "stats",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 501,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "stats",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductsPerCategory",
                    "args": [
                        {
                            "name": "stats",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 505,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "stats",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 487,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setChartView",
                    "args": [
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 497,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTimeRange",
                    "args": [
                        {
                            "name": "range",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 492,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "range",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Observable } from 'rxjs';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { StatisticsService } from '../../core/services/statistics.service';\r\n\r\n// Define Statistics interface\r\nexport interface Statistics {\r\n    totalProducts: number;\r\n    activeProductCount: number;\r\n    lowStockCount: number;\r\n    totalCategories: number;\r\n    // Add other properties used in the component as needed\r\n}\r\n\r\n@Component({\r\n    selector: 'app-statistics',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatSelectModule,\r\n        MatMenuModule,\r\n        MatTooltipModule,\r\n        RouterModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    template: `\r\n        <div class=\"container mx-auto p-4 md:p-6\">\r\n            <!-- Dashboard Header -->\r\n            <div class=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-6\">\r\n                <div>\r\n                    <h1 class=\"text-2xl font-bold text-slate-900 dark:text-white\">Statistics</h1>\r\n                    <p class=\"text-sm text-slate-500 dark:text-slate-400\">Track your store performance and insights</p>\r\n                </div>\r\n                \r\n                <div class=\"flex flex-col sm:flex-row gap-3 mt-4 md:mt-0\">\r\n                    <div class=\"inline-flex rounded-md shadow-sm\" role=\"group\">\r\n                        <button \r\n                            (click)=\"setTimeRange('day')\"\r\n                            [class.bg-primary-50]=\"timeRange === 'day'\"\r\n                            [class.text-primary-700]=\"timeRange === 'day'\"\r\n                            [class.dark:bg-slate-700]=\"timeRange === 'day'\"\r\n                            [class.dark:text-primary-400]=\"timeRange === 'day'\"\r\n                            class=\"px-4 py-2 text-sm font-medium text-slate-700 bg-white border border-slate-300 rounded-l-md hover:bg-slate-50 dark:bg-slate-800 dark:border-slate-600 dark:text-slate-300 dark:hover:bg-slate-700\">\r\n                            Today\r\n                        </button>\r\n                        <button \r\n                            (click)=\"setTimeRange('week')\"\r\n                            [class.bg-primary-50]=\"timeRange === 'week'\"\r\n                            [class.text-primary-700]=\"timeRange === 'week'\"\r\n                            [class.dark:bg-slate-700]=\"timeRange === 'week'\"\r\n                            [class.dark:text-primary-400]=\"timeRange === 'week'\"\r\n                            class=\"px-4 py-2 text-sm font-medium text-slate-700 bg-white border-t border-b border-slate-300 hover:bg-slate-50 dark:bg-slate-800 dark:border-slate-600 dark:text-slate-300 dark:hover:bg-slate-700\">\r\n                            Week\r\n                        </button>\r\n                        <button \r\n                            (click)=\"setTimeRange('month')\"\r\n                            [class.bg-primary-50]=\"timeRange === 'month'\"\r\n                            [class.text-primary-700]=\"timeRange === 'month'\"\r\n                            [class.dark:bg-slate-700]=\"timeRange === 'month'\"\r\n                            [class.dark:text-primary-400]=\"timeRange === 'month'\"\r\n                            class=\"px-4 py-2 text-sm font-medium text-slate-700 bg-white border border-slate-300 rounded-r-md hover:bg-slate-50 dark:bg-slate-800 dark:border-slate-600 dark:text-slate-300 dark:hover:bg-slate-700\">\r\n                            Month\r\n                        </button>\r\n                    </div>\r\n                    \r\n                    <button \r\n                        class=\"flex items-center px-4 py-2 text-sm font-medium text-slate-700 bg-white border border-slate-300 rounded-md shadow-sm hover:bg-slate-50 dark:bg-slate-800 dark:border-slate-600 dark:text-slate-300 dark:hover:bg-slate-700\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0l-4 4m4-4v12\" />\r\n                        </svg>\r\n                        Export Data\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            \r\n            <!-- Stats Overview Cards -->\r\n            <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n                <!-- Total Products -->\r\n                <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 p-6\">\r\n                    <div class=\"flex justify-between\">\r\n                        <div>\r\n                            <p class=\"text-sm font-medium text-slate-500 dark:text-slate-400\">Total Products</p>\r\n                            <p class=\"mt-2 text-3xl font-bold text-slate-900 dark:text-white\">\r\n                                {{ (stats$ | async)?.totalProducts || 0 }}\r\n                            </p>\r\n                            <div class=\"mt-2 flex items-center\">\r\n                                <p class=\"text-xs text-slate-500 dark:text-slate-400\">From {{ categoryCount }} categories</p>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"rounded-full bg-primary-100 dark:bg-primary-900/20 p-3 text-primary-700 dark:text-primary-400\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n                            </svg>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"mt-4\">\r\n                        <a routerLink=\"/products/list\" class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 inline-flex items-center\">\r\n                            View All Products\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\r\n                            </svg>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                \r\n                <!-- Active Products -->\r\n                <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 p-6\">\r\n                    <div class=\"flex justify-between\">\r\n                        <div>\r\n                            <p class=\"text-sm font-medium text-slate-500 dark:text-slate-400\">Active Products</p>\r\n                            <p class=\"mt-2 text-3xl font-bold text-slate-900 dark:text-white\">\r\n                                {{ (stats$ | async)?.activeProductCount || 0 }}\r\n                            </p>\r\n                            <div class=\"mt-2 flex items-center\">\r\n                                <p class=\"text-xs text-slate-500 dark:text-slate-400\">\r\n                                    {{ getActivePercentage((stats$ | async)) }}% of total\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"rounded-full bg-emerald-100 dark:bg-emerald-900/20 p-3 text-emerald-700 dark:text-emerald-400\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                            </svg>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"mt-4\">\r\n                        <a routerLink=\"/products/list\" class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 inline-flex items-center\">\r\n                            View Active Products\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\r\n                            </svg>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                \r\n                <!-- Low Stock Items -->\r\n                <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 p-6\">\r\n                    <div class=\"flex justify-between\">\r\n                        <div>\r\n                            <p class=\"text-sm font-medium text-slate-500 dark:text-slate-400\">Low Stock Items</p>\r\n                            <p class=\"mt-2 text-3xl font-bold text-slate-900 dark:text-white\">\r\n                                {{ (stats$ | async)?.lowStockCount || 0 }}\r\n                            </p>\r\n                            <div class=\"mt-2 flex items-center\">\r\n                                <p *ngIf=\"(stats$ | async)?.lowStockCount\" class=\"text-xs text-amber-600 dark:text-amber-400 flex items-center\">\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\r\n                                    </svg>\r\n                                    Needs attention\r\n                                </p>\r\n                                <p *ngIf=\"!(stats$ | async)?.lowStockCount\" class=\"text-xs text-emerald-600 dark:text-emerald-400 flex items-center\">\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\r\n                                    </svg>\r\n                                    Stock levels good\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"rounded-full bg-amber-100 dark:bg-amber-900/20 p-3 text-amber-700 dark:text-amber-400\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z\" />\r\n                            </svg>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"mt-4\">\r\n                        <a routerLink=\"/products/list\" class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 inline-flex items-center\">\r\n                            View Low Stock\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\r\n                            </svg>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                \r\n                <!-- Categories -->\r\n                <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 p-6\">\r\n                    <div class=\"flex justify-between\">\r\n                        <div>\r\n                            <p class=\"text-sm font-medium text-slate-500 dark:text-slate-400\">Categories</p>\r\n                            <p class=\"mt-2 text-3xl font-bold text-slate-900 dark:text-white\">\r\n                                {{ (stats$ | async)?.totalCategories || 0 }}\r\n                            </p>\r\n                            <div class=\"mt-2 flex items-center\">\r\n                                <p class=\"text-xs text-slate-500 dark:text-slate-400\">\r\n                                    {{ getProductsPerCategory((stats$ | async)) }} prods/category\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"rounded-full bg-purple-100 dark:bg-purple-900/20 p-3 text-purple-700 dark:text-purple-400\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\" />\r\n                            </svg>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"mt-4\">\r\n                        <a routerLink=\"/categories\" class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 inline-flex items-center\">\r\n                            Manage Categories\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\r\n                            </svg>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <!-- Charts Section -->\r\n            <div class=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\r\n                <!-- Main Chart -->\r\n                <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 lg:col-span-2\">\r\n                    <div class=\"flex justify-between items-center p-6 border-b border-slate-200 dark:border-slate-700\">\r\n                        <h2 class=\"text-lg font-medium text-slate-900 dark:text-white\">Sales Overview</h2>\r\n                        \r\n                        <div class=\"flex space-x-2\">\r\n                            <button\r\n                                [class.bg-primary-600]=\"chartView === 'revenue'\"\r\n                                [class.text-white]=\"chartView === 'revenue'\"\r\n                                [class.bg-white]=\"chartView !== 'revenue'\"\r\n                                [class.dark:bg-slate-700]=\"chartView !== 'revenue'\"\r\n                                [class.text-slate-700]=\"chartView !== 'revenue'\"\r\n                                [class.dark:text-white]=\"chartView !== 'revenue'\"\r\n                                [class.border-slate-300]=\"chartView !== 'revenue'\"\r\n                                [class.dark:border-slate-600]=\"chartView !== 'revenue'\"\r\n                                class=\"px-3 py-1 text-sm font-medium rounded-md border transition-colors\"\r\n                                (click)=\"setChartView('revenue')\">\r\n                                Revenue\r\n                            </button>\r\n                            <button\r\n                                [class.bg-primary-600]=\"chartView === 'orders'\"\r\n                                [class.text-white]=\"chartView === 'orders'\"\r\n                                [class.bg-white]=\"chartView !== 'orders'\"\r\n                                [class.dark:bg-slate-700]=\"chartView !== 'orders'\"\r\n                                [class.text-slate-700]=\"chartView !== 'orders'\"\r\n                                [class.dark:text-white]=\"chartView !== 'orders'\"\r\n                                [class.border-slate-300]=\"chartView !== 'orders'\"\r\n                                [class.dark:border-slate-600]=\"chartView !== 'orders'\"\r\n                                class=\"px-3 py-1 text-sm font-medium rounded-md border transition-colors\"\r\n                                (click)=\"setChartView('orders')\">\r\n                                Orders\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"p-6\">\r\n                        <!-- Placeholder for chart -->\r\n                        <div class=\"bg-slate-50 dark:bg-slate-700 rounded-lg p-8 h-72 flex items-center justify-center\">\r\n                            <div class=\"text-center\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-16 w-16 mx-auto text-slate-300 dark:text-slate-600 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\r\n                                </svg>\r\n                                <p class=\"text-slate-500 dark:text-slate-400\">\r\n                                    {{ chartView === 'revenue' ? 'Revenue' : 'Orders' }} data visualization will be shown here\r\n                                </p>\r\n                                <button class=\"mt-4 px-4 py-2 bg-primary-600 text-white rounded-md text-sm hover:bg-primary-700 transition-colors\">\r\n                                    Generate Chart\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <!-- Top Products -->\r\n                <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700\">\r\n                    <div class=\"flex justify-between items-center p-6 border-b border-slate-200 dark:border-slate-700\">\r\n                        <h2 class=\"text-lg font-medium text-slate-900 dark:text-white\">Top Products</h2>\r\n                        <select\r\n                            class=\"form-select bg-white dark:bg-slate-700 text-slate-700 dark:text-white border border-slate-300 dark:border-slate-600 rounded-md text-sm transition-all focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500\">\r\n                            <option value=\"sales\">By Sales</option>\r\n                            <option value=\"revenue\">By Revenue</option>\r\n                        </select>\r\n                    </div>\r\n                    \r\n                    <div class=\"px-6 py-4\">\r\n                        <div class=\"divide-y divide-slate-200 dark:divide-slate-700\">\r\n                            <!-- Top product items - this would be populated from API data -->\r\n                            <div class=\"py-3 flex items-center justify-between\">\r\n                                <div class=\"flex items-center\">\r\n                                    <div class=\"h-10 w-10 bg-slate-100 dark:bg-slate-700 rounded-md flex items-center justify-center mr-3\">\r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-slate-400 dark:text-slate-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n                                        </svg>\r\n                                    </div>\r\n                                    <div>\r\n                                        <p class=\"font-medium text-slate-900 dark:text-white\">Wireless Headphones</p>\r\n                                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">Electronics</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"text-right\">\r\n                                    <p class=\"font-medium text-slate-900 dark:text-white\">$1,245.50</p>\r\n                                    <p class=\"text-xs text-emerald-600 dark:text-emerald-400\">+12.5%</p>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div class=\"py-3 flex items-center justify-between\">\r\n                                <div class=\"flex items-center\">\r\n                                    <div class=\"h-10 w-10 bg-slate-100 dark:bg-slate-700 rounded-md flex items-center justify-center mr-3\">\r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-slate-400 dark:text-slate-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n                                        </svg>\r\n                                    </div>\r\n                                    <div>\r\n                                        <p class=\"font-medium text-slate-900 dark:text-white\">Smart Watch</p>\r\n                                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">Wearables</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"text-right\">\r\n                                    <p class=\"font-medium text-slate-900 dark:text-white\">$945.20</p>\r\n                                    <p class=\"text-xs text-emerald-600 dark:text-emerald-400\">+8.3%</p>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div class=\"py-3 flex items-center justify-between\">\r\n                                <div class=\"flex items-center\">\r\n                                    <div class=\"h-10 w-10 bg-slate-100 dark:bg-slate-700 rounded-md flex items-center justify-center mr-3\">\r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-slate-400 dark:text-slate-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n                                        </svg>\r\n                                    </div>\r\n                                    <div>\r\n                                        <p class=\"font-medium text-slate-900 dark:text-white\">Smartphone Case</p>\r\n                                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">Accessories</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"text-right\">\r\n                                    <p class=\"font-medium text-slate-900 dark:text-white\">$625.40</p>\r\n                                    <p class=\"text-xs text-rose-600 dark:text-rose-400\">-2.1%</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"p-6 border-t border-slate-200 dark:border-slate-700\">\r\n                        <a routerLink=\"/products/list\" class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 inline-flex items-center\">\r\n                            View All Products\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\r\n                            </svg>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <!-- Recent Activity -->\r\n            <div class=\"bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 mb-8\">\r\n                <div class=\"flex justify-between items-center p-6 border-b border-slate-200 dark:border-slate-700\">\r\n                    <h2 class=\"text-lg font-medium text-slate-900 dark:text-white\">Recent Activity</h2>\r\n                    <button class=\"text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300\">\r\n                        View All\r\n                    </button>\r\n                </div>\r\n                \r\n                <div class=\"p-6\">\r\n                    <div class=\"flow-root\">\r\n                        <ul class=\"-my-5 divide-y divide-slate-200 dark:divide-slate-700\">\r\n                            <li class=\"py-5\">\r\n                                <div class=\"relative flex items-start space-x-4\">\r\n                                    <div class=\"flex-shrink-0\">\r\n                                        <div class=\"bg-emerald-100 dark:bg-emerald-900/20 rounded-full p-2 text-emerald-700 dark:text-emerald-400\">\r\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                                            </svg>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"min-w-0 flex-1\">\r\n                                        <div class=\"text-sm font-medium text-slate-900 dark:text-white\">\r\n                                            New product added: Wireless Headphones\r\n                                        </div>\r\n                                        <p class=\"mt-1 text-sm text-slate-500 dark:text-slate-400\">\r\n                                            Added by John Smith\r\n                                        </p>\r\n                                    </div>\r\n                                    <div class=\"flex-shrink-0 self-center\">\r\n                                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">2 hours ago</p>\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n                            \r\n                            <li class=\"py-5\">\r\n                                <div class=\"relative flex items-start space-x-4\">\r\n                                    <div class=\"flex-shrink-0\">\r\n                                        <div class=\"bg-rose-100 dark:bg-rose-900/20 rounded-full p-2 text-rose-700 dark:text-rose-400\">\r\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V7m-6 4h6m-6 4h6m-6 4h6m-6 4h6m-9-8l3.5 3.5L15 11\" />\r\n                                            </svg>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"min-w-0 flex-1\">\r\n                                        <div class=\"text-sm font-medium text-slate-900 dark:text-white\">\r\n                                            Order #12345 shipped\r\n                                        </div>\r\n                                        <p class=\"mt-1 text-sm text-slate-500 dark:text-slate-400\">\r\n                                            Shipped to Jane Doe\r\n                                        </p>\r\n                                    </div>\r\n                                    <div class=\"flex-shrink-0 self-center\">\r\n                                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">5 hours ago</p>\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n\r\n                            <li class=\"py-5\">\r\n                                <div class=\"relative flex items-start space-x-4\">\r\n                                    <div class=\"flex-shrink-0\">\r\n                                        <div class=\"bg-blue-100 dark:bg-blue-900/20 rounded-full p-2 text-blue-700 dark:text-blue-400\">\r\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6 1a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                                            </svg>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"min-w-0 flex-1\">\r\n                                        <div class=\"text-sm font-medium text-slate-900 dark:text-white\">\r\n                                            Product stock updated: Smart Watch\r\n                                        </div>\r\n                                        <p class=\"mt-1 text-sm text-slate-500 dark:text-slate-400\">\r\n                                            Updated by Sarah Connor\r\n                                        </p>\r\n                                    </div>\r\n                                    <div class=\"flex-shrink-0 self-center\">\r\n                                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">1 day ago</p>\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n\r\n                            <li class=\"py-5\">\r\n                                <div class=\"relative flex items-start space-x-4\">\r\n                                    <div class=\"flex-shrink-0\">\r\n                                        <div class=\"bg-purple-100 dark:bg-purple-900/20 rounded-full p-2 text-purple-700 dark:text-purple-400\">\r\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6 1a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                                            </svg>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"min-w-0 flex-1\">\r\n                                        <div class=\"text-sm font-medium text-slate-900 dark:text-white\">\r\n                                            New category added: Accessories\r\n                                        </div>\r\n                                        <p class=\"mt-1 text-sm text-slate-500 dark:text-slate-400\">\r\n                                            Added by John Smith\r\n                                        </p>\r\n                                    </div>\r\n                                    <div class=\"flex-shrink-0 self-center\">\r\n                                        <p class=\"text-xs text-slate-500 dark:text-slate-400\">2 days ago</p>\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .bg-primary-50 {\r\n            background-color: #f0f9ff;\r\n        }\r\n        .text-primary-700 {\r\n            color: #1d4ed8;\r\n        }\r\n        .dark\\:bg-slate-700 {\r\n            background-color: #374151;\r\n        }\r\n        .dark\\:text-primary-400 {\r\n            color: #60a5fa;\r\n        }\r\n    `]\r\n})\r\nexport class StatisticsComponent implements OnInit {\r\n    stats$: Observable<Statistics> | undefined;\r\n    timeRange: string = 'day';\r\n    chartView: string = 'revenue';\r\n    categoryCount: number = 0;\r\n\r\n\r\n    constructor(private statisticsService: StatisticsService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.stats$ = this.statisticsService.getStatistics();\r\n        this.categoryCount = this.statisticsService.getCategoryCount();\r\n    }\r\n\r\n    setTimeRange(range: string): void {\r\n        this.timeRange = range;\r\n        this.stats$ = this.statisticsService.getStatistics(range);\r\n    }\r\n\r\n    setChartView(view: string): void {\r\n        this.chartView = view;\r\n    }\r\n\r\n    getActivePercentage(stats: any): string {\r\n        return ((stats.activeProductCount / stats.totalProducts) * 100).toFixed(2);\r\n    }\r\n\r\n    getProductsPerCategory(stats: any): string {\r\n        return (stats.totalProducts / stats.totalCategories).toFixed(2);\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        .bg-primary-50 {\n            background-color: #f0f9ff;\n        }\n        .text-primary-700 {\n            color: #1d4ed8;\n        }\n        .dark:bg-slate-700 {\n            background-color: #374151;\n        }\n        .dark:text-primary-400 {\n            color: #60a5fa;\n        }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "statisticsService",
                        "type": "StatisticsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 482,
                "jsdoctags": [
                    {
                        "name": "statisticsService",
                        "type": "StatisticsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "StatusBadgeComponent",
            "id": "component-StatusBadgeComponent-aa39bdd2e61bc10e847b032f61c0841aed9bfa543af90d818c9771231923c77f1e7e98180021c07c8641cd66d5fc6476babf6a1bc3e0a75921686d745bbbfec6",
            "file": "src/app/shared/components/badges/status-badge.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-status-badge",
            "styleUrls": [],
            "styles": [
                "\n    .status-badge {\n      padding: 0.25rem 0.5rem;\n      border-radius: 9999px;\n      font-size: 0.875rem;\n      font-weight: 500;\n      text-transform: capitalize;\n    }\n\n    .pending {\n      background-color: rgb(250, 204, 21, 0.2);\n      color: rgb(161, 98, 7);\n    }\n\n    .confirmed {\n      background-color: rgb(37, 99, 235, 0.2);\n      color: rgb(29, 78, 216);\n    }\n\n    .processing {\n      background-color: rgb(147, 51, 234, 0.2);\n      color: rgb(126, 34, 206);\n    }\n\n    .shipped {\n      background-color: rgb(6, 182, 212, 0.2);\n      color: rgb(14, 116, 144);\n    }\n\n    .delivered {\n      background-color: rgb(34, 197, 94, 0.2);\n      color: rgb(21, 128, 61);\n    }\n\n    .cancelled {\n      background-color: rgb(239, 68, 68, 0.2);\n      color: rgb(185, 28, 28);\n    }\n  "
            ],
            "template": "<span class=\"status-badge\" [ngClass]=\"statusClass\">\n  {{ text }}\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { NgClass } from '@angular/common';\r\n\r\n@Component({\r\n    standalone: true,\r\n    imports: [NgClass],\r\n    selector: 'app-status-badge',\r\n    template: `\r\n    <span class=\"status-badge\" [ngClass]=\"statusClass\">\r\n      {{ text }}\r\n    </span>\r\n  `,\r\n    styles: [`\r\n    .status-badge {\r\n      padding: 0.25rem 0.5rem;\r\n      border-radius: 9999px;\r\n      font-size: 0.875rem;\r\n      font-weight: 500;\r\n      text-transform: capitalize;\r\n    }\r\n\r\n    .pending {\r\n      background-color: rgb(250, 204, 21, 0.2);\r\n      color: rgb(161, 98, 7);\r\n    }\r\n\r\n    .confirmed {\r\n      background-color: rgb(37, 99, 235, 0.2);\r\n      color: rgb(29, 78, 216);\r\n    }\r\n\r\n    .processing {\r\n      background-color: rgb(147, 51, 234, 0.2);\r\n      color: rgb(126, 34, 206);\r\n    }\r\n\r\n    .shipped {\r\n      background-color: rgb(6, 182, 212, 0.2);\r\n      color: rgb(14, 116, 144);\r\n    }\r\n\r\n    .delivered {\r\n      background-color: rgb(34, 197, 94, 0.2);\r\n      color: rgb(21, 128, 61);\r\n    }\r\n\r\n    .cancelled {\r\n      background-color: rgb(239, 68, 68, 0.2);\r\n      color: rgb(185, 28, 28);\r\n    }\r\n  `]\r\n})\r\nexport class StatusBadgeComponent {\r\n    @Input() status!: string;\r\n\r\n    get statusClass(): string {\r\n        return this.status.toLowerCase();\r\n    }\r\n\r\n    get text(): string {\r\n        return this.status.charAt(0).toUpperCase() + this.status.slice(1).toLowerCase();\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .status-badge {\n      padding: 0.25rem 0.5rem;\n      border-radius: 9999px;\n      font-size: 0.875rem;\n      font-weight: 500;\n      text-transform: capitalize;\n    }\n\n    .pending {\n      background-color: rgb(250, 204, 21, 0.2);\n      color: rgb(161, 98, 7);\n    }\n\n    .confirmed {\n      background-color: rgb(37, 99, 235, 0.2);\n      color: rgb(29, 78, 216);\n    }\n\n    .processing {\n      background-color: rgb(147, 51, 234, 0.2);\n      color: rgb(126, 34, 206);\n    }\n\n    .shipped {\n      background-color: rgb(6, 182, 212, 0.2);\n      color: rgb(14, 116, 144);\n    }\n\n    .delivered {\n      background-color: rgb(34, 197, 94, 0.2);\n      color: rgb(21, 128, 61);\n    }\n\n    .cancelled {\n      background-color: rgb(239, 68, 68, 0.2);\n      color: rgb(185, 28, 28);\n    }\n  \n",
            "extends": [],
            "accessors": {
                "statusClass": {
                    "name": "statusClass",
                    "getSignature": {
                        "name": "statusClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 56
                    }
                },
                "text": {
                    "name": "text",
                    "getSignature": {
                        "name": "text",
                        "type": "string",
                        "returnType": "string",
                        "line": 60
                    }
                }
            }
        },
        {
            "name": "StockAdjustmentDialogComponent",
            "id": "component-StockAdjustmentDialogComponent-072ebcff6ae4e7bbcdcf7b106fa64f9edb18dfd63f71a56a26a25792d84271ec083a85eb881769b03b2e8fa2597d41324e3a2636be7359ab744eb734b629c0ae",
            "file": "src/app/features/products/components/stock-management/stock-adjustment-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stock-adjustment-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"stock-adjustment-dialog\">\n    <!-- Dialog Header -->\n    <div class=\"flex items-center justify-between px-6 py-4 border-b border-slate-200 dark:border-slate-700\">\n        <h2 class=\"text-xl font-medium text-slate-900 dark:text-white\">Adjust Stock</h2>\n        <button mat-icon-button [mat-dialog-close]=\"false\"\n            class=\"text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-full transition-colors\">\n            <mat-icon>close</mat-icon>\n        </button>\n    </div>\n\n    <!-- Product Info -->\n    <div class=\"px-6 pt-6\">\n        <div class=\"bg-slate-50 dark:bg-slate-700 rounded-lg p-4 mb-6 border border-slate-200 dark:border-slate-700\">\n            <div class=\"grid grid-cols-2 gap-2\">\n                <p class=\"text-sm text-slate-500 dark:text-slate-400\">Product:</p>\n                <p class=\"text-sm font-medium text-slate-900 dark:text-white\">{{ data.productName }}</p>\n\n                <p class=\"text-sm text-slate-500 dark:text-slate-400\">Current Stock:</p>\n                <p class=\"text-sm font-medium\">\n                    <span class=\"px-2 py-1 bg-slate-100 dark:bg-slate-700 rounded-full text-slate-700 dark:text-slate-300 font-medium\">\n                        {{ data.currentStock }}\n                    </span>\n                </p>\n            </div>\n        </div>\n    </div>\n\n    <!-- Form -->\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" class=\"px-6 pb-6\">\n        <div class=\"grid grid-cols-1 gap-4\">\n            <mat-form-field  class=\"w-full\">\n                <mat-label>Adjustment Amount</mat-label>\n                <input matInput type=\"number\" formControlName=\"adjustment\" placeholder=\"Enter adjustment value\">\n                <mat-hint class=\"text-xs text-orange-500\">Use positive value to add stock, negative to remove</mat-hint>\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('adjustment')?.errors?.['required']\">\n                    Adjustment amount is required\n                </mat-error>\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('adjustment')?.errors?.['max']\">\n                    Adjustment cannot exceed 10,000 units\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field  class=\"w-full\">\n                <mat-label>Reason</mat-label>\n                <textarea matInput formControlName=\"reason\" rows=\"3\"\n                    placeholder=\"Explain reason for adjustment\"></textarea>\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('reason')?.errors?.['required']\">\n                    Reason is required\n                </mat-error>\n            </mat-form-field>\n        </div>\n\n        <!-- Dialog Actions -->\n        <div class=\"flex justify-end gap-3 mt-6 pt-6 border-t border-slate-200 dark:border-slate-700\">\n            <button mat-button type=\"button\" [mat-dialog-close]=\"false\"\n                class=\"border border-slate-300 dark:border-slate-600 px-4 py-1 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-700\">\n                Cancel\n            </button>\n            <button mat-raised-button color=\"primary\" type=\"submit\"\n                class=\"bg-primary-600 text-white px-4 py-1 rounded-md hover:bg-primary-700 transition-colors flex items-center\"\n                [disabled]=\"form.invalid || form.pristine\">\n                <span>Adjust Stock</span>\n                <mat-icon class=\"ml-1\">save</mat-icon>\n            </button>\n        </div>\n    </form>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 103
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Store } from '@ngrx/store';\r\nimport { StockActions } from '../../../../store/stock/stock.actions';\r\n\r\ninterface DialogData {\r\n    productId: string;\r\n    productName: string;\r\n    currentStock: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-stock-adjustment-dialog',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        MatDialogModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatIconModule\r\n    ],\r\n    template: `\r\n        <div class=\"stock-adjustment-dialog\">\r\n            <!-- Dialog Header -->\r\n            <div class=\"flex items-center justify-between px-6 py-4 border-b border-slate-200 dark:border-slate-700\">\r\n                <h2 class=\"text-xl font-medium text-slate-900 dark:text-white\">Adjust Stock</h2>\r\n                <button mat-icon-button [mat-dialog-close]=\"false\"\r\n                    class=\"text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-full transition-colors\">\r\n                    <mat-icon>close</mat-icon>\r\n                </button>\r\n            </div>\r\n\r\n            <!-- Product Info -->\r\n            <div class=\"px-6 pt-6\">\r\n                <div class=\"bg-slate-50 dark:bg-slate-700 rounded-lg p-4 mb-6 border border-slate-200 dark:border-slate-700\">\r\n                    <div class=\"grid grid-cols-2 gap-2\">\r\n                        <p class=\"text-sm text-slate-500 dark:text-slate-400\">Product:</p>\r\n                        <p class=\"text-sm font-medium text-slate-900 dark:text-white\">{{ data.productName }}</p>\r\n\r\n                        <p class=\"text-sm text-slate-500 dark:text-slate-400\">Current Stock:</p>\r\n                        <p class=\"text-sm font-medium\">\r\n                            <span class=\"px-2 py-1 bg-slate-100 dark:bg-slate-700 rounded-full text-slate-700 dark:text-slate-300 font-medium\">\r\n                                {{ data.currentStock }}\r\n                            </span>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Form -->\r\n            <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" class=\"px-6 pb-6\">\r\n                <div class=\"grid grid-cols-1 gap-4\">\r\n                    <mat-form-field  class=\"w-full\">\r\n                        <mat-label>Adjustment Amount</mat-label>\r\n                        <input matInput type=\"number\" formControlName=\"adjustment\" placeholder=\"Enter adjustment value\">\r\n                        <mat-hint class=\"text-xs text-orange-500\">Use positive value to add stock, negative to remove</mat-hint>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('adjustment')?.errors?.['required']\">\r\n                            Adjustment amount is required\r\n                        </mat-error>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('adjustment')?.errors?.['max']\">\r\n                            Adjustment cannot exceed 10,000 units\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field  class=\"w-full\">\r\n                        <mat-label>Reason</mat-label>\r\n                        <textarea matInput formControlName=\"reason\" rows=\"3\"\r\n                            placeholder=\"Explain reason for adjustment\"></textarea>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('reason')?.errors?.['required']\">\r\n                            Reason is required\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n                <!-- Dialog Actions -->\r\n                <div class=\"flex justify-end gap-3 mt-6 pt-6 border-t border-slate-200 dark:border-slate-700\">\r\n                    <button mat-button type=\"button\" [mat-dialog-close]=\"false\"\r\n                        class=\"border border-slate-300 dark:border-slate-600 px-4 py-1 rounded-md text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-700\">\r\n                        Cancel\r\n                    </button>\r\n                    <button mat-raised-button color=\"primary\" type=\"submit\"\r\n                        class=\"bg-primary-600 text-white px-4 py-1 rounded-md hover:bg-primary-700 transition-colors flex items-center\"\r\n                        [disabled]=\"form.invalid || form.pristine\">\r\n                        <span>Adjust Stock</span>\r\n                        <mat-icon class=\"ml-1\">save</mat-icon>\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    `,\r\n    styles: []\r\n})\r\nexport class StockAdjustmentDialogComponent {\r\n    form: FormGroup;\r\n\r\n    constructor(\r\n        private readonly fb: FormBuilder,\r\n        private readonly dialogRef: MatDialogRef<StockAdjustmentDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: DialogData,\r\n        private readonly store: Store\r\n    ) {\r\n        this.form = this.fb.group({\r\n            adjustment: [0, [Validators.required, Validators.max(10000)]],\r\n            reason: ['', Validators.required]\r\n        });\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.form.valid) {\r\n            const { adjustment, reason } = this.form.value;\r\n\r\n            this.store.dispatch(StockActions.adjustStock({\r\n                adjustment: {\r\n                    productId: this.data.productId,\r\n                    adjustment,\r\n                    reason\r\n                }\r\n            }));\r\n\r\n            this.dialogRef.close(true);\r\n        }\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<StockAdjustmentDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 103,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<StockAdjustmentDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "StockAlertsComponent",
            "id": "component-StockAlertsComponent-ce1ef02456158d6c7bc89f25af9f57f9dc9712d2bc5ace9eb910b2b6d3f38b77051b72e58ce4f5e7a77e13c50810493af73a11651eb65cfbc5e126851996d161",
            "file": "src/app/features/dashboard/components/stock-alerts/stock-alerts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stock-alerts",
            "styleUrls": [],
            "styles": [
                "\n        .stock-alerts-container {\n            padding: 1rem;\n\n            h2 {\n                margin-bottom: 1rem;\n                color: var(--text-primary);\n            }\n        }\n\n        .alerts-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 1rem;\n        }\n\n        .alert-card {\n            background-color: var(--bg-secondary);\n\n            &.out-of-stock {\n                border-left: 4px solid var(--error);\n            }\n\n            &.low-stock {\n                border-left: 4px solid var(--warning);\n            }\n\n            mat-card-title {\n                display: flex;\n                align-items: center;\n                gap: 0.5rem;\n                color: var(--text-primary);\n\n                mat-icon {\n                    width: 24px;\n                    height: 24px;\n                }\n            }\n        }\n\n        .alerts-list {\n            list-style: none;\n            padding: 0;\n            margin: 0;\n\n            li {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                padding: 0.5rem 0;\n                border-bottom: 1px solid var(--border);\n\n                &:last-child {\n                    border-bottom: none;\n                }\n            }\n        }\n\n        .alert-info {\n            display: flex;\n            flex-direction: column;\n            gap: 0.25rem;\n\n            .product-name {\n                color: var(--text-primary);\n                font-weight: 500;\n            }\n\n            .stock-count {\n                color: var(--text-secondary);\n                font-size: 0.875rem;\n            }\n        }\n\n        .no-alerts {\n            color: var(--text-secondary);\n            font-style: italic;\n            margin: 1rem 0;\n        }\n    "
            ],
            "template": "<div class=\"stock-alerts-container\">\n    <h2>Stock Alerts</h2>\n\n    <div class=\"alerts-grid\">\n        <!-- Out of Stock Alerts -->\n        <mat-card class=\"alert-card out-of-stock\">\n            <mat-card-header>\n                <mat-card-title>\n                    <mat-icon>warning</mat-icon>\n                    Out of Stock Items\n                </mat-card-title>\n            </mat-card-header>\n            <mat-card-content>\n                @if (outOfStockAlerts$ | async; as alerts) {\n                    @if (alerts.length === 0) {\n                        <p class=\"no-alerts\">No out of stock items</p>\n                    } @else {\n                        <ul class=\"alerts-list\">\n                            @for (alert of alerts; track alert.productId) {\n                                <li>\n                                    <span class=\"product-name\">{{ alert.productName }}</span>\n                                    <button mat-button color=\"primary\"\n                                            [routerLink]=\"['/products', alert.productId]\">\n                                        View Product\n                                    </button>\n                                </li>\n                            }\n                        </ul>\n                    }\n                }\n            </mat-card-content>\n        </mat-card>\n\n        <!-- Low Stock Alerts -->\n        <mat-card class=\"alert-card low-stock\">\n            <mat-card-header>\n                <mat-card-title>\n                    <mat-icon>info</mat-icon>\n                    Low Stock Items\n                </mat-card-title>\n            </mat-card-header>\n            <mat-card-content>\n                @if (lowStockAlerts$ | async; as alerts) {\n                    @if (alerts.length === 0) {\n                        <p class=\"no-alerts\">No low stock items</p>\n                    } @else {\n                        <ul class=\"alerts-list\">\n                            @for (alert of alerts; track alert.productId) {\n                                <li>\n                                    <div class=\"alert-info\">\n                                        <span class=\"product-name\">{{ alert.productName }}</span>\n                                        <span class=\"stock-count\">\n                                            {{ alert.availableStock }} remaining\n                                        </span>\n                                    </div>\n                                    <button mat-button color=\"primary\"\n                                            [routerLink]=\"['/products', alert.productId]\">\n                                        View Product\n                                    </button>\n                                </li>\n                            }\n                        </ul>\n                    }\n                }\n            </mat-card-content>\n        </mat-card>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "lowStockAlerts$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<StockItem[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 176
                },
                {
                    "name": "outOfStockAlerts$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<StockItem[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 177
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { StockItem } from 'src/app/shared/models/stock.model';\r\nimport { StockActions } from '../../../../store/stock/stock.actions';\r\nimport { selectLowStockAlerts, selectOutOfStockAlerts } from '../../../../store/stock/stock.selectors';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-stock-alerts',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        RouterModule\r\n    ],\r\n    template: `\r\n        <div class=\"stock-alerts-container\">\r\n            <h2>Stock Alerts</h2>\r\n\r\n            <div class=\"alerts-grid\">\r\n                <!-- Out of Stock Alerts -->\r\n                <mat-card class=\"alert-card out-of-stock\">\r\n                    <mat-card-header>\r\n                        <mat-card-title>\r\n                            <mat-icon>warning</mat-icon>\r\n                            Out of Stock Items\r\n                        </mat-card-title>\r\n                    </mat-card-header>\r\n                    <mat-card-content>\r\n                        @if (outOfStockAlerts$ | async; as alerts) {\r\n                            @if (alerts.length === 0) {\r\n                                <p class=\"no-alerts\">No out of stock items</p>\r\n                            } @else {\r\n                                <ul class=\"alerts-list\">\r\n                                    @for (alert of alerts; track alert.productId) {\r\n                                        <li>\r\n                                            <span class=\"product-name\">{{ alert.productName }}</span>\r\n                                            <button mat-button color=\"primary\" \r\n                                                    [routerLink]=\"['/products', alert.productId]\">\r\n                                                View Product\r\n                                            </button>\r\n                                        </li>\r\n                                    }\r\n                                </ul>\r\n                            }\r\n                        }\r\n                    </mat-card-content>\r\n                </mat-card>\r\n\r\n                <!-- Low Stock Alerts -->\r\n                <mat-card class=\"alert-card low-stock\">\r\n                    <mat-card-header>\r\n                        <mat-card-title>\r\n                            <mat-icon>info</mat-icon>\r\n                            Low Stock Items\r\n                        </mat-card-title>\r\n                    </mat-card-header>\r\n                    <mat-card-content>\r\n                        @if (lowStockAlerts$ | async; as alerts) {\r\n                            @if (alerts.length === 0) {\r\n                                <p class=\"no-alerts\">No low stock items</p>\r\n                            } @else {\r\n                                <ul class=\"alerts-list\">\r\n                                    @for (alert of alerts; track alert.productId) {\r\n                                        <li>\r\n                                            <div class=\"alert-info\">\r\n                                                <span class=\"product-name\">{{ alert.productName }}</span>\r\n                                                <span class=\"stock-count\">\r\n                                                    {{ alert.availableStock }} remaining\r\n                                                </span>\r\n                                            </div>\r\n                                            <button mat-button color=\"primary\" \r\n                                                    [routerLink]=\"['/products', alert.productId]\">\r\n                                                View Product\r\n                                            </button>\r\n                                        </li>\r\n                                    }\r\n                                </ul>\r\n                            }\r\n                        }\r\n                    </mat-card-content>\r\n                </mat-card>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .stock-alerts-container {\r\n            padding: 1rem;\r\n\r\n            h2 {\r\n                margin-bottom: 1rem;\r\n                color: var(--text-primary);\r\n            }\r\n        }\r\n\r\n        .alerts-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n            gap: 1rem;\r\n        }\r\n\r\n        .alert-card {\r\n            background-color: var(--bg-secondary);\r\n\r\n            &.out-of-stock {\r\n                border-left: 4px solid var(--error);\r\n            }\r\n\r\n            &.low-stock {\r\n                border-left: 4px solid var(--warning);\r\n            }\r\n\r\n            mat-card-title {\r\n                display: flex;\r\n                align-items: center;\r\n                gap: 0.5rem;\r\n                color: var(--text-primary);\r\n\r\n                mat-icon {\r\n                    width: 24px;\r\n                    height: 24px;\r\n                }\r\n            }\r\n        }\r\n\r\n        .alerts-list {\r\n            list-style: none;\r\n            padding: 0;\r\n            margin: 0;\r\n\r\n            li {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                align-items: center;\r\n                padding: 0.5rem 0;\r\n                border-bottom: 1px solid var(--border);\r\n\r\n                &:last-child {\r\n                    border-bottom: none;\r\n                }\r\n            }\r\n        }\r\n\r\n        .alert-info {\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 0.25rem;\r\n\r\n            .product-name {\r\n                color: var(--text-primary);\r\n                font-weight: 500;\r\n            }\r\n\r\n            .stock-count {\r\n                color: var(--text-secondary);\r\n                font-size: 0.875rem;\r\n            }\r\n        }\r\n\r\n        .no-alerts {\r\n            color: var(--text-secondary);\r\n            font-style: italic;\r\n            margin: 1rem 0;\r\n        }\r\n    `]\r\n})\r\nexport class StockAlertsComponent implements OnInit {\r\n    lowStockAlerts$: Observable<StockItem[]>;\r\n    outOfStockAlerts$: Observable<StockItem[]>;\r\n\r\n    constructor(private readonly store: Store) {\r\n        this.lowStockAlerts$ = this.store.select(selectLowStockAlerts);\r\n        this.outOfStockAlerts$ = this.store.select(selectOutOfStockAlerts);\r\n    }\r\n\r\n    ngOnInit() {\r\n        // Load alerts\r\n        this.store.dispatch(StockActions.loadLowStockItems());\r\n        this.store.dispatch(StockActions.loadOutOfStockItems());\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        .stock-alerts-container {\n            padding: 1rem;\n\n            h2 {\n                margin-bottom: 1rem;\n                color: var(--text-primary);\n            }\n        }\n\n        .alerts-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 1rem;\n        }\n\n        .alert-card {\n            background-color: var(--bg-secondary);\n\n            &.out-of-stock {\n                border-left: 4px solid var(--error);\n            }\n\n            &.low-stock {\n                border-left: 4px solid var(--warning);\n            }\n\n            mat-card-title {\n                display: flex;\n                align-items: center;\n                gap: 0.5rem;\n                color: var(--text-primary);\n\n                mat-icon {\n                    width: 24px;\n                    height: 24px;\n                }\n            }\n        }\n\n        .alerts-list {\n            list-style: none;\n            padding: 0;\n            margin: 0;\n\n            li {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                padding: 0.5rem 0;\n                border-bottom: 1px solid var(--border);\n\n                &:last-child {\n                    border-bottom: none;\n                }\n            }\n        }\n\n        .alert-info {\n            display: flex;\n            flex-direction: column;\n            gap: 0.25rem;\n\n            .product-name {\n                color: var(--text-primary);\n                font-weight: 500;\n            }\n\n            .stock-count {\n                color: var(--text-secondary);\n                font-size: 0.875rem;\n            }\n        }\n\n        .no-alerts {\n            color: var(--text-secondary);\n            font-style: italic;\n            margin: 1rem 0;\n        }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 177,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "StockManagementComponent",
            "id": "component-StockManagementComponent-553a701481b636ac5762234afa725bfa2a631528059ae44c339a52d5c1a7bad808b7a142130a92a2a0b7da78cd645be0ca7e9910b8dd3a89a5d1689c60704df0",
            "file": "src/app/features/products/components/stock-management/stock-management.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stock-management",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"stock-info\">\n    @if (stock$ | async; as stock) {\n        <div class=\"flex items-center space-x-3\">\n            <div class=\"flex items-center\">\n                <!-- Stock status indicator -->\n                <div [ngClass]=\"{\n                    'bg-emerald-100 dark:bg-emerald-900 text-emerald-600 dark:text-emerald-400': !stock.isLowStock && !stock.isOutOfStock,\n                    'bg-amber-100 dark:bg-amber-900 text-amber-600 dark:text-amber-400': stock.isLowStock && !stock.isOutOfStock,\n                    'bg-rose-100 dark:bg-rose-900 text-rose-600 dark:text-rose-400': stock.isOutOfStock\n                }\" class=\"px-2 py-1 rounded-full text-sm\">\n                    <span class=\"font-medium\">{{ stock.availableStock }}</span> available\n                    @if (stock.reservedStock > 0) {\n                        <span class=\"text-xs ml-1\">({{ stock.reservedStock }} reserved)</span>\n                    }\n                </div>\n            </div>\n\n            <!-- Low stock warning -->\n            @if (stock.isLowStock) {\n                <div class=\"flex items-center text-amber-500 dark:text-amber-400\">\n                    <mat-icon class=\"text-sm h-5 w-5 mr-1\">warning</mat-icon>\n                    <span class=\"text-xs\">Low Stock</span>\n                </div>\n            }\n\n            <!-- Stock adjustment button -->\n            <button\n                mat-icon-button\n                class=\"text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-full p-1 transition-colors\"\n                matTooltip=\"Adjust Stock\"\n                (click)=\"openStockAdjustment($event)\">\n                <mat-icon class=\"text-sm h-5 w-5 icon-success\">edit</mat-icon>\n            </button>\n        </div>\n    } @else {\n        <div class=\"text-sm text-slate-500 dark:text-slate-400\">\n            Loading stock...\n        </div>\n    }\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "product",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "Product",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "stock$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<StockItem | undefined> | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openStockAdjustment",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { Store } from '@ngrx/store';\r\nimport { Product } from 'src/app/shared/models/product.model';\r\nimport { StockItem } from 'src/app/shared/models/stock.model';\r\nimport { Observable } from 'rxjs';\r\nimport { selectStockForProduct } from 'src/app/store/stock/stock.selectors';\r\nimport { StockAdjustmentDialogComponent } from './stock-adjustment-dialog.component';\r\n\r\n@Component({\r\n    selector: 'app-stock-management',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        MatButtonModule,\r\n        MatDialogModule,\r\n        MatIconModule,\r\n        MatTooltipModule\r\n    ],\r\n    template: `\r\n        <div class=\"stock-info\">\r\n            @if (stock$ | async; as stock) {\r\n                <div class=\"flex items-center space-x-3\">\r\n                    <div class=\"flex items-center\">\r\n                        <!-- Stock status indicator -->\r\n                        <div [ngClass]=\"{\r\n                            'bg-emerald-100 dark:bg-emerald-900 text-emerald-600 dark:text-emerald-400': !stock.isLowStock && !stock.isOutOfStock,\r\n                            'bg-amber-100 dark:bg-amber-900 text-amber-600 dark:text-amber-400': stock.isLowStock && !stock.isOutOfStock,\r\n                            'bg-rose-100 dark:bg-rose-900 text-rose-600 dark:text-rose-400': stock.isOutOfStock\r\n                        }\" class=\"px-2 py-1 rounded-full text-sm\">\r\n                            <span class=\"font-medium\">{{ stock.availableStock }}</span> available\r\n                            @if (stock.reservedStock > 0) {\r\n                                <span class=\"text-xs ml-1\">({{ stock.reservedStock }} reserved)</span>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Low stock warning -->\r\n                    @if (stock.isLowStock) {\r\n                        <div class=\"flex items-center text-amber-500 dark:text-amber-400\">\r\n                            <mat-icon class=\"text-sm h-5 w-5 mr-1\">warning</mat-icon>\r\n                            <span class=\"text-xs\">Low Stock</span>\r\n                        </div>\r\n                    }\r\n\r\n                    <!-- Stock adjustment button -->\r\n                    <button \r\n                        mat-icon-button \r\n                        class=\"text-slate-500 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-full p-1 transition-colors\"\r\n                        matTooltip=\"Adjust Stock\"\r\n                        (click)=\"openStockAdjustment($event)\">\r\n                        <mat-icon class=\"text-sm h-5 w-5 icon-success\">edit</mat-icon>\r\n                    </button>\r\n                </div>\r\n            } @else {\r\n                <div class=\"text-sm text-slate-500 dark:text-slate-400\">\r\n                    Loading stock...\r\n                </div>\r\n            }\r\n        </div>\r\n    `,\r\n    styles: []\r\n})\r\nexport class StockManagementComponent implements OnInit {\r\n    @Input() product!: Product;\r\n    stock$: Observable<StockItem | undefined> | undefined;\r\n\r\n    constructor(\r\n        private readonly store: Store,\r\n        private readonly dialog: MatDialog\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.stock$ = this.store.select(selectStockForProduct(this.product?.id));\r\n    }\r\n\r\n    openStockAdjustment(event: Event) {\r\n        // Stop event propagation to prevent row click handler from firing\r\n        event.stopPropagation();\r\n\r\n        if (this.stock$) {\r\n            this.stock$.subscribe(stock => {\r\n                if (stock) {\r\n                    const dialogRef = this.dialog.open(StockAdjustmentDialogComponent, {\r\n                        width: '400px',\r\n                        data: {\r\n                            productId: this.product.id,\r\n                            productName: this.product.name,\r\n                            currentStock: stock.availableStock\r\n                        }\r\n                    });\r\n                }\r\n            }).unsubscribe();\r\n        }\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "UnauthorizedComponent",
            "id": "component-UnauthorizedComponent-514ce091cc666174c5aa886ad560443b95ea394e156f61691ad54e63db0bae548768a7b9d4c2c977ab29ff5d22af3f491a3dac15f2e2fd88d3b2801e9b041ae5",
            "file": "src/app/features/auth/unauthorized/unauthorized.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-unauthorized",
            "styleUrls": [],
            "styles": [
                "\n        .unauthorized-container {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            min-height: 80vh;\n            padding: 1rem;\n            text-align: center;\n        }\n\n        .unauthorized-content {\n            max-width: 400px;\n        }\n\n        .error-icon {\n            font-size: 64px;\n            height: 64px;\n            width: 64px;\n            color: var(--error);\n            margin-bottom: 1.5rem;\n        }\n\n        h1 {\n            font-size: 2rem;\n            font-weight: bold;\n            margin-bottom: 1rem;\n            color: var(--text-primary);\n        }\n\n        .message {\n            color: var(--text-secondary);\n            margin-bottom: 2rem;\n        }\n\n        .action-buttons {\n            display: flex;\n            gap: 1rem;\n            justify-content: center;\n        }\n    "
            ],
            "template": "<div class=\"unauthorized-container\">\n    <div class=\"unauthorized-content\">\n        <mat-icon class=\"error-icon\">security</mat-icon>\n\n        <h1>Access Denied</h1>\n\n        <p class=\"message\">\n            Sorry, you don't have permission to access this page.\n            If you believe this is a mistake, please contact your administrator.\n        </p>\n\n        <div class=\"action-buttons\">\n            <button\n                mat-stroked-button\n                (click)=\"goBack()\"\n            >\n                Go Back\n            </button>\n\n            <button\n                mat-flat-button\n                color=\"primary\"\n                (click)=\"goHome()\"\n            >\n                Return Home\n            </button>\n        </div>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n    selector: 'app-unauthorized',\r\n    standalone: true,\r\n    imports: [CommonModule, MatButtonModule, MatIconModule],\r\n    template: `\r\n        <div class=\"unauthorized-container\">\r\n            <div class=\"unauthorized-content\">\r\n                <mat-icon class=\"error-icon\">security</mat-icon>\r\n                \r\n                <h1>Access Denied</h1>\r\n                \r\n                <p class=\"message\">\r\n                    Sorry, you don't have permission to access this page. \r\n                    If you believe this is a mistake, please contact your administrator.\r\n                </p>\r\n                \r\n                <div class=\"action-buttons\">\r\n                    <button \r\n                        mat-stroked-button \r\n                        (click)=\"goBack()\"\r\n                    >\r\n                        Go Back\r\n                    </button>\r\n                    \r\n                    <button \r\n                        mat-flat-button \r\n                        color=\"primary\"\r\n                        (click)=\"goHome()\"\r\n                    >\r\n                        Return Home\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .unauthorized-container {\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            justify-content: center;\r\n            min-height: 80vh;\r\n            padding: 1rem;\r\n            text-align: center;\r\n        }\r\n\r\n        .unauthorized-content {\r\n            max-width: 400px;\r\n        }\r\n\r\n        .error-icon {\r\n            font-size: 64px;\r\n            height: 64px;\r\n            width: 64px;\r\n            color: var(--error);\r\n            margin-bottom: 1.5rem;\r\n        }\r\n\r\n        h1 {\r\n            font-size: 2rem;\r\n            font-weight: bold;\r\n            margin-bottom: 1rem;\r\n            color: var(--text-primary);\r\n        }\r\n\r\n        .message {\r\n            color: var(--text-secondary);\r\n            margin-bottom: 2rem;\r\n        }\r\n\r\n        .action-buttons {\r\n            display: flex;\r\n            gap: 1rem;\r\n            justify-content: center;\r\n        }\r\n    `]\r\n})\r\nexport class UnauthorizedComponent {\r\n    constructor(private router: Router) { }\r\n\r\n    goBack() {\r\n        window.history.back();\r\n    }\r\n\r\n    goHome() {\r\n        this.router.navigate(['/']);\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        .unauthorized-container {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            min-height: 80vh;\n            padding: 1rem;\n            text-align: center;\n        }\n\n        .unauthorized-content {\n            max-width: 400px;\n        }\n\n        .error-icon {\n            font-size: 64px;\n            height: 64px;\n            width: 64px;\n            color: var(--error);\n            margin-bottom: 1.5rem;\n        }\n\n        h1 {\n            font-size: 2rem;\n            font-weight: bold;\n            margin-bottom: 1rem;\n            color: var(--text-primary);\n        }\n\n        .message {\n            color: var(--text-secondary);\n            margin-bottom: 2rem;\n        }\n\n        .action-buttons {\n            display: flex;\n            gap: 1rem;\n            justify-content: center;\n        }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 85,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "UpdateShippingDialogComponent",
            "id": "component-UpdateShippingDialogComponent-436ac7a9b46d62e100d6ee687d0e85d62b7914b3b35d5c2d4b0bad35f51957ef9895f54ed14ccb33368bc7a53925be0da0db61a44c1137c68ed003d7dcd37593",
            "file": "src/app/features/orders/components/update-shipping-dialog/update-shipping-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-update-shipping-dialog",
            "styleUrls": [],
            "styles": [
                "\n        .form-fields {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n            min-width: 400px;\n            max-width: 600px;\n        }\n\n        textarea {\n            min-height: 100px;\n        }\n    "
            ],
            "template": "<h2 mat-dialog-title>Update Shipping Information</h2>\n\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n    <mat-dialog-content>\n        <div class=\"form-fields\">\n            <mat-form-field >\n                <mat-label>Shipping Carrier</mat-label>\n                <mat-select formControlName=\"carrier\">\n                    @for (carrier of carriers; track carrier.value) {\n                        <mat-option [value]=\"carrier.value\">\n                            {{carrier.label}}\n                        </mat-option>\n                    }\n                </mat-select>\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('carrier')?.errors?.['required']\">\n                    Carrier is required\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field >\n                <mat-label>Tracking Number</mat-label>\n                <input matInput formControlName=\"trackingNumber\"\n                       placeholder=\"Enter tracking number\">\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('trackingNumber')?.errors?.['required']\">\n                    Tracking number is required\n                </mat-error>\n                @if (trackingUrl) {\n                    <mat-hint class=\"text-xs text-orange-500\">\n                        <a [href]=\"trackingUrl\" target=\"_blank\" rel=\"noopener noreferrer\">\n                            Track Package\n                        </a>\n                    </mat-hint>\n                }\n            </mat-form-field>\n\n            <mat-form-field >\n                <mat-label>Estimated Delivery Date</mat-label>\n                <input matInput [matDatepicker]=\"picker\"\n                       formControlName=\"estimatedDeliveryDate\">\n                <mat-datepicker-toggle matIconSuffix [for]=\"picker\">\n                </mat-datepicker-toggle>\n                <mat-datepicker #picker></mat-datepicker>\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('estimatedDeliveryDate')?.errors?.['required']\">\n                    Estimated delivery date is required\n                </mat-error>\n                <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('estimatedDeliveryDate')?.errors?.['min']\">\n                    Date cannot be in the past\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field >\n                <mat-label>Notes</mat-label>\n                <textarea matInput formControlName=\"notes\"\n                          placeholder=\"Enter shipping notes\"\n                          rows=\"3\"></textarea>\n            </mat-form-field>\n        </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions align=\"end\">\n        <button mat-button type=\"button\" (click)=\"onCancel()\">Cancel</button>\n        <button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"form.invalid || form.pristine\">\n            Update Shipping\n        </button>\n    </mat-dialog-actions>\n</form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "carriers",
                    "defaultValue": "[\r\n        {\r\n            value: 'fedex',\r\n            label: 'FedEx',\r\n            trackingUrlPattern: 'https://www.fedex.com/fedextrack/?trknbr={tracking}'\r\n        },\r\n        {\r\n            value: 'ups',\r\n            label: 'UPS',\r\n            trackingUrlPattern: 'https://www.ups.com/track?tracknum={tracking}'\r\n        },\r\n        {\r\n            value: 'usps',\r\n            label: 'USPS',\r\n            trackingUrlPattern: 'https://tools.usps.com/go/TrackConfirmAction?tLabels={tracking}'\r\n        },\r\n        {\r\n            value: 'dhl',\r\n            label: 'DHL',\r\n            trackingUrlPattern: 'https://www.dhl.com/en/express/tracking.html?AWB={tracking}'\r\n        }\r\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CarrierOption[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 164,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 127
                }
            ],
            "methodsClass": [
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateTrackingUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\n\r\ninterface DialogData {\r\n    orderId: string;\r\n    currentShipping?: {\r\n        carrier: string;\r\n        trackingNumber: string;\r\n        estimatedDeliveryDate: string;\r\n    };\r\n}\r\n\r\ninterface CarrierOption {\r\n    value: string;\r\n    label: string;\r\n    trackingUrlPattern?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-update-shipping-dialog',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        MatDialogModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatDatepickerModule,\r\n        MatNativeDateModule\r\n    ],\r\n    template: `\r\n        <h2 mat-dialog-title>Update Shipping Information</h2>\r\n        \r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <mat-dialog-content>\r\n                <div class=\"form-fields\">\r\n                    <mat-form-field >\r\n                        <mat-label>Shipping Carrier</mat-label>\r\n                        <mat-select formControlName=\"carrier\">\r\n                            @for (carrier of carriers; track carrier.value) {\r\n                                <mat-option [value]=\"carrier.value\">\r\n                                    {{carrier.label}}\r\n                                </mat-option>\r\n                            }\r\n                        </mat-select>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('carrier')?.errors?.['required']\">\r\n                            Carrier is required\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Tracking Number</mat-label>\r\n                        <input matInput formControlName=\"trackingNumber\" \r\n                               placeholder=\"Enter tracking number\">\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('trackingNumber')?.errors?.['required']\">\r\n                            Tracking number is required\r\n                        </mat-error>\r\n                        @if (trackingUrl) {\r\n                            <mat-hint class=\"text-xs text-orange-500\">\r\n                                <a [href]=\"trackingUrl\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                    Track Package\r\n                                </a>\r\n                            </mat-hint>\r\n                        }\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Estimated Delivery Date</mat-label>\r\n                        <input matInput [matDatepicker]=\"picker\" \r\n                               formControlName=\"estimatedDeliveryDate\">\r\n                        <mat-datepicker-toggle matIconSuffix [for]=\"picker\">\r\n                        </mat-datepicker-toggle>\r\n                        <mat-datepicker #picker></mat-datepicker>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('estimatedDeliveryDate')?.errors?.['required']\">\r\n                            Estimated delivery date is required\r\n                        </mat-error>\r\n                        <mat-error class=\"text-xs text-red-500\"  *ngIf=\"form.get('estimatedDeliveryDate')?.errors?.['min']\">\r\n                            Date cannot be in the past\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field >\r\n                        <mat-label>Notes</mat-label>\r\n                        <textarea matInput formControlName=\"notes\" \r\n                                  placeholder=\"Enter shipping notes\"\r\n                                  rows=\"3\"></textarea>\r\n                    </mat-form-field>\r\n                </div>\r\n            </mat-dialog-content>\r\n\r\n            <mat-dialog-actions align=\"end\">\r\n                <button mat-button type=\"button\" (click)=\"onCancel()\">Cancel</button>\r\n                <button mat-raised-button color=\"primary\" \r\n                        type=\"submit\"\r\n                        [disabled]=\"form.invalid || form.pristine\">\r\n                    Update Shipping\r\n                </button>\r\n            </mat-dialog-actions>\r\n        </form>\r\n    `,\r\n    styles: [`\r\n        .form-fields {\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 1rem;\r\n            min-width: 400px;\r\n            max-width: 600px;\r\n        }\r\n\r\n        textarea {\r\n            min-height: 100px;\r\n        }\r\n    `]\r\n})\r\nexport class UpdateShippingDialogComponent {\r\n    form: FormGroup;\r\n    carriers: CarrierOption[] = [\r\n        {\r\n            value: 'fedex',\r\n            label: 'FedEx',\r\n            trackingUrlPattern: 'https://www.fedex.com/fedextrack/?trknbr={tracking}'\r\n        },\r\n        {\r\n            value: 'ups',\r\n            label: 'UPS',\r\n            trackingUrlPattern: 'https://www.ups.com/track?tracknum={tracking}'\r\n        },\r\n        {\r\n            value: 'usps',\r\n            label: 'USPS',\r\n            trackingUrlPattern: 'https://tools.usps.com/go/TrackConfirmAction?tLabels={tracking}'\r\n        },\r\n        {\r\n            value: 'dhl',\r\n            label: 'DHL',\r\n            trackingUrlPattern: 'https://www.dhl.com/en/express/tracking.html?AWB={tracking}'\r\n        }\r\n    ];\r\n\r\n    get trackingUrl(): string | null {\r\n        const carrier = this.carriers.find(c => c.value === this.form.get('carrier')?.value);\r\n        const tracking = this.form.get('trackingNumber')?.value;\r\n\r\n        if (carrier?.trackingUrlPattern && tracking) {\r\n            return carrier.trackingUrlPattern.replace('{tracking}', tracking);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<UpdateShippingDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: DialogData,\r\n        private fb: FormBuilder\r\n    ) {\r\n        const today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n\r\n        this.form = this.fb.group({\r\n            carrier: [data.currentShipping?.carrier || '', Validators.required],\r\n            trackingNumber: [data.currentShipping?.trackingNumber || '', Validators.required],\r\n            estimatedDeliveryDate: [\r\n                data.currentShipping?.estimatedDeliveryDate ? new Date(data.currentShipping.estimatedDeliveryDate) : null,\r\n                [\r\n                    Validators.required,\r\n                    (control) => {\r\n                        const date = control.value;\r\n                        return date && date < today ? { min: true } : null;\r\n                    }\r\n                ]\r\n            ],\r\n            notes: ['']\r\n        });\r\n\r\n        // Update tracking URL when carrier or tracking number changes\r\n        this.form.get('carrier')?.valueChanges.subscribe(() => this.updateTrackingUrl());\r\n        this.form.get('trackingNumber')?.valueChanges.subscribe(() => this.updateTrackingUrl());\r\n    }\r\n\r\n    private updateTrackingUrl() {\r\n        // Force change detection for tracking URL\r\n        this.form.updateValueAndValidity();\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.form.valid) {\r\n            const formValue = this.form.value;\r\n            this.dialogRef.close({\r\n                ...formValue,\r\n                estimatedDeliveryDate: formValue.estimatedDeliveryDate.toISOString()\r\n            });\r\n        }\r\n    }\r\n\r\n    onCancel() {\r\n        this.dialogRef.close();\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        .form-fields {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n            min-width: 400px;\n            max-width: 600px;\n        }\n\n        textarea {\n            min-height: 100px;\n        }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<UpdateShippingDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 160,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<UpdateShippingDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "trackingUrl": {
                    "name": "trackingUrl",
                    "getSignature": {
                        "name": "trackingUrl",
                        "type": "",
                        "returnType": "string | null",
                        "line": 151
                    }
                }
            }
        },
        {
            "name": "VariantFormComponent",
            "id": "component-VariantFormComponent-c9aa81027635aa44f017ea6bdaf434e52b03eaa5a67172aa14823a9f746f6165f15e1ba4ef3030a662e1836759412d1c8eb2af2d03aacf93ab3ec634ef98fb7e",
            "file": "src/app/features/products/components/variant-form/variant-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-variant-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./variant-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "variantForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\n\r\n@Component({\r\n    selector: 'app-variant-form',\r\n    templateUrl: './variant-form.component.html',\r\n})\r\nexport class VariantFormComponent implements OnInit {\r\n    variantForm: FormGroup;\r\n\r\n    constructor(private fb: FormBuilder) {\r\n        this.variantForm = this.fb.group({\r\n            sku: ['', Validators.required],\r\n            price: [0, [Validators.required, Validators.min(0)]],\r\n            currency: ['USD', Validators.required],\r\n            compareAtPrice: [null],\r\n            costPrice: [null],\r\n            barcode: [''],\r\n            stock: [0, [Validators.required, Validators.min(0)]],\r\n            trackInventory: [true],\r\n            allowBackorders: [false],\r\n            lowStockThreshold: [null],\r\n            sortOrder: [0],\r\n            // Attributes will be handled separately\r\n        });\r\n    }\r\n    ngOnInit(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    // Methods to handle form submission, etc.\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": ""
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes, withViewTransitions()),\r\n    provideHttpClient(\r\n      withInterceptors([\r\n        authInterceptor,\r\n        errorInterceptor,\r\n        loadingInterceptor,\r\n      ])\r\n    ),\r\n    // Add NgRx Store configuration\r\n    provideStore({\r\n      products: productReducer,\r\n      categories: categoryReducer,\r\n      stock: stockReducer,\r\n      order: orderReducer,\r\n    }),\r\n    provideEffects([ProductEffects, CategoryEffects, StockEffects, OrderEffects]),\r\n    provideStoreDevtools({\r\n      maxAge: 25,\r\n      logOnly: environment.production,\r\n      autoPause: true,\r\n    }),\r\n    provideAnimations(), // Add animations provider\r\n    provideNativeDateAdapter(), // Add date adapter provider\r\n    importProvidersFrom(\r\n      ReactiveFormsModule,\r\n      FileValueAccessor,\r\n      FormlyModule.forRoot({\r\n        types: [\r\n          {\r\n            name: 'file',\r\n            component: FormlyImageUploadTypeComponent,\r\n            wrappers: ['form-field'],\r\n            defaultOptions: {\r\n              templateOptions: {\r\n                multiple: false,\r\n                maxSize: 5000000,\r\n                accept: 'image/*'\r\n              }\r\n            }\r\n          },\r\n          {\r\n            name: 'color-picker',\r\n            component: FormlyColorPickerTypeComponent,\r\n            // wrappers: ['form-field'],\r\n            defaultOptions: {\r\n              validators: {\r\n                pattern: {\r\n                  expression: (c: any) => !c.value || /^#[0-9A-Fa-f]{6}$/.test(c.value),\r\n                  message: 'Color must be a valid hex color (e.g. #FF0000)'\r\n                }\r\n              }\r\n            }\r\n          },\r\n        ],\r\n        validationMessages: [\r\n          { name: 'required', message: 'This field is required' },\r\n          { name: 'minLength', message: 'Minimum length not met' },\r\n          { name: 'maxLength', message: 'Maximum length exceeded' },\r\n          { name: 'min', message: 'Value is too small' },\r\n          { name: 'max', message: 'Value is too large' },\r\n          { name: 'email', message: 'Invalid email address' }\r\n        ],\r\n      }),\r\n      FormlyMaterialModule,\r\n    ),\r\n  ]\r\n}"
            },
            {
                "name": "AUTH_ERROR_MESSAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/models/auth.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<AuthError, string>",
                "defaultValue": "{\r\n    'auth/invalid-credentials': 'Invalid username or password',\r\n    'auth/session-expired': 'Your session has expired. Please login again.',\r\n    'auth/network-error': 'Unable to connect to authentication service',\r\n    'auth/unknown-error': 'An unknown error occurred'\r\n}"
            },
            {
                "name": "AUTH_STORAGE_KEYS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/models/auth.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{\r\n    ACCESS_TOKEN: 'auth.access_token',\r\n    USER: 'auth.user',\r\n    EXPIRES_AT: 'auth.expires_at'\r\n} as const"
            },
            {
                "name": "authenticatedWithPermissionGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\r\n    const authService = inject(AuthService);\r\n    const router = inject(Router);\r\n    const requiredPermission = route.data['permission'];\r\n\r\n    return new Observable<boolean>(observer => {\r\n        authService.isAuthenticated$.pipe(\r\n            tap(isAuthenticated => {\r\n                if (!isAuthenticated) {\r\n                    router.navigate(['/login'], {\r\n                        queryParams: { returnUrl: state.url }\r\n                    });\r\n                    observer.next(false);\r\n                    observer.complete();\r\n                }\r\n            }),\r\n            map(isAuthenticated => {\r\n                if (!isAuthenticated) return false;\r\n                if (!requiredPermission) return true;\r\n\r\n                return authService.hasPermission(requiredPermission).pipe(\r\n                    tap(hasPermission => {\r\n                        if (!hasPermission) {\r\n                            router.navigate(['/unauthorized']);\r\n                        }\r\n                    })\r\n                );\r\n            })\r\n        ).subscribe(result => {\r\n            observer.next(result as boolean);\r\n            observer.complete();\r\n        });\r\n    });\r\n}"
            },
            {
                "name": "authGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\r\n    const authService = inject(AuthService);\r\n    const router = inject(Router);\r\n\r\n    return authService.isAuthenticated$.pipe(\r\n        tap(isAuthenticated => {\r\n            if (!isAuthenticated) {\r\n                // Store attempted URL for redirect after login\r\n                const returnUrl = state.url;\r\n                router.navigate(['/login'], {\r\n                    queryParams: { returnUrl }\r\n                });\r\n            }\r\n        })\r\n    );\r\n}"
            },
            {
                "name": "authInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n    const authService = inject(AuthService);\r\n\r\n    // Skip token injection for non-API and auth endpoints\r\n    if (!req.url.startsWith(environment.apiUrls.admin.baseUrl) ||\r\n        req.url.includes('/auth/')) {\r\n        return next(req);\r\n    }\r\n\r\n    return authService.getAccessToken().pipe(\r\n        switchMap(token => {\r\n            if (token) {\r\n                const authReq = req.clone({\r\n                    headers: req.headers.set('Authorization', `Bearer ${token}`)\r\n                });\r\n                return next(authReq);\r\n            }\r\n            return next(req);\r\n        }),\r\n        catchError((error: HttpErrorResponse) => {\r\n            // Handle authentication errors\r\n            if (error.status === HttpStatusCode.Unauthorized) {\r\n                // Try refreshing token silently\r\n                return authService.refreshToken().pipe(\r\n                    switchMap(success => {\r\n                        if (success) {\r\n                            // Retry the original request\r\n                            return authService.getAccessToken().pipe(\r\n                                switchMap(newToken => {\r\n                                    const retryReq = req.clone({\r\n                                        headers: req.headers.set('Authorization', `Bearer ${newToken}`)\r\n                                    });\r\n                                    return next(retryReq);\r\n                                })\r\n                            );\r\n                        }\r\n                        // If refresh failed, logout and redirect to login\r\n                        authService.logout();\r\n                        return throwError(() => error);\r\n                    })\r\n                );\r\n            }\r\n\r\n            // Handle forbidden errors\r\n            if (error.status === HttpStatusCode.Forbidden) {\r\n                console.error('Access forbidden:', req.url);\r\n                // You might want to redirect to an error page or show a notification\r\n            }\r\n\r\n            return throwError(() => error);\r\n        })\r\n    );\r\n}"
            },
            {
                "name": "CategoryActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/category/category.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n    source: 'Category',\r\n    events: {\r\n        'Load Categories': emptyProps(),\r\n        'Load Categories Success': props<{ categories: Category[] }>(),\r\n        'Load Categories Failure': props<{ error: string }>(),\r\n\r\n        'Create Category': props<{ request: CreateCategoryRequest }>(),\r\n        'Create Category Success': props<{ category: Category }>(),\r\n        'Create Category Failure': props<{ error: string }>(),\r\n\r\n        'Update Category': props<{ id: string, request: UpdateCategoryRequest }>(),\r\n        'Update Category Success': props<{ category: Category }>(),\r\n        'Update Category Failure': props<{ error: string }>(),\r\n\r\n        'Delete Category': props<{ id: string }>(),\r\n        'Delete Category Success': props<{ id: string }>(),\r\n        'Delete Category Failure': props<{ error: string }>(),\r\n\r\n        'Reorder Categories': props<{ requests: ReorderCategoryRequest[] }>(),\r\n        'Reorder Categories Success': emptyProps(),\r\n        'Reorder Categories Failure': props<{ error: string }>(),\r\n\r\n        'Select Category': props<{ category: Category | null }>()\r\n    }\r\n})"
            },
            {
                "name": "categoryReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/category/category.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialCategoryState,\r\n\r\n    // Load Categories\r\n    on(CategoryActions.loadCategories, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(CategoryActions.loadCategoriesSuccess, (state, { categories }) => ({\r\n        ...state,\r\n        categories,\r\n        loading: false,\r\n        error: null\r\n    })),\r\n\r\n    on(CategoryActions.loadCategoriesFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Create Category\r\n    on(CategoryActions.createCategory, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(CategoryActions.createCategorySuccess, (state, { category }) => ({\r\n        ...state,\r\n        categories: [...state.categories, category],\r\n        loading: false,\r\n        error: null\r\n    })),\r\n\r\n    on(CategoryActions.createCategoryFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Update Category\r\n    on(CategoryActions.updateCategory, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(CategoryActions.updateCategorySuccess, (state, { category }) => ({\r\n        ...state,\r\n        categories: state.categories.map(c =>\r\n            c.id === category.id ? category : c\r\n        ),\r\n        loading: false,\r\n        error: null\r\n    })),\r\n\r\n    on(CategoryActions.updateCategoryFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Delete Category\r\n    on(CategoryActions.deleteCategory, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(CategoryActions.deleteCategorySuccess, (state, { id }) => ({\r\n        ...state,\r\n        categories: state.categories.filter(c => c.id !== id),\r\n        loading: false,\r\n        error: null\r\n    })),\r\n\r\n    on(CategoryActions.deleteCategoryFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Select Category\r\n    on(CategoryActions.selectCategory, (state, { category }) => ({\r\n        ...state,\r\n        selectedCategory: category\r\n    }))\r\n)"
            },
            {
                "name": "DashboardActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/dashboard/dashboard.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n    source: 'Dashboard',\r\n    events: {\r\n        'Load Stats': emptyProps(),\r\n        'Load Stats Success': props<{ stats: DashboardStats }>(),\r\n        'Load Stats Failure': props<{ error: string }>(),\r\n        'Reset Stats': emptyProps()\r\n    }\r\n})"
            },
            {
                "name": "dashboardReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/dashboard/dashboard.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialDashboardState,\r\n\r\n    on(DashboardActions.loadStats, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(DashboardActions.loadStatsSuccess, (state, { stats }) => ({\r\n        ...state,\r\n        stats,\r\n        loading: false,\r\n        error: null,\r\n        lastUpdated: Date.now()\r\n    })),\r\n\r\n    on(DashboardActions.loadStatsFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    on(DashboardActions.resetStats, () => initialDashboardState)\r\n)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: true,\r\n\r\n    apiUrls: {\r\n        admin: {\r\n            baseUrl: 'https://api.yourcompany.com/admin',\r\n            products: 'https://api.yourcompany.com/admin/products',\r\n            statistics: 'https://api.yourcompany.com/admin/statistics',\r\n            auth: 'https://api.yourcompany.com/admin/auth'\r\n        },\r\n        shop: {\r\n            baseUrl: 'https://api.yourcompany.com/shop',\r\n            products: 'https://api.yourcompany.com/shop/products',\r\n            cart: 'https://api.yourcompany.com/shop/cart',\r\n            orders: 'https://api.yourcompany.com/shop/orders'\r\n        },\r\n        shipping: {\r\n            baseUrl: 'https://api.yourcompany.com/shipping',\r\n            shipments: 'https://api.yourcompany.com/shipping/shipments',\r\n            tracking: 'https://api.yourcompany.com/shipping/tracking'\r\n        }\r\n    },\r\n\r\n    azure: {\r\n        blobStorage: {\r\n            containerUrl: 'https://prod-storage.blob.core.windows.net',\r\n            productsContainer: 'products-images'\r\n        }\r\n    },\r\n\r\n    identityServer: {\r\n        authority: 'https://identity.al_store.com',\r\n        clientId: 'admin-portal',\r\n        redirectUri: window.location.origin + '/callback',\r\n        postLogoutRedirectUri: window.location.origin,\r\n        responseType: 'code',\r\n        scope: 'openid profile email api.full'\r\n    },\r\n\r\n    features: {\r\n        enableAnalytics: true,\r\n        enableNotifications: true,\r\n        useSignalR: true\r\n    },\r\n\r\n    signalR: {\r\n        hubUrl: 'https://api.yourcompany.com/hubs/notifications'\r\n    },\r\n\r\n    cache: {\r\n        defaultTTL: 300,\r\n        productsTTL: 600\r\n    }\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: false,\r\n\r\n    // API URLs\r\n    apiUrls: {\r\n        // Admin Portal API\r\n        admin: {\r\n            baseUrl: 'https://localhost:7048/api',\r\n            products: 'https://localhost:7048/api/products',\r\n            categories: 'https://localhost:7048/api/categories',\r\n            statistics: 'https://localhost:7048/api/statistics',\r\n            stock: 'https://localhost:7048/api/stock',\r\n            auth: 'https://localhost:7048/api/auth',\r\n            orders: 'https://localhost:7048/api/orders',\r\n        },\r\n        // Shop Portal API\r\n        shop: {\r\n            baseUrl: 'http://localhost:7002/api',\r\n            products: 'http://localhost:7002/api/products',\r\n            cart: 'http://localhost:7002/api/cart',\r\n            orders: 'http://localhost:7002/api/orders'\r\n        },\r\n        // Shipping Portal API\r\n        shipping: {\r\n            baseUrl: 'http://localhost:5003/api',\r\n            shipments: 'http://localhost:5003/api/shipments',\r\n            tracking: 'http://localhost:5003/api/tracking'\r\n        }\r\n    },\r\n\r\n    // Azure Storage\r\n    azure: {\r\n        blobStorage: {\r\n            containerUrl: 'http://localhost:10000/devstoreaccount1/alstoreblob',\r\n            productsContainer: 'Product_Pictures'\r\n        }\r\n    },\r\n\r\n    // Authentication\r\n    auth: {\r\n        authority: 'https://localhost:5001',\r\n        clientId: 'admin_portal', // Note: Using the SPA client ID\r\n        redirectUri: window.location.origin + '/callback',\r\n        postLogoutRedirectUri: window.location.origin,\r\n        responseType: 'code',\r\n        scope: 'openid profile email api.full',\r\n        requireHttps: true\r\n    },\r\n\r\n    // Feature Flags\r\n    features: {\r\n        enableAnalytics: true,\r\n        enableNotifications: true,\r\n        useSignalR: true,\r\n        enableCache: true,\r\n        enableAuth: true,\r\n        enableShoppingCart: true,\r\n        enableShipping: true,\r\n\r\n    },\r\n\r\n    // SignalR\r\n    signalR: {\r\n        hubUrlnotifications: 'https://localhost:7048/hubs/notifications',\r\n        product: 'https://localhost:7048/hubs/products',\r\n        category: 'https://localhost:7048/hubs/categories',\r\n        stock: 'https://localhost:7048/hubs/stock',\r\n        order: 'https://localhost:7048/hubs/orders'\r\n    },\r\n\r\n    // Cache Configuration\r\n    cache: {\r\n        defaultTTL: 300, // 5 minutes\r\n        productsTTL: 600, // 10 minutes\r\n        productTypesTTL: 600, // 10 minutes\r\n        categoriesTTL: 600, // 10 minutes\r\n    }\r\n}"
            },
            {
                "name": "errorInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/error.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n    const errorService = inject(ErrorService);\r\n    const router = inject(Router);\r\n\r\n    return next(req).pipe(\r\n        catchError((error: unknown) => {\r\n            if (error instanceof HttpErrorResponse) {\r\n                // Handle different types of errors\r\n                switch (error.status) {\r\n                    case 0:\r\n                        // Network error or CORS\r\n                        router.navigate(['/error/network']);\r\n                        break;\r\n\r\n                    case HttpStatusCode.NotFound:\r\n                        router.navigate(['/error/404']);\r\n                        break;\r\n\r\n                    case HttpStatusCode.InternalServerError:\r\n                        router.navigate(['/error/500']);\r\n                        break;\r\n\r\n                    case HttpStatusCode.Unauthorized:\r\n                        // Let auth interceptor handle this\r\n                        break;\r\n\r\n                    case HttpStatusCode.Forbidden:\r\n                        router.navigate(['/unauthorized']);\r\n                        break;\r\n\r\n                    default:\r\n                        // For other errors, show the error message\r\n                        router.navigate(['/error/generic'], {\r\n                            queryParams: {\r\n                                message: error.error?.message || 'An unexpected error occurred'\r\n                            }\r\n                        });\r\n                }\r\n\r\n                // Add error to error service\r\n                errorService.addError({\r\n                    code: error.error?.code || `HTTP_${error.status}`,\r\n                    message: error.error?.message || error.message,\r\n                    severity: error.status >= 500 ? 'error' : 'warning'\r\n                });\r\n            } else {\r\n                // Handle non-HTTP errors\r\n                console.error('Non-HTTP Error:', error);\r\n                router.navigate(['/error/generic']);\r\n\r\n                errorService.addError({\r\n                    code: 'UNKNOWN_ERROR',\r\n                    message: 'An unexpected error occurred',\r\n                    severity: 'error'\r\n                });\r\n            }\r\n\r\n            return throwError(() => error);\r\n        })\r\n    );\r\n}"
            },
            {
                "name": "initialCategoryState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/category/category.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CategoryState",
                "defaultValue": "{\r\n    categories: [],\r\n    selectedCategory: null,\r\n    loading: false,\r\n    error: null\r\n}"
            },
            {
                "name": "initialDashboardState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/dashboard/dashboard.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DashboardState",
                "defaultValue": "{\r\n    stats: null,\r\n    loading: false,\r\n    error: null,\r\n    lastUpdated: null\r\n}"
            },
            {
                "name": "initialOrderState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/order/order.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "OrderState",
                "defaultValue": "{\r\n    orders: [],\r\n    selectedOrder: null,\r\n    loading: false,\r\n    error: null,\r\n    filters: {\r\n        page: 1,\r\n        pageSize: 10,\r\n        sortBy: 'createdAt',\r\n        sortDirection: 'desc'\r\n    },\r\n    pagination: {\r\n        currentPage: 1,\r\n        pageSize: 10,\r\n        totalItems: 0\r\n    }\r\n}"
            },
            {
                "name": "initialProductState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/product/product.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ProductState",
                "defaultValue": "{\r\n    products: [],\r\n    selectedProduct: null,\r\n    loading: false,\r\n    error: null,\r\n    filters: {\r\n        search: '',\r\n        category: '',\r\n        minPrice: null,\r\n        maxPrice: null,\r\n        inStock: null,\r\n        page: 1,\r\n        pageSize: 10,\r\n        sortColumn: undefined,\r\n        sortDirection: undefined\r\n    },\r\n    pagination: {\r\n        currentPage: 1,\r\n        pageSize: 10,\r\n        totalItems: 0\r\n    },\r\n    optimisticUpdate: {\r\n        originalProduct: null,\r\n        pending: false\r\n    },\r\n    cache: {\r\n        timestamp: null,\r\n        duration: 5 * 60 * 1000 // 5 minutes\r\n    }\r\n}"
            },
            {
                "name": "initialStockState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/stock/stock.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StockState",
                "defaultValue": "{\r\n    items: {},\r\n    loading: false,\r\n    error: null,\r\n    lowStockAlerts: [],\r\n    outOfStockAlerts: []\r\n}"
            },
            {
                "name": "loadingInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/loading.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n    const loadingService = inject(LoadingService);\r\n    loadingService.show();\r\n\r\n    return next(req).pipe(\r\n        finalize(() => {\r\n            loadingService.hide();\r\n        })\r\n    );\r\n}"
            },
            {
                "name": "OrderActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/order/order.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n    source: 'Order',\r\n    events: {\r\n        // Load Orders\r\n        'Load Orders': props<{ params: OrderListParams }>(),\r\n        'Load Orders Success': props<{ orders: Order[]; totalItems: number }>(),\r\n        'Load Orders Failure': props<{ error: string }>(),\r\n\r\n        // Update Order Status\r\n        'Update Status': props<{ orderId: string; newStatus: string }>(),\r\n        'Update Status Success': props<{ order: Order }>(),\r\n        'Update Status Failure': props<{ error: string }>(),\r\n\r\n        // Add Payment\r\n        'Add Payment': props<{ orderId: string; payment: any }>(),\r\n        'Add Payment Success': props<{ order: Order }>(),\r\n        'Add Payment Failure': props<{ error: string }>(),\r\n\r\n        // Update Shipping\r\n        'Update Shipping': props<{ orderId: string; shipping: any }>(),\r\n        'Update Shipping Success': props<{ order: Order }>(),\r\n        'Update Shipping Failure': props<{ error: string }>(),\r\n\r\n        // Real-time Updates\r\n        'Order Updated': props<{ order: Order }>(),\r\n        'Order Status Changed': props<{ orderId: string; newStatus: string }>(),\r\n\r\n        // Filters\r\n        'Set Filters': props<{ filters: Partial<OrderListParams> }>(),\r\n        'Reset Filters': emptyProps(),\r\n    }\r\n})"
            },
            {
                "name": "orderReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/order/order.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialOrderState,\r\n\r\n    // Load Orders\r\n    on(OrderActions.loadOrders, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(OrderActions.loadOrdersSuccess, (state, { orders, totalItems }) => ({\r\n        ...state,\r\n        orders,\r\n        loading: false,\r\n        error: null,\r\n        pagination: {\r\n            ...state.pagination,\r\n            totalItems\r\n        }\r\n    })),\r\n\r\n    on(OrderActions.loadOrdersFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Update Status\r\n    on(OrderActions.updateStatus, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(OrderActions.updateStatusSuccess, (state, { order }) => ({\r\n        ...state,\r\n        orders: state.orders.map(o => o.id === order.id ? order : o),\r\n        loading: false,\r\n        error: null\r\n    })),\r\n\r\n    on(OrderActions.updateStatusFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Real-time Updates\r\n    on(OrderActions.orderUpdated, (state, { order }) => ({\r\n        ...state,\r\n        orders: state.orders.map(o => o.id === order.id ? order : o)\r\n    })),\r\n\r\n    on(OrderActions.orderStatusChanged, (state, { orderId, newStatus }) => ({\r\n        ...state,\r\n        orders: state.orders.map(o =>\r\n            o.id === orderId\r\n                ? { ...o, status: newStatus as OrderStatus }\r\n                : o\r\n        )\r\n    })),\r\n\r\n    // Filters\r\n    on(OrderActions.setFilters, (state, { filters }) => ({\r\n        ...state,\r\n        filters: {\r\n            ...state.filters,\r\n            ...filters\r\n        }\r\n    })),\r\n\r\n    on(OrderActions.resetFilters, (state) => ({\r\n        ...state,\r\n        filters: initialOrderState.filters\r\n    }))\r\n)"
            },
            {
                "name": "permissionGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\r\n    const authService = inject(AuthService);\r\n    const router = inject(Router);\r\n    const requiredPermission = route.data['permission'];\r\n\r\n    if (!requiredPermission) {\r\n        return true;\r\n    }\r\n\r\n    return authService.hasPermission(requiredPermission).pipe(\r\n        tap(hasPermission => {\r\n            if (!hasPermission) {\r\n                router.navigate(['/unauthorized']);\r\n            }\r\n        })\r\n    );\r\n}"
            },
            {
                "name": "ProductActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/product/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n    source: 'Product',\r\n    events: {\r\n        // Load Products\r\n        'Load Products': props<{ filters: ProductFilters }>(),\r\n        'Load Products Success': props<{ products: Product[]; totalItems: number }>(),\r\n        'Load Products Failure': props<{ error: string }>(),\r\n\r\n        // Add Product\r\n        'Add Product': props<{ product: Omit<Product, 'id'> }>(),\r\n        'Add Product Success': props<{ product: Product }>(),\r\n        'Add Product Failure': props<{ error: string }>(),\r\n\r\n        // Update Product\r\n        'Update Product': props<{ id: string; product: Partial<Product> }>(),\r\n        'Update Product Success': props<{ product: Product }>(),\r\n        'Update Product Failure': props<{ error: string }>(),\r\n\r\n        // Optimistic Update Actions\r\n        'Optimistic Update Product': props<{ id: string; changes: Partial<Product> }>(),\r\n        'Revert Optimistic Update': emptyProps(),\r\n\r\n        // Delete Product\r\n        'Delete Product': props<{ id: string }>(),\r\n        'Delete Product Success': props<{ id: string }>(),\r\n        'Delete Product Failure': props<{ error: string }>(),\r\n\r\n        // Selection\r\n        'Select Product': props<{ product: Product }>(),\r\n        'Clear Selected Product': emptyProps(),\r\n\r\n        // Filters\r\n        'Set Filters': props<{ filters: Partial<ProductFilters> }>(),\r\n        'Reset Filters': emptyProps(),\r\n\r\n        // Cache\r\n        'Set Cache Timestamp': props<{ timestamp: number }>(),\r\n        'Clear Cache': emptyProps()\r\n    }\r\n})"
            },
            {
                "name": "productReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/product/product.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialProductState,\r\n\r\n    // Load Products\r\n    on(ProductActions.loadProducts, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(ProductActions.loadProductsSuccess, (state, { products, totalItems }) => ({\r\n        ...state,\r\n        products,\r\n        loading: false,\r\n        error: null,\r\n        pagination: {\r\n            ...state.pagination,\r\n            totalItems\r\n        },\r\n        cache: {\r\n            ...state.cache,\r\n            timestamp: Date.now()\r\n        }\r\n    })),\r\n\r\n    on(ProductActions.loadProductsFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Add Product\r\n    on(ProductActions.addProduct, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(ProductActions.addProductSuccess, (state, { product }) => ({\r\n        ...state,\r\n        products: [...state.products, product],\r\n        loading: false,\r\n        error: null\r\n    })),\r\n\r\n    on(ProductActions.addProductFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Optimistic Update\r\n    on(ProductActions.optimisticUpdateProduct, (state, { id, changes }) => {\r\n        const productToUpdate = state.products.find(p => p.id === id);\r\n        if (!productToUpdate) return state;\r\n\r\n        return {\r\n            ...state,\r\n            optimisticUpdate: {\r\n                originalProduct: productToUpdate,\r\n                pending: true\r\n            },\r\n            products: state.products.map(p =>\r\n                p.id === id ? { ...p, ...changes } : p\r\n            )\r\n        };\r\n    }),\r\n\r\n    on(ProductActions.revertOptimisticUpdate, (state) => {\r\n        if (!state.optimisticUpdate.originalProduct) return state;\r\n\r\n        return {\r\n            ...state,\r\n            products: state.products.map(p =>\r\n                p.id === state.optimisticUpdate.originalProduct?.id\r\n                    ? state.optimisticUpdate.originalProduct\r\n                    : p\r\n            ),\r\n            optimisticUpdate: {\r\n                originalProduct: null,\r\n                pending: false\r\n            }\r\n        };\r\n    }),\r\n\r\n    // Update Product\r\n    on(ProductActions.updateProductSuccess, (state, { product }) => ({\r\n        ...state,\r\n        products: state.products.map(p => p.id === product.id ? product : p),\r\n        loading: false,\r\n        error: null,\r\n        optimisticUpdate: {\r\n            originalProduct: null,\r\n            pending: false\r\n        }\r\n    })),\r\n\r\n    on(ProductActions.updateProductFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Delete Product\r\n    on(ProductActions.deleteProduct, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(ProductActions.deleteProductSuccess, (state, { id }) => ({\r\n        ...state,\r\n        products: state.products.filter(p => p.id !== id),\r\n        loading: false,\r\n        error: null\r\n    })),\r\n\r\n    on(ProductActions.deleteProductFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Selection\r\n    on(ProductActions.selectProduct, (state, { product }) => ({\r\n        ...state,\r\n        selectedProduct: product\r\n    })),\r\n\r\n    on(ProductActions.clearSelectedProduct, (state) => ({\r\n        ...state,\r\n        selectedProduct: null\r\n    })),\r\n\r\n    // Filters\r\n    on(ProductActions.setFilters, (state, { filters }) => ({\r\n        ...state,\r\n        filters: {\r\n            ...state.filters,\r\n            ...filters\r\n        }\r\n    })),\r\n\r\n    on(ProductActions.resetFilters, (state) => ({\r\n        ...state,\r\n        filters: initialProductState.filters\r\n    })),\r\n\r\n    // Cache\r\n    on(ProductActions.setCacheTimestamp, (state, { timestamp }) => ({\r\n        ...state,\r\n        cache: {\r\n            ...state.cache,\r\n            timestamp\r\n        }\r\n    })),\r\n\r\n    on(ProductActions.clearCache, (state) => ({\r\n        ...state,\r\n        cache: initialProductState.cache\r\n    }))\r\n)"
            },
            {
                "name": "roleGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\r\n    const authService = inject(AuthService);\r\n    const router = inject(Router);\r\n    const requiredRole = route.data['role'];\r\n\r\n    if (!requiredRole) {\r\n        return true;\r\n    }\r\n\r\n    return authService.hasRole(requiredRole).pipe(\r\n        tap(hasRole => {\r\n            if (!hasRole) {\r\n                router.navigate(['/unauthorized']);\r\n            }\r\n        })\r\n    );\r\n}"
            },
            {
                "name": "routeMatchGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanMatchFn",
                "defaultValue": "(route: Route, segments: UrlSegment[]) => {\r\n    const authService = inject(AuthService);\r\n\r\n    // Example of complex route matching logic\r\n    return new Observable<boolean>(observer => {\r\n        // Check authentication\r\n        authService.isAuthenticated$.pipe(\r\n            map(isAuthenticated => {\r\n                if (!isAuthenticated) return false;\r\n\r\n                // Check feature flag in route data\r\n                const featureFlag = route.data?.['featureFlag'] as keyof typeof environment.features;\r\n                if (featureFlag && !environment.features[featureFlag]) {\r\n                    return false;\r\n                }\r\n\r\n                // Check required permissions\r\n                const permissions = route.data?.['permissions'] as string[];\r\n                if (permissions?.length) {\r\n                    return permissions.every(permission =>\r\n                        authService.hasPermission(permission)\r\n                    );\r\n                }\r\n\r\n                return true;\r\n            })\r\n        ).subscribe(result => {\r\n            observer.next(result);\r\n            observer.complete();\r\n        });\r\n    });\r\n}"
            },
            {
                "name": "selectAllCategories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/category/category.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectCategoryState,\r\n    (state) => state.categories\r\n)"
            },
            {
                "name": "selectAllOrders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/order/order.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectOrderState,\r\n    state => state.orders\r\n)"
            },
            {
                "name": "selectAllProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/product/product.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectProductState,\r\n    state => state.products\r\n)"
            },
            {
                "name": "selectAllStockItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/stock/stock.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectStockState,\r\n    (state) => state.items\r\n)"
            },
            {
                "name": "selectCategoriesError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/category/category.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectCategoryState,\r\n    (state) => state.error\r\n)"
            },
            {
                "name": "selectCategoriesLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/category/category.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectCategoryState,\r\n    (state) => state.loading\r\n)"
            },
            {
                "name": "selectCategoryHierarchy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/category/category.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectAllCategories,\r\n    (categories) => {\r\n        const rootCategories = categories.filter(c => !c.parentCategoryId);\r\n        return buildHierarchy(rootCategories, categories);\r\n    }\r\n)"
            },
            {
                "name": "selectCategoryState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/category/category.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<CategoryState>('categories')"
            },
            {
                "name": "selectDashboardError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/dashboard/dashboard.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectDashboardState,\r\n    state => state.error\r\n)"
            },
            {
                "name": "selectDashboardLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/dashboard/dashboard.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectDashboardState,\r\n    state => state.loading\r\n)"
            },
            {
                "name": "selectDashboardState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/dashboard/dashboard.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<DashboardState>('dashboard')"
            },
            {
                "name": "selectDashboardStats",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/dashboard/dashboard.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectDashboardState,\r\n    state => state.stats\r\n)"
            },
            {
                "name": "selectLastUpdated",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/dashboard/dashboard.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectDashboardState,\r\n    state => state.lastUpdated\r\n)"
            },
            {
                "name": "selectLowStockAlerts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/stock/stock.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectStockState,\r\n    (state) => state.lowStockAlerts\r\n)"
            },
            {
                "name": "selectOrderFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/order/order.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectOrderState,\r\n    state => state?.filters\r\n)"
            },
            {
                "name": "selectOrderPagination",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/order/order.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectOrderState,\r\n    state => state.pagination\r\n)"
            },
            {
                "name": "selectOrdersError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/order/order.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectOrderState,\r\n    state => state.error\r\n)"
            },
            {
                "name": "selectOrdersLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/order/order.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectOrderState,\r\n    state => state.loading\r\n)"
            },
            {
                "name": "selectOrderState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/order/order.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<OrderState>('orders')"
            },
            {
                "name": "selectOutOfStockAlerts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/stock/stock.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectStockState,\r\n    (state) => state.outOfStockAlerts\r\n)"
            },
            {
                "name": "selectProductFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/product/product.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectProductState,\r\n    state => state.filters\r\n)"
            },
            {
                "name": "selectProductPagination",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/product/product.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectProductState,\r\n    state => state.pagination\r\n)"
            },
            {
                "name": "selectProductsError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/product/product.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectProductState,\r\n    state => state.error\r\n)"
            },
            {
                "name": "selectProductsLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/product/product.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectProductState,\r\n    state => state.loading\r\n)"
            },
            {
                "name": "selectProductState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/product/product.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ProductState>('products')"
            },
            {
                "name": "selectSelectedCategory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/category/category.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectCategoryState,\r\n    (state) => state.selectedCategory\r\n)"
            },
            {
                "name": "selectSelectedProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/product/product.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectProductState,\r\n    state => state.selectedProduct\r\n)"
            },
            {
                "name": "selectStockError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/stock/stock.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectStockState,\r\n    (state) => state.error\r\n)"
            },
            {
                "name": "selectStockForProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/stock/stock.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(productId: string) => createSelector(\r\n    selectAllStockItems,\r\n    (items) => items[productId]\r\n)"
            },
            {
                "name": "selectStockLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/stock/stock.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectStockState,\r\n    (state) => state.loading\r\n)"
            },
            {
                "name": "selectStockState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/stock/stock.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<StockState>('stock')"
            },
            {
                "name": "StockActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/stock/stock.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n    source: 'Stock',\r\n    events: {\r\n        // Load Stock\r\n        'Load Stock': props<{ productId: string }>(),\r\n        'Load Stock Success': props<{ stock: StockItem }>(),\r\n        'Load Stock Failure': props<{ error: string }>(),\r\n\r\n        // Adjust Stock\r\n        'Adjust Stock': props<{ adjustment: StockAdjustment }>(),\r\n        'Adjust Stock Success': props<{ stock: StockItem }>(),\r\n        'Adjust Stock Failure': props<{ error: string }>(),\r\n\r\n        // Batch Adjust\r\n        'Batch Adjust Stock': props<{ adjustments: BatchStockAdjustment }>(),\r\n        'Batch Adjust Stock Success': props<{ stocks: StockItem[] }>(),\r\n        'Batch Adjust Stock Failure': props<{ error: string }>(),\r\n\r\n        // Real-time Updates\r\n        'Stock Updated': props<{ stock: StockItem }>(),\r\n        'Low Stock Alert': props<{ stock: StockItem }>(),\r\n        'Out Of Stock Alert': props<{ stock: StockItem }>(),\r\n\r\n        // Load Alerts\r\n        'Load Low Stock Items': emptyProps(),\r\n        'Load Low Stock Items Success': props<{ items: StockItem[] }>(),\r\n        'Load Low Stock Items Failure': props<{ error: string }>(),\r\n\r\n        'Load Out Of Stock Items': emptyProps(),\r\n        'Load Out Of Stock Items Success': props<{ items: StockItem[] }>(),\r\n        'Load Out Of Stock Items Failure': props<{ error: string }>()\r\n    }\r\n})"
            },
            {
                "name": "stockReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/stock/stock.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialStockState,\r\n\r\n    // Load Stock\r\n    on(StockActions.loadStock, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(StockActions.loadStockSuccess, (state, { stock }) => ({\r\n        ...state,\r\n        items: {\r\n            ...state.items,\r\n            [stock.productId]: stock\r\n        },\r\n        loading: false\r\n    })),\r\n\r\n    on(StockActions.loadStockFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Real-time Updates\r\n    on(StockActions.stockUpdated, (state, { stock }) => ({\r\n        ...state,\r\n        items: {\r\n            ...state.items,\r\n            [stock.productId]: stock\r\n        }\r\n    })),\r\n    // Real-time Updates\r\n    on(StockActions.stockUpdated, (state, { stock }) => ({\r\n        ...state,\r\n        items: {\r\n            ...state.items,\r\n            [stock.productId]: stock\r\n        }\r\n    })),\r\n\r\n    on(StockActions.lowStockAlert, (state, { stock }) => ({\r\n        ...state,\r\n        lowStockAlerts: [\r\n            ...state.lowStockAlerts.filter(item => item.productId !== stock.productId),\r\n            stock\r\n        ]\r\n    })),\r\n\r\n    on(StockActions.outOfStockAlert, (state, { stock }) => ({\r\n        ...state,\r\n        outOfStockAlerts: [\r\n            ...state.outOfStockAlerts.filter(item => item.productId !== stock.productId),\r\n            stock\r\n        ]\r\n    })),\r\n    on(StockActions.lowStockAlert, (state, { stock }) => ({\r\n        ...state,\r\n        lowStockAlerts: [\r\n            ...state.lowStockAlerts.filter(item => item.productId !== stock.productId),\r\n            stock\r\n        ]\r\n    })),\r\n\r\n    // Load Alerts\r\n    on(StockActions.loadLowStockItemsSuccess, (state, { items }) => ({\r\n        ...state,\r\n        lowStockAlerts: items\r\n    })),\r\n\r\n    on(StockActions.loadOutOfStockItemsSuccess, (state, { items }) => ({\r\n        ...state,\r\n        outOfStockAlerts: items\r\n    }))\r\n)"
            }
        ],
        "functions": [
            {
                "name": "buildHierarchy",
                "file": "src/app/store/category/category.selectors.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "roots",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "allCategories",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Category[]",
                "jsdoctags": [
                    {
                        "name": "roots",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "allCategories",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProductFormFields",
                "file": "src/app/features/products/configs/product.formly.config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "categories",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "FormlyFieldConfig[]",
                "jsdoctags": [
                    {
                        "name": "categories",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapProductFromApi",
                "file": "src/app/shared/models/product.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Maps a product from API response format to the Product interface</p>\n",
                "args": [
                    {
                        "name": "product",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "getFullImageUrl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Product",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 4048,
                            "end": 4055,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "product"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4042,
                            "end": 4047,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>The raw product data from API</p>\n"
                    },
                    {
                        "name": {
                            "pos": 4097,
                            "end": 4112,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "getFullImageUrl"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4091,
                            "end": 4096,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>Function to transform image URLs</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 4151,
                            "end": 4158,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A properly formatted Product object</p>\n"
                    }
                ]
            },
            {
                "name": "mapVariantFromApi",
                "file": "src/app/shared/models/product.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Maps a product variant from API response format to the ProductVariant interface</p>\n",
                "args": [
                    {
                        "name": "variant",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "getFullImageUrl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ProductVariant",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 5193,
                            "end": 5200,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "variant"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 5187,
                            "end": 5192,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>The raw variant data from API</p>\n"
                    },
                    {
                        "name": {
                            "pos": 5242,
                            "end": 5257,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "getFullImageUrl"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 5236,
                            "end": 5241,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>Function to transform image URLs</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 5296,
                            "end": 5303,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A properly formatted ProductVariant object</p>\n"
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AuthError",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"auth/invalid-credentials\" | \"auth/session-expired\" | \"auth/network-error\" | \"auth/unknown-error\"",
                "file": "src/app/shared/models/auth.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ValidationError",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/models/error.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [
            {
                "name": "Currency",
                "childs": [
                    {
                        "name": "USD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "United States Dollar"
                    },
                    {
                        "name": "EUR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Euro"
                    },
                    {
                        "name": "GBP",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "British Pound"
                    },
                    {
                        "name": "JPY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Japanese Yen"
                    },
                    {
                        "name": "AUD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Australian Dollar"
                    },
                    {
                        "name": "SEK",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Swedish Krona"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/models/currency.enum.ts"
            },
            {
                "name": "CustomerStatus",
                "childs": [
                    {
                        "name": "Active",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "active"
                    },
                    {
                        "name": "Inactive",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "inactive"
                    },
                    {
                        "name": "Blocked",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "blocked"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/models/customer.model.ts"
            },
            {
                "name": "OrderStatus",
                "childs": [
                    {
                        "name": "Pending",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pending"
                    },
                    {
                        "name": "Confirmed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "confirmed"
                    },
                    {
                        "name": "Processing",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "processing"
                    },
                    {
                        "name": "Shipped",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "shipped"
                    },
                    {
                        "name": "Delivered",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "delivered"
                    },
                    {
                        "name": "Cancelled",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "cancelled"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/models/order.model.ts"
            },
            {
                "name": "PaymentStatus",
                "childs": [
                    {
                        "name": "Pending",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pending"
                    },
                    {
                        "name": "Authorized",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "authorized"
                    },
                    {
                        "name": "Paid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "paid"
                    },
                    {
                        "name": "Failed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "failed"
                    },
                    {
                        "name": "Refunded",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "refunded"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/models/order.model.ts"
            },
            {
                "name": "ProductCategory",
                "childs": [
                    {
                        "name": "Clothing",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "clothing"
                    },
                    {
                        "name": "Electronics",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "electronics"
                    },
                    {
                        "name": "Furniture",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "furniture"
                    },
                    {
                        "name": "Books",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "books"
                    },
                    {
                        "name": "Groceries",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "groceries"
                    },
                    {
                        "name": "Beauty",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "beauty"
                    },
                    {
                        "name": "Toys",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "toys"
                    },
                    {
                        "name": "Other",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "other"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/models/product-type.model.ts"
            },
            {
                "name": "ProductStatus",
                "childs": [
                    {
                        "name": "Draft",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "draft"
                    },
                    {
                        "name": "Active",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "active"
                    },
                    {
                        "name": "OutOfStock",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "out_of_stock"
                    },
                    {
                        "name": "Discontinued",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "discontinued"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/models/product.model.ts"
            },
            {
                "name": "ProductVisibility",
                "childs": [
                    {
                        "name": "Visible",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "visible"
                    },
                    {
                        "name": "Hidden",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hidden"
                    },
                    {
                        "name": "Featured",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "featured"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/models/product.model.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes, withViewTransitions()),\r\n    provideHttpClient(\r\n      withInterceptors([\r\n        authInterceptor,\r\n        errorInterceptor,\r\n        loadingInterceptor,\r\n      ])\r\n    ),\r\n    // Add NgRx Store configuration\r\n    provideStore({\r\n      products: productReducer,\r\n      categories: categoryReducer,\r\n      stock: stockReducer,\r\n      order: orderReducer,\r\n    }),\r\n    provideEffects([ProductEffects, CategoryEffects, StockEffects, OrderEffects]),\r\n    provideStoreDevtools({\r\n      maxAge: 25,\r\n      logOnly: environment.production,\r\n      autoPause: true,\r\n    }),\r\n    provideAnimations(), // Add animations provider\r\n    provideNativeDateAdapter(), // Add date adapter provider\r\n    importProvidersFrom(\r\n      ReactiveFormsModule,\r\n      FileValueAccessor,\r\n      FormlyModule.forRoot({\r\n        types: [\r\n          {\r\n            name: 'file',\r\n            component: FormlyImageUploadTypeComponent,\r\n            wrappers: ['form-field'],\r\n            defaultOptions: {\r\n              templateOptions: {\r\n                multiple: false,\r\n                maxSize: 5000000,\r\n                accept: 'image/*'\r\n              }\r\n            }\r\n          },\r\n          {\r\n            name: 'color-picker',\r\n            component: FormlyColorPickerTypeComponent,\r\n            // wrappers: ['form-field'],\r\n            defaultOptions: {\r\n              validators: {\r\n                pattern: {\r\n                  expression: (c: any) => !c.value || /^#[0-9A-Fa-f]{6}$/.test(c.value),\r\n                  message: 'Color must be a valid hex color (e.g. #FF0000)'\r\n                }\r\n              }\r\n            }\r\n          },\r\n        ],\r\n        validationMessages: [\r\n          { name: 'required', message: 'This field is required' },\r\n          { name: 'minLength', message: 'Minimum length not met' },\r\n          { name: 'maxLength', message: 'Maximum length exceeded' },\r\n          { name: 'min', message: 'Value is too small' },\r\n          { name: 'max', message: 'Value is too large' },\r\n          { name: 'email', message: 'Invalid email address' }\r\n        ],\r\n      }),\r\n      FormlyMaterialModule,\r\n    ),\r\n  ]\r\n}"
                }
            ],
            "src/app/shared/models/auth.models.ts": [
                {
                    "name": "AUTH_ERROR_MESSAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/models/auth.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<AuthError, string>",
                    "defaultValue": "{\r\n    'auth/invalid-credentials': 'Invalid username or password',\r\n    'auth/session-expired': 'Your session has expired. Please login again.',\r\n    'auth/network-error': 'Unable to connect to authentication service',\r\n    'auth/unknown-error': 'An unknown error occurred'\r\n}"
                },
                {
                    "name": "AUTH_STORAGE_KEYS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/models/auth.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{\r\n    ACCESS_TOKEN: 'auth.access_token',\r\n    USER: 'auth.user',\r\n    EXPIRES_AT: 'auth.expires_at'\r\n} as const"
                }
            ],
            "src/app/core/guards/auth.guard.ts": [
                {
                    "name": "authenticatedWithPermissionGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\r\n    const authService = inject(AuthService);\r\n    const router = inject(Router);\r\n    const requiredPermission = route.data['permission'];\r\n\r\n    return new Observable<boolean>(observer => {\r\n        authService.isAuthenticated$.pipe(\r\n            tap(isAuthenticated => {\r\n                if (!isAuthenticated) {\r\n                    router.navigate(['/login'], {\r\n                        queryParams: { returnUrl: state.url }\r\n                    });\r\n                    observer.next(false);\r\n                    observer.complete();\r\n                }\r\n            }),\r\n            map(isAuthenticated => {\r\n                if (!isAuthenticated) return false;\r\n                if (!requiredPermission) return true;\r\n\r\n                return authService.hasPermission(requiredPermission).pipe(\r\n                    tap(hasPermission => {\r\n                        if (!hasPermission) {\r\n                            router.navigate(['/unauthorized']);\r\n                        }\r\n                    })\r\n                );\r\n            })\r\n        ).subscribe(result => {\r\n            observer.next(result as boolean);\r\n            observer.complete();\r\n        });\r\n    });\r\n}"
                },
                {
                    "name": "authGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\r\n    const authService = inject(AuthService);\r\n    const router = inject(Router);\r\n\r\n    return authService.isAuthenticated$.pipe(\r\n        tap(isAuthenticated => {\r\n            if (!isAuthenticated) {\r\n                // Store attempted URL for redirect after login\r\n                const returnUrl = state.url;\r\n                router.navigate(['/login'], {\r\n                    queryParams: { returnUrl }\r\n                });\r\n            }\r\n        })\r\n    );\r\n}"
                },
                {
                    "name": "permissionGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\r\n    const authService = inject(AuthService);\r\n    const router = inject(Router);\r\n    const requiredPermission = route.data['permission'];\r\n\r\n    if (!requiredPermission) {\r\n        return true;\r\n    }\r\n\r\n    return authService.hasPermission(requiredPermission).pipe(\r\n        tap(hasPermission => {\r\n            if (!hasPermission) {\r\n                router.navigate(['/unauthorized']);\r\n            }\r\n        })\r\n    );\r\n}"
                },
                {
                    "name": "roleGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\r\n    const authService = inject(AuthService);\r\n    const router = inject(Router);\r\n    const requiredRole = route.data['role'];\r\n\r\n    if (!requiredRole) {\r\n        return true;\r\n    }\r\n\r\n    return authService.hasRole(requiredRole).pipe(\r\n        tap(hasRole => {\r\n            if (!hasRole) {\r\n                router.navigate(['/unauthorized']);\r\n            }\r\n        })\r\n    );\r\n}"
                },
                {
                    "name": "routeMatchGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanMatchFn",
                    "defaultValue": "(route: Route, segments: UrlSegment[]) => {\r\n    const authService = inject(AuthService);\r\n\r\n    // Example of complex route matching logic\r\n    return new Observable<boolean>(observer => {\r\n        // Check authentication\r\n        authService.isAuthenticated$.pipe(\r\n            map(isAuthenticated => {\r\n                if (!isAuthenticated) return false;\r\n\r\n                // Check feature flag in route data\r\n                const featureFlag = route.data?.['featureFlag'] as keyof typeof environment.features;\r\n                if (featureFlag && !environment.features[featureFlag]) {\r\n                    return false;\r\n                }\r\n\r\n                // Check required permissions\r\n                const permissions = route.data?.['permissions'] as string[];\r\n                if (permissions?.length) {\r\n                    return permissions.every(permission =>\r\n                        authService.hasPermission(permission)\r\n                    );\r\n                }\r\n\r\n                return true;\r\n            })\r\n        ).subscribe(result => {\r\n            observer.next(result);\r\n            observer.complete();\r\n        });\r\n    });\r\n}"
                }
            ],
            "src/app/core/interceptors/auth.interceptor.ts": [
                {
                    "name": "authInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n    const authService = inject(AuthService);\r\n\r\n    // Skip token injection for non-API and auth endpoints\r\n    if (!req.url.startsWith(environment.apiUrls.admin.baseUrl) ||\r\n        req.url.includes('/auth/')) {\r\n        return next(req);\r\n    }\r\n\r\n    return authService.getAccessToken().pipe(\r\n        switchMap(token => {\r\n            if (token) {\r\n                const authReq = req.clone({\r\n                    headers: req.headers.set('Authorization', `Bearer ${token}`)\r\n                });\r\n                return next(authReq);\r\n            }\r\n            return next(req);\r\n        }),\r\n        catchError((error: HttpErrorResponse) => {\r\n            // Handle authentication errors\r\n            if (error.status === HttpStatusCode.Unauthorized) {\r\n                // Try refreshing token silently\r\n                return authService.refreshToken().pipe(\r\n                    switchMap(success => {\r\n                        if (success) {\r\n                            // Retry the original request\r\n                            return authService.getAccessToken().pipe(\r\n                                switchMap(newToken => {\r\n                                    const retryReq = req.clone({\r\n                                        headers: req.headers.set('Authorization', `Bearer ${newToken}`)\r\n                                    });\r\n                                    return next(retryReq);\r\n                                })\r\n                            );\r\n                        }\r\n                        // If refresh failed, logout and redirect to login\r\n                        authService.logout();\r\n                        return throwError(() => error);\r\n                    })\r\n                );\r\n            }\r\n\r\n            // Handle forbidden errors\r\n            if (error.status === HttpStatusCode.Forbidden) {\r\n                console.error('Access forbidden:', req.url);\r\n                // You might want to redirect to an error page or show a notification\r\n            }\r\n\r\n            return throwError(() => error);\r\n        })\r\n    );\r\n}"
                }
            ],
            "src/app/store/category/category.actions.ts": [
                {
                    "name": "CategoryActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/category/category.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n    source: 'Category',\r\n    events: {\r\n        'Load Categories': emptyProps(),\r\n        'Load Categories Success': props<{ categories: Category[] }>(),\r\n        'Load Categories Failure': props<{ error: string }>(),\r\n\r\n        'Create Category': props<{ request: CreateCategoryRequest }>(),\r\n        'Create Category Success': props<{ category: Category }>(),\r\n        'Create Category Failure': props<{ error: string }>(),\r\n\r\n        'Update Category': props<{ id: string, request: UpdateCategoryRequest }>(),\r\n        'Update Category Success': props<{ category: Category }>(),\r\n        'Update Category Failure': props<{ error: string }>(),\r\n\r\n        'Delete Category': props<{ id: string }>(),\r\n        'Delete Category Success': props<{ id: string }>(),\r\n        'Delete Category Failure': props<{ error: string }>(),\r\n\r\n        'Reorder Categories': props<{ requests: ReorderCategoryRequest[] }>(),\r\n        'Reorder Categories Success': emptyProps(),\r\n        'Reorder Categories Failure': props<{ error: string }>(),\r\n\r\n        'Select Category': props<{ category: Category | null }>()\r\n    }\r\n})"
                }
            ],
            "src/app/store/category/category.reducer.ts": [
                {
                    "name": "categoryReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/category/category.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialCategoryState,\r\n\r\n    // Load Categories\r\n    on(CategoryActions.loadCategories, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(CategoryActions.loadCategoriesSuccess, (state, { categories }) => ({\r\n        ...state,\r\n        categories,\r\n        loading: false,\r\n        error: null\r\n    })),\r\n\r\n    on(CategoryActions.loadCategoriesFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Create Category\r\n    on(CategoryActions.createCategory, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(CategoryActions.createCategorySuccess, (state, { category }) => ({\r\n        ...state,\r\n        categories: [...state.categories, category],\r\n        loading: false,\r\n        error: null\r\n    })),\r\n\r\n    on(CategoryActions.createCategoryFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Update Category\r\n    on(CategoryActions.updateCategory, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(CategoryActions.updateCategorySuccess, (state, { category }) => ({\r\n        ...state,\r\n        categories: state.categories.map(c =>\r\n            c.id === category.id ? category : c\r\n        ),\r\n        loading: false,\r\n        error: null\r\n    })),\r\n\r\n    on(CategoryActions.updateCategoryFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Delete Category\r\n    on(CategoryActions.deleteCategory, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(CategoryActions.deleteCategorySuccess, (state, { id }) => ({\r\n        ...state,\r\n        categories: state.categories.filter(c => c.id !== id),\r\n        loading: false,\r\n        error: null\r\n    })),\r\n\r\n    on(CategoryActions.deleteCategoryFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Select Category\r\n    on(CategoryActions.selectCategory, (state, { category }) => ({\r\n        ...state,\r\n        selectedCategory: category\r\n    }))\r\n)"
                }
            ],
            "src/app/store/dashboard/dashboard.actions.ts": [
                {
                    "name": "DashboardActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/dashboard/dashboard.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n    source: 'Dashboard',\r\n    events: {\r\n        'Load Stats': emptyProps(),\r\n        'Load Stats Success': props<{ stats: DashboardStats }>(),\r\n        'Load Stats Failure': props<{ error: string }>(),\r\n        'Reset Stats': emptyProps()\r\n    }\r\n})"
                }
            ],
            "src/app/store/dashboard/dashboard.reducer.ts": [
                {
                    "name": "dashboardReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/dashboard/dashboard.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialDashboardState,\r\n\r\n    on(DashboardActions.loadStats, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(DashboardActions.loadStatsSuccess, (state, { stats }) => ({\r\n        ...state,\r\n        stats,\r\n        loading: false,\r\n        error: null,\r\n        lastUpdated: Date.now()\r\n    })),\r\n\r\n    on(DashboardActions.loadStatsFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    on(DashboardActions.resetStats, () => initialDashboardState)\r\n)"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: true,\r\n\r\n    apiUrls: {\r\n        admin: {\r\n            baseUrl: 'https://api.yourcompany.com/admin',\r\n            products: 'https://api.yourcompany.com/admin/products',\r\n            statistics: 'https://api.yourcompany.com/admin/statistics',\r\n            auth: 'https://api.yourcompany.com/admin/auth'\r\n        },\r\n        shop: {\r\n            baseUrl: 'https://api.yourcompany.com/shop',\r\n            products: 'https://api.yourcompany.com/shop/products',\r\n            cart: 'https://api.yourcompany.com/shop/cart',\r\n            orders: 'https://api.yourcompany.com/shop/orders'\r\n        },\r\n        shipping: {\r\n            baseUrl: 'https://api.yourcompany.com/shipping',\r\n            shipments: 'https://api.yourcompany.com/shipping/shipments',\r\n            tracking: 'https://api.yourcompany.com/shipping/tracking'\r\n        }\r\n    },\r\n\r\n    azure: {\r\n        blobStorage: {\r\n            containerUrl: 'https://prod-storage.blob.core.windows.net',\r\n            productsContainer: 'products-images'\r\n        }\r\n    },\r\n\r\n    identityServer: {\r\n        authority: 'https://identity.al_store.com',\r\n        clientId: 'admin-portal',\r\n        redirectUri: window.location.origin + '/callback',\r\n        postLogoutRedirectUri: window.location.origin,\r\n        responseType: 'code',\r\n        scope: 'openid profile email api.full'\r\n    },\r\n\r\n    features: {\r\n        enableAnalytics: true,\r\n        enableNotifications: true,\r\n        useSignalR: true\r\n    },\r\n\r\n    signalR: {\r\n        hubUrl: 'https://api.yourcompany.com/hubs/notifications'\r\n    },\r\n\r\n    cache: {\r\n        defaultTTL: 300,\r\n        productsTTL: 600\r\n    }\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: false,\r\n\r\n    // API URLs\r\n    apiUrls: {\r\n        // Admin Portal API\r\n        admin: {\r\n            baseUrl: 'https://localhost:7048/api',\r\n            products: 'https://localhost:7048/api/products',\r\n            categories: 'https://localhost:7048/api/categories',\r\n            statistics: 'https://localhost:7048/api/statistics',\r\n            stock: 'https://localhost:7048/api/stock',\r\n            auth: 'https://localhost:7048/api/auth',\r\n            orders: 'https://localhost:7048/api/orders',\r\n        },\r\n        // Shop Portal API\r\n        shop: {\r\n            baseUrl: 'http://localhost:7002/api',\r\n            products: 'http://localhost:7002/api/products',\r\n            cart: 'http://localhost:7002/api/cart',\r\n            orders: 'http://localhost:7002/api/orders'\r\n        },\r\n        // Shipping Portal API\r\n        shipping: {\r\n            baseUrl: 'http://localhost:5003/api',\r\n            shipments: 'http://localhost:5003/api/shipments',\r\n            tracking: 'http://localhost:5003/api/tracking'\r\n        }\r\n    },\r\n\r\n    // Azure Storage\r\n    azure: {\r\n        blobStorage: {\r\n            containerUrl: 'http://localhost:10000/devstoreaccount1/alstoreblob',\r\n            productsContainer: 'Product_Pictures'\r\n        }\r\n    },\r\n\r\n    // Authentication\r\n    auth: {\r\n        authority: 'https://localhost:5001',\r\n        clientId: 'admin_portal', // Note: Using the SPA client ID\r\n        redirectUri: window.location.origin + '/callback',\r\n        postLogoutRedirectUri: window.location.origin,\r\n        responseType: 'code',\r\n        scope: 'openid profile email api.full',\r\n        requireHttps: true\r\n    },\r\n\r\n    // Feature Flags\r\n    features: {\r\n        enableAnalytics: true,\r\n        enableNotifications: true,\r\n        useSignalR: true,\r\n        enableCache: true,\r\n        enableAuth: true,\r\n        enableShoppingCart: true,\r\n        enableShipping: true,\r\n\r\n    },\r\n\r\n    // SignalR\r\n    signalR: {\r\n        hubUrlnotifications: 'https://localhost:7048/hubs/notifications',\r\n        product: 'https://localhost:7048/hubs/products',\r\n        category: 'https://localhost:7048/hubs/categories',\r\n        stock: 'https://localhost:7048/hubs/stock',\r\n        order: 'https://localhost:7048/hubs/orders'\r\n    },\r\n\r\n    // Cache Configuration\r\n    cache: {\r\n        defaultTTL: 300, // 5 minutes\r\n        productsTTL: 600, // 10 minutes\r\n        productTypesTTL: 600, // 10 minutes\r\n        categoriesTTL: 600, // 10 minutes\r\n    }\r\n}"
                }
            ],
            "src/app/core/interceptors/error.interceptor.ts": [
                {
                    "name": "errorInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/error.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n    const errorService = inject(ErrorService);\r\n    const router = inject(Router);\r\n\r\n    return next(req).pipe(\r\n        catchError((error: unknown) => {\r\n            if (error instanceof HttpErrorResponse) {\r\n                // Handle different types of errors\r\n                switch (error.status) {\r\n                    case 0:\r\n                        // Network error or CORS\r\n                        router.navigate(['/error/network']);\r\n                        break;\r\n\r\n                    case HttpStatusCode.NotFound:\r\n                        router.navigate(['/error/404']);\r\n                        break;\r\n\r\n                    case HttpStatusCode.InternalServerError:\r\n                        router.navigate(['/error/500']);\r\n                        break;\r\n\r\n                    case HttpStatusCode.Unauthorized:\r\n                        // Let auth interceptor handle this\r\n                        break;\r\n\r\n                    case HttpStatusCode.Forbidden:\r\n                        router.navigate(['/unauthorized']);\r\n                        break;\r\n\r\n                    default:\r\n                        // For other errors, show the error message\r\n                        router.navigate(['/error/generic'], {\r\n                            queryParams: {\r\n                                message: error.error?.message || 'An unexpected error occurred'\r\n                            }\r\n                        });\r\n                }\r\n\r\n                // Add error to error service\r\n                errorService.addError({\r\n                    code: error.error?.code || `HTTP_${error.status}`,\r\n                    message: error.error?.message || error.message,\r\n                    severity: error.status >= 500 ? 'error' : 'warning'\r\n                });\r\n            } else {\r\n                // Handle non-HTTP errors\r\n                console.error('Non-HTTP Error:', error);\r\n                router.navigate(['/error/generic']);\r\n\r\n                errorService.addError({\r\n                    code: 'UNKNOWN_ERROR',\r\n                    message: 'An unexpected error occurred',\r\n                    severity: 'error'\r\n                });\r\n            }\r\n\r\n            return throwError(() => error);\r\n        })\r\n    );\r\n}"
                }
            ],
            "src/app/store/category/category.state.ts": [
                {
                    "name": "initialCategoryState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/category/category.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CategoryState",
                    "defaultValue": "{\r\n    categories: [],\r\n    selectedCategory: null,\r\n    loading: false,\r\n    error: null\r\n}"
                }
            ],
            "src/app/store/dashboard/dashboard.state.ts": [
                {
                    "name": "initialDashboardState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/dashboard/dashboard.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DashboardState",
                    "defaultValue": "{\r\n    stats: null,\r\n    loading: false,\r\n    error: null,\r\n    lastUpdated: null\r\n}"
                }
            ],
            "src/app/store/order/order.state.ts": [
                {
                    "name": "initialOrderState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/order/order.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OrderState",
                    "defaultValue": "{\r\n    orders: [],\r\n    selectedOrder: null,\r\n    loading: false,\r\n    error: null,\r\n    filters: {\r\n        page: 1,\r\n        pageSize: 10,\r\n        sortBy: 'createdAt',\r\n        sortDirection: 'desc'\r\n    },\r\n    pagination: {\r\n        currentPage: 1,\r\n        pageSize: 10,\r\n        totalItems: 0\r\n    }\r\n}"
                }
            ],
            "src/app/store/product/product.state.ts": [
                {
                    "name": "initialProductState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/product/product.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductState",
                    "defaultValue": "{\r\n    products: [],\r\n    selectedProduct: null,\r\n    loading: false,\r\n    error: null,\r\n    filters: {\r\n        search: '',\r\n        category: '',\r\n        minPrice: null,\r\n        maxPrice: null,\r\n        inStock: null,\r\n        page: 1,\r\n        pageSize: 10,\r\n        sortColumn: undefined,\r\n        sortDirection: undefined\r\n    },\r\n    pagination: {\r\n        currentPage: 1,\r\n        pageSize: 10,\r\n        totalItems: 0\r\n    },\r\n    optimisticUpdate: {\r\n        originalProduct: null,\r\n        pending: false\r\n    },\r\n    cache: {\r\n        timestamp: null,\r\n        duration: 5 * 60 * 1000 // 5 minutes\r\n    }\r\n}"
                }
            ],
            "src/app/store/stock/stock.state.ts": [
                {
                    "name": "initialStockState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/stock/stock.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StockState",
                    "defaultValue": "{\r\n    items: {},\r\n    loading: false,\r\n    error: null,\r\n    lowStockAlerts: [],\r\n    outOfStockAlerts: []\r\n}"
                }
            ],
            "src/app/core/interceptors/loading.interceptor.ts": [
                {
                    "name": "loadingInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/loading.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n    const loadingService = inject(LoadingService);\r\n    loadingService.show();\r\n\r\n    return next(req).pipe(\r\n        finalize(() => {\r\n            loadingService.hide();\r\n        })\r\n    );\r\n}"
                }
            ],
            "src/app/store/order/order.actions.ts": [
                {
                    "name": "OrderActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/order/order.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n    source: 'Order',\r\n    events: {\r\n        // Load Orders\r\n        'Load Orders': props<{ params: OrderListParams }>(),\r\n        'Load Orders Success': props<{ orders: Order[]; totalItems: number }>(),\r\n        'Load Orders Failure': props<{ error: string }>(),\r\n\r\n        // Update Order Status\r\n        'Update Status': props<{ orderId: string; newStatus: string }>(),\r\n        'Update Status Success': props<{ order: Order }>(),\r\n        'Update Status Failure': props<{ error: string }>(),\r\n\r\n        // Add Payment\r\n        'Add Payment': props<{ orderId: string; payment: any }>(),\r\n        'Add Payment Success': props<{ order: Order }>(),\r\n        'Add Payment Failure': props<{ error: string }>(),\r\n\r\n        // Update Shipping\r\n        'Update Shipping': props<{ orderId: string; shipping: any }>(),\r\n        'Update Shipping Success': props<{ order: Order }>(),\r\n        'Update Shipping Failure': props<{ error: string }>(),\r\n\r\n        // Real-time Updates\r\n        'Order Updated': props<{ order: Order }>(),\r\n        'Order Status Changed': props<{ orderId: string; newStatus: string }>(),\r\n\r\n        // Filters\r\n        'Set Filters': props<{ filters: Partial<OrderListParams> }>(),\r\n        'Reset Filters': emptyProps(),\r\n    }\r\n})"
                }
            ],
            "src/app/store/order/order.reducer.ts": [
                {
                    "name": "orderReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/order/order.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialOrderState,\r\n\r\n    // Load Orders\r\n    on(OrderActions.loadOrders, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(OrderActions.loadOrdersSuccess, (state, { orders, totalItems }) => ({\r\n        ...state,\r\n        orders,\r\n        loading: false,\r\n        error: null,\r\n        pagination: {\r\n            ...state.pagination,\r\n            totalItems\r\n        }\r\n    })),\r\n\r\n    on(OrderActions.loadOrdersFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Update Status\r\n    on(OrderActions.updateStatus, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(OrderActions.updateStatusSuccess, (state, { order }) => ({\r\n        ...state,\r\n        orders: state.orders.map(o => o.id === order.id ? order : o),\r\n        loading: false,\r\n        error: null\r\n    })),\r\n\r\n    on(OrderActions.updateStatusFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Real-time Updates\r\n    on(OrderActions.orderUpdated, (state, { order }) => ({\r\n        ...state,\r\n        orders: state.orders.map(o => o.id === order.id ? order : o)\r\n    })),\r\n\r\n    on(OrderActions.orderStatusChanged, (state, { orderId, newStatus }) => ({\r\n        ...state,\r\n        orders: state.orders.map(o =>\r\n            o.id === orderId\r\n                ? { ...o, status: newStatus as OrderStatus }\r\n                : o\r\n        )\r\n    })),\r\n\r\n    // Filters\r\n    on(OrderActions.setFilters, (state, { filters }) => ({\r\n        ...state,\r\n        filters: {\r\n            ...state.filters,\r\n            ...filters\r\n        }\r\n    })),\r\n\r\n    on(OrderActions.resetFilters, (state) => ({\r\n        ...state,\r\n        filters: initialOrderState.filters\r\n    }))\r\n)"
                }
            ],
            "src/app/store/product/product.actions.ts": [
                {
                    "name": "ProductActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/product/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n    source: 'Product',\r\n    events: {\r\n        // Load Products\r\n        'Load Products': props<{ filters: ProductFilters }>(),\r\n        'Load Products Success': props<{ products: Product[]; totalItems: number }>(),\r\n        'Load Products Failure': props<{ error: string }>(),\r\n\r\n        // Add Product\r\n        'Add Product': props<{ product: Omit<Product, 'id'> }>(),\r\n        'Add Product Success': props<{ product: Product }>(),\r\n        'Add Product Failure': props<{ error: string }>(),\r\n\r\n        // Update Product\r\n        'Update Product': props<{ id: string; product: Partial<Product> }>(),\r\n        'Update Product Success': props<{ product: Product }>(),\r\n        'Update Product Failure': props<{ error: string }>(),\r\n\r\n        // Optimistic Update Actions\r\n        'Optimistic Update Product': props<{ id: string; changes: Partial<Product> }>(),\r\n        'Revert Optimistic Update': emptyProps(),\r\n\r\n        // Delete Product\r\n        'Delete Product': props<{ id: string }>(),\r\n        'Delete Product Success': props<{ id: string }>(),\r\n        'Delete Product Failure': props<{ error: string }>(),\r\n\r\n        // Selection\r\n        'Select Product': props<{ product: Product }>(),\r\n        'Clear Selected Product': emptyProps(),\r\n\r\n        // Filters\r\n        'Set Filters': props<{ filters: Partial<ProductFilters> }>(),\r\n        'Reset Filters': emptyProps(),\r\n\r\n        // Cache\r\n        'Set Cache Timestamp': props<{ timestamp: number }>(),\r\n        'Clear Cache': emptyProps()\r\n    }\r\n})"
                }
            ],
            "src/app/store/product/product.reducer.ts": [
                {
                    "name": "productReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/product/product.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialProductState,\r\n\r\n    // Load Products\r\n    on(ProductActions.loadProducts, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(ProductActions.loadProductsSuccess, (state, { products, totalItems }) => ({\r\n        ...state,\r\n        products,\r\n        loading: false,\r\n        error: null,\r\n        pagination: {\r\n            ...state.pagination,\r\n            totalItems\r\n        },\r\n        cache: {\r\n            ...state.cache,\r\n            timestamp: Date.now()\r\n        }\r\n    })),\r\n\r\n    on(ProductActions.loadProductsFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Add Product\r\n    on(ProductActions.addProduct, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(ProductActions.addProductSuccess, (state, { product }) => ({\r\n        ...state,\r\n        products: [...state.products, product],\r\n        loading: false,\r\n        error: null\r\n    })),\r\n\r\n    on(ProductActions.addProductFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Optimistic Update\r\n    on(ProductActions.optimisticUpdateProduct, (state, { id, changes }) => {\r\n        const productToUpdate = state.products.find(p => p.id === id);\r\n        if (!productToUpdate) return state;\r\n\r\n        return {\r\n            ...state,\r\n            optimisticUpdate: {\r\n                originalProduct: productToUpdate,\r\n                pending: true\r\n            },\r\n            products: state.products.map(p =>\r\n                p.id === id ? { ...p, ...changes } : p\r\n            )\r\n        };\r\n    }),\r\n\r\n    on(ProductActions.revertOptimisticUpdate, (state) => {\r\n        if (!state.optimisticUpdate.originalProduct) return state;\r\n\r\n        return {\r\n            ...state,\r\n            products: state.products.map(p =>\r\n                p.id === state.optimisticUpdate.originalProduct?.id\r\n                    ? state.optimisticUpdate.originalProduct\r\n                    : p\r\n            ),\r\n            optimisticUpdate: {\r\n                originalProduct: null,\r\n                pending: false\r\n            }\r\n        };\r\n    }),\r\n\r\n    // Update Product\r\n    on(ProductActions.updateProductSuccess, (state, { product }) => ({\r\n        ...state,\r\n        products: state.products.map(p => p.id === product.id ? product : p),\r\n        loading: false,\r\n        error: null,\r\n        optimisticUpdate: {\r\n            originalProduct: null,\r\n            pending: false\r\n        }\r\n    })),\r\n\r\n    on(ProductActions.updateProductFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Delete Product\r\n    on(ProductActions.deleteProduct, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(ProductActions.deleteProductSuccess, (state, { id }) => ({\r\n        ...state,\r\n        products: state.products.filter(p => p.id !== id),\r\n        loading: false,\r\n        error: null\r\n    })),\r\n\r\n    on(ProductActions.deleteProductFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Selection\r\n    on(ProductActions.selectProduct, (state, { product }) => ({\r\n        ...state,\r\n        selectedProduct: product\r\n    })),\r\n\r\n    on(ProductActions.clearSelectedProduct, (state) => ({\r\n        ...state,\r\n        selectedProduct: null\r\n    })),\r\n\r\n    // Filters\r\n    on(ProductActions.setFilters, (state, { filters }) => ({\r\n        ...state,\r\n        filters: {\r\n            ...state.filters,\r\n            ...filters\r\n        }\r\n    })),\r\n\r\n    on(ProductActions.resetFilters, (state) => ({\r\n        ...state,\r\n        filters: initialProductState.filters\r\n    })),\r\n\r\n    // Cache\r\n    on(ProductActions.setCacheTimestamp, (state, { timestamp }) => ({\r\n        ...state,\r\n        cache: {\r\n            ...state.cache,\r\n            timestamp\r\n        }\r\n    })),\r\n\r\n    on(ProductActions.clearCache, (state) => ({\r\n        ...state,\r\n        cache: initialProductState.cache\r\n    }))\r\n)"
                }
            ],
            "src/app/store/category/category.selectors.ts": [
                {
                    "name": "selectAllCategories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/category/category.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectCategoryState,\r\n    (state) => state.categories\r\n)"
                },
                {
                    "name": "selectCategoriesError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/category/category.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectCategoryState,\r\n    (state) => state.error\r\n)"
                },
                {
                    "name": "selectCategoriesLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/category/category.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectCategoryState,\r\n    (state) => state.loading\r\n)"
                },
                {
                    "name": "selectCategoryHierarchy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/category/category.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectAllCategories,\r\n    (categories) => {\r\n        const rootCategories = categories.filter(c => !c.parentCategoryId);\r\n        return buildHierarchy(rootCategories, categories);\r\n    }\r\n)"
                },
                {
                    "name": "selectCategoryState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/category/category.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<CategoryState>('categories')"
                },
                {
                    "name": "selectSelectedCategory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/category/category.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectCategoryState,\r\n    (state) => state.selectedCategory\r\n)"
                }
            ],
            "src/app/store/order/order.selectors.ts": [
                {
                    "name": "selectAllOrders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/order/order.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectOrderState,\r\n    state => state.orders\r\n)"
                },
                {
                    "name": "selectOrderFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/order/order.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectOrderState,\r\n    state => state?.filters\r\n)"
                },
                {
                    "name": "selectOrderPagination",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/order/order.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectOrderState,\r\n    state => state.pagination\r\n)"
                },
                {
                    "name": "selectOrdersError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/order/order.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectOrderState,\r\n    state => state.error\r\n)"
                },
                {
                    "name": "selectOrdersLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/order/order.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectOrderState,\r\n    state => state.loading\r\n)"
                },
                {
                    "name": "selectOrderState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/order/order.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<OrderState>('orders')"
                }
            ],
            "src/app/store/product/product.selectors.ts": [
                {
                    "name": "selectAllProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/product/product.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectProductState,\r\n    state => state.products\r\n)"
                },
                {
                    "name": "selectProductFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/product/product.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectProductState,\r\n    state => state.filters\r\n)"
                },
                {
                    "name": "selectProductPagination",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/product/product.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectProductState,\r\n    state => state.pagination\r\n)"
                },
                {
                    "name": "selectProductsError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/product/product.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectProductState,\r\n    state => state.error\r\n)"
                },
                {
                    "name": "selectProductsLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/product/product.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectProductState,\r\n    state => state.loading\r\n)"
                },
                {
                    "name": "selectProductState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/product/product.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ProductState>('products')"
                },
                {
                    "name": "selectSelectedProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/product/product.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectProductState,\r\n    state => state.selectedProduct\r\n)"
                }
            ],
            "src/app/store/stock/stock.selectors.ts": [
                {
                    "name": "selectAllStockItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/stock/stock.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectStockState,\r\n    (state) => state.items\r\n)"
                },
                {
                    "name": "selectLowStockAlerts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/stock/stock.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectStockState,\r\n    (state) => state.lowStockAlerts\r\n)"
                },
                {
                    "name": "selectOutOfStockAlerts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/stock/stock.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectStockState,\r\n    (state) => state.outOfStockAlerts\r\n)"
                },
                {
                    "name": "selectStockError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/stock/stock.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectStockState,\r\n    (state) => state.error\r\n)"
                },
                {
                    "name": "selectStockForProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/stock/stock.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(productId: string) => createSelector(\r\n    selectAllStockItems,\r\n    (items) => items[productId]\r\n)"
                },
                {
                    "name": "selectStockLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/stock/stock.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectStockState,\r\n    (state) => state.loading\r\n)"
                },
                {
                    "name": "selectStockState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/stock/stock.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<StockState>('stock')"
                }
            ],
            "src/app/store/dashboard/dashboard.selectors.ts": [
                {
                    "name": "selectDashboardError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/dashboard/dashboard.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectDashboardState,\r\n    state => state.error\r\n)"
                },
                {
                    "name": "selectDashboardLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/dashboard/dashboard.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectDashboardState,\r\n    state => state.loading\r\n)"
                },
                {
                    "name": "selectDashboardState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/dashboard/dashboard.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<DashboardState>('dashboard')"
                },
                {
                    "name": "selectDashboardStats",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/dashboard/dashboard.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectDashboardState,\r\n    state => state.stats\r\n)"
                },
                {
                    "name": "selectLastUpdated",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/dashboard/dashboard.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectDashboardState,\r\n    state => state.lastUpdated\r\n)"
                }
            ],
            "src/app/store/stock/stock.actions.ts": [
                {
                    "name": "StockActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/stock/stock.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n    source: 'Stock',\r\n    events: {\r\n        // Load Stock\r\n        'Load Stock': props<{ productId: string }>(),\r\n        'Load Stock Success': props<{ stock: StockItem }>(),\r\n        'Load Stock Failure': props<{ error: string }>(),\r\n\r\n        // Adjust Stock\r\n        'Adjust Stock': props<{ adjustment: StockAdjustment }>(),\r\n        'Adjust Stock Success': props<{ stock: StockItem }>(),\r\n        'Adjust Stock Failure': props<{ error: string }>(),\r\n\r\n        // Batch Adjust\r\n        'Batch Adjust Stock': props<{ adjustments: BatchStockAdjustment }>(),\r\n        'Batch Adjust Stock Success': props<{ stocks: StockItem[] }>(),\r\n        'Batch Adjust Stock Failure': props<{ error: string }>(),\r\n\r\n        // Real-time Updates\r\n        'Stock Updated': props<{ stock: StockItem }>(),\r\n        'Low Stock Alert': props<{ stock: StockItem }>(),\r\n        'Out Of Stock Alert': props<{ stock: StockItem }>(),\r\n\r\n        // Load Alerts\r\n        'Load Low Stock Items': emptyProps(),\r\n        'Load Low Stock Items Success': props<{ items: StockItem[] }>(),\r\n        'Load Low Stock Items Failure': props<{ error: string }>(),\r\n\r\n        'Load Out Of Stock Items': emptyProps(),\r\n        'Load Out Of Stock Items Success': props<{ items: StockItem[] }>(),\r\n        'Load Out Of Stock Items Failure': props<{ error: string }>()\r\n    }\r\n})"
                }
            ],
            "src/app/store/stock/stock.reducer.ts": [
                {
                    "name": "stockReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/stock/stock.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialStockState,\r\n\r\n    // Load Stock\r\n    on(StockActions.loadStock, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n\r\n    on(StockActions.loadStockSuccess, (state, { stock }) => ({\r\n        ...state,\r\n        items: {\r\n            ...state.items,\r\n            [stock.productId]: stock\r\n        },\r\n        loading: false\r\n    })),\r\n\r\n    on(StockActions.loadStockFailure, (state, { error }) => ({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n    })),\r\n\r\n    // Real-time Updates\r\n    on(StockActions.stockUpdated, (state, { stock }) => ({\r\n        ...state,\r\n        items: {\r\n            ...state.items,\r\n            [stock.productId]: stock\r\n        }\r\n    })),\r\n    // Real-time Updates\r\n    on(StockActions.stockUpdated, (state, { stock }) => ({\r\n        ...state,\r\n        items: {\r\n            ...state.items,\r\n            [stock.productId]: stock\r\n        }\r\n    })),\r\n\r\n    on(StockActions.lowStockAlert, (state, { stock }) => ({\r\n        ...state,\r\n        lowStockAlerts: [\r\n            ...state.lowStockAlerts.filter(item => item.productId !== stock.productId),\r\n            stock\r\n        ]\r\n    })),\r\n\r\n    on(StockActions.outOfStockAlert, (state, { stock }) => ({\r\n        ...state,\r\n        outOfStockAlerts: [\r\n            ...state.outOfStockAlerts.filter(item => item.productId !== stock.productId),\r\n            stock\r\n        ]\r\n    })),\r\n    on(StockActions.lowStockAlert, (state, { stock }) => ({\r\n        ...state,\r\n        lowStockAlerts: [\r\n            ...state.lowStockAlerts.filter(item => item.productId !== stock.productId),\r\n            stock\r\n        ]\r\n    })),\r\n\r\n    // Load Alerts\r\n    on(StockActions.loadLowStockItemsSuccess, (state, { items }) => ({\r\n        ...state,\r\n        lowStockAlerts: items\r\n    })),\r\n\r\n    on(StockActions.loadOutOfStockItemsSuccess, (state, { items }) => ({\r\n        ...state,\r\n        outOfStockAlerts: items\r\n    }))\r\n)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/category/category.selectors.ts": [
                {
                    "name": "buildHierarchy",
                    "file": "src/app/store/category/category.selectors.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "roots",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allCategories",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Category[]",
                    "jsdoctags": [
                        {
                            "name": "roots",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allCategories",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/features/products/configs/product.formly.config.ts": [
                {
                    "name": "getProductFormFields",
                    "file": "src/app/features/products/configs/product.formly.config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "categories",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "FormlyFieldConfig[]",
                    "jsdoctags": [
                        {
                            "name": "categories",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/models/product.model.ts": [
                {
                    "name": "mapProductFromApi",
                    "file": "src/app/shared/models/product.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Maps a product from API response format to the Product interface</p>\n",
                    "args": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "getFullImageUrl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Product",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4048,
                                "end": 4055,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "product"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4042,
                                "end": 4047,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The raw product data from API</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4097,
                                "end": 4112,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "getFullImageUrl"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4091,
                                "end": 4096,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Function to transform image URLs</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4151,
                                "end": 4158,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A properly formatted Product object</p>\n"
                        }
                    ]
                },
                {
                    "name": "mapVariantFromApi",
                    "file": "src/app/shared/models/product.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Maps a product variant from API response format to the ProductVariant interface</p>\n",
                    "args": [
                        {
                            "name": "variant",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "getFullImageUrl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ProductVariant",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5193,
                                "end": 5200,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "variant"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5187,
                                "end": 5192,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The raw variant data from API</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5242,
                                "end": 5257,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "getFullImageUrl"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5236,
                                "end": 5241,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Function to transform image URLs</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5296,
                                "end": 5303,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A properly formatted ProductVariant object</p>\n"
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/shared/models/currency.enum.ts": [
                {
                    "name": "Currency",
                    "childs": [
                        {
                            "name": "USD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "United States Dollar"
                        },
                        {
                            "name": "EUR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Euro"
                        },
                        {
                            "name": "GBP",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "British Pound"
                        },
                        {
                            "name": "JPY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Japanese Yen"
                        },
                        {
                            "name": "AUD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Australian Dollar"
                        },
                        {
                            "name": "SEK",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Swedish Krona"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/models/currency.enum.ts"
                }
            ],
            "src/app/shared/models/customer.model.ts": [
                {
                    "name": "CustomerStatus",
                    "childs": [
                        {
                            "name": "Active",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "active"
                        },
                        {
                            "name": "Inactive",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "inactive"
                        },
                        {
                            "name": "Blocked",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "blocked"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/models/customer.model.ts"
                }
            ],
            "src/app/shared/models/order.model.ts": [
                {
                    "name": "OrderStatus",
                    "childs": [
                        {
                            "name": "Pending",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pending"
                        },
                        {
                            "name": "Confirmed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "confirmed"
                        },
                        {
                            "name": "Processing",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "processing"
                        },
                        {
                            "name": "Shipped",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "shipped"
                        },
                        {
                            "name": "Delivered",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "delivered"
                        },
                        {
                            "name": "Cancelled",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "cancelled"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/models/order.model.ts"
                },
                {
                    "name": "PaymentStatus",
                    "childs": [
                        {
                            "name": "Pending",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pending"
                        },
                        {
                            "name": "Authorized",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "authorized"
                        },
                        {
                            "name": "Paid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "paid"
                        },
                        {
                            "name": "Failed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "failed"
                        },
                        {
                            "name": "Refunded",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "refunded"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/models/order.model.ts"
                }
            ],
            "src/app/shared/models/product-type.model.ts": [
                {
                    "name": "ProductCategory",
                    "childs": [
                        {
                            "name": "Clothing",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "clothing"
                        },
                        {
                            "name": "Electronics",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "electronics"
                        },
                        {
                            "name": "Furniture",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "furniture"
                        },
                        {
                            "name": "Books",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "books"
                        },
                        {
                            "name": "Groceries",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "groceries"
                        },
                        {
                            "name": "Beauty",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "beauty"
                        },
                        {
                            "name": "Toys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "toys"
                        },
                        {
                            "name": "Other",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "other"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/models/product-type.model.ts"
                }
            ],
            "src/app/shared/models/product.model.ts": [
                {
                    "name": "ProductStatus",
                    "childs": [
                        {
                            "name": "Draft",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "draft"
                        },
                        {
                            "name": "Active",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "active"
                        },
                        {
                            "name": "OutOfStock",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "out_of_stock"
                        },
                        {
                            "name": "Discontinued",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "discontinued"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/models/product.model.ts"
                },
                {
                    "name": "ProductVisibility",
                    "childs": [
                        {
                            "name": "Visible",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "visible"
                        },
                        {
                            "name": "Hidden",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hidden"
                        },
                        {
                            "name": "Featured",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "featured"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/models/product.model.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/shared/models/auth.models.ts": [
                {
                    "name": "AuthError",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"auth/invalid-credentials\" | \"auth/session-expired\" | \"auth/network-error\" | \"auth/unknown-error\"",
                    "file": "src/app/shared/models/auth.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/models/error.models.ts": [
                {
                    "name": "ValidationError",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/models/error.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authenticatedWithPermissionGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "permissionGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "roleGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routeMatchGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/error.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/loading.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadingInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/base-crud.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseCrudService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/bulk-actions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BulkActionsService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/category.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoryService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/dashboard.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DashboardService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/dashboard.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DashboardStats",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/dialog.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogConfig",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/error.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/loading.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoadingService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/loading.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadingState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/order.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrderService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/order.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddPaymentRequest",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/order.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OrderListParams",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/order.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateOrderStatusRequest",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/order.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateShippingRequest",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/product-type.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductTypeService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/product.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductService",
                "coveragePercent": 63,
                "coverageCount": "12/19",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/signalr-factory.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SignalRFactoryService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/signalr.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SignalRService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/statistics.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatisticsService",
                "coveragePercent": 50,
                "coverageCount": "5/10",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/services/statistics.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DashboardStats",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/stock.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StockService",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/auth-loading/auth-loading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthLoadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/login/callback.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CallbackComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/unauthorized/unauthorized.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UnauthorizedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/categories/components/category-form-dialog/category-form-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryFormDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/features/categories/components/category-form-dialog/category-form-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/categories/components/category-tree/category-tree-node.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryTreeNodeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/categories/components/category-tree/category-tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryTreeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/components/stock-alerts/stock-alerts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StockAlertsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/error-pages/error-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/error-pages/error-page.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ErrorConfig",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/error-pages/generic-error/generic-error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenericErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/error-pages/network-error/network-error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NetworkErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/error-pages/not-found/not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/error-pages/server-error/server-error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServerErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/features/home/home.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DashboardMetric",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/home/home.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuickAction",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/orders/components/add-note-dialog/add-note-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddNoteDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/orders/components/add-payment-dialog/add-payment-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddPaymentDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/orders/components/add-payment-dialog/add-payment-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/orders/components/advanced-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdvancedSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/features/orders/components/advanced-search.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterField",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/orders/components/order-details-dialog/order-details-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrderDetailsDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/features/orders/components/update-shipping-dialog/update-shipping-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpdateShippingDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/orders/components/update-shipping-dialog/update-shipping-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CarrierOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/orders/components/update-shipping-dialog/update-shipping-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/orders/order-list/bulk-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BulkActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/features/orders/order-list/order-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrderListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/add-product/add-product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/components/barcode-scanner/barcode-scanner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BarcodeScannerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/components/bulk-product-import/bulk-product-import.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BulkProductImportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/components/bulk-product-import/bulk-product-import.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ImportRow",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/components/dynamic-product-form/dynamic-product-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicProductFormComponent",
                "coveragePercent": 7,
                "coverageCount": "3/38",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/components/dynamic-product-form/dynamic-product-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductFormModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/components/stock-management/stock-adjustment-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StockAdjustmentDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/components/stock-management/stock-adjustment-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/components/stock-management/stock-management.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StockManagementComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/components/variant-form/variant-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VariantFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/configs/product.formly.config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProductFormFields",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/pages/product-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnhancedProductFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/product-image-manager/product-image-manager.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductImageManagerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/product-list/image-preview-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImagePreviewDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/product-list/product-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductListComponent",
                "coveragePercent": 9,
                "coverageCount": "3/31",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/products.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/statistics/statistics.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatisticsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/statistics/statistics.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Statistics",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main-layout/main-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/sidebar/sidebar.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/badges/status-badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusBadgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dialog/edit-product-dialog/edit-product-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditProductDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dialog/save-preset-dialog/save-preset-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SavePresetDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/error-toast/error-toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/file-upload/file-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/global-loading/global-loading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GlobalLoadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/loading-spinner/loading-spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingSpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/has-permission.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HasPermissionDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/permission.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HasPermissionDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/permission.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HasRoleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/formly/color-picker.type.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormlyColorPickerTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/formly/file-value-accessor.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FileValueAccessor",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/formly/image-upload.type.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormlyImageUploadTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/Request.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateCategoryRequest",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/Request.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReorderCategoryRequest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/Request.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateCategoryRequest",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/auditableEntity.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuditableEntity",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/auth.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/auth.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthTokens",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/auth.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TokenResponse",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/auth.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/auth.models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AUTH_ERROR_MESSAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/auth.models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AUTH_STORAGE_KEYS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/auth.models.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AuthError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/category.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Category",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/category.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SubCategory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/customer.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Customer",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/error.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiError",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/error.models.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ValidationError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/order.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Order",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/order.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OrderItem",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/order.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Payment",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/order.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShippingInfo",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/paged-response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PagedResponse",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product-type.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BookAttributes",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product-type.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClothingAttributes",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product-type.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ColorVariant",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product-type.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ElectronicsAttributes",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product-type.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductType",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product-type.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductTypeAttribute",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product-type.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SizeColorVariant",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product-type.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SizeVariant",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductAttribute",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductCreateCommand",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductDimensions",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductFilters",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductImage",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductSeo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductUpdateCommand",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductVariant",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/product.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "mapProductFromApi",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/models/product.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "mapVariantFromApi",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/models/stock.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BatchStockAdjustment",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/stock.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StockAdjustment",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/stock.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StockItem",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/stock.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StockReservation",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/sub-category.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SubCategory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserRef",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/value-object.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Address",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/value-object.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Money",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/ceil-pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CeilPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/category/category.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CategoryActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/category/category.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoryEffects",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/store/category/category.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "categoryReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/category/category.selectors.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "buildHierarchy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/category/category.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllCategories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/category/category.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCategoriesError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/category/category.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCategoriesLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/category/category.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCategoryHierarchy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/category/category.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCategoryState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/category/category.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedCategory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/category/category.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CategoryState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/category/category.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialCategoryState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dashboard/dashboard.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DashboardActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dashboard/dashboard.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DashboardEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dashboard/dashboard.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dashboardReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dashboard/dashboard.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDashboardError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dashboard/dashboard.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDashboardLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dashboard/dashboard.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDashboardState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dashboard/dashboard.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDashboardStats",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dashboard/dashboard.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLastUpdated",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dashboard/dashboard.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DashboardState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dashboard/dashboard.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialDashboardState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/order/order.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OrderActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/order/order.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrderEffects",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/store/order/order.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "orderReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/order/order.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllOrders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/order/order.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectOrderFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/order/order.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectOrderPagination",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/order/order.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectOrdersError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/order/order.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectOrdersLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/order/order.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectOrderState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/order/order.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OrderState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/order/order.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialOrderState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/product/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProductActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/product/product.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductEffects",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/store/product/product.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/product/product.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/product/product.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProductFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/product/product.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProductPagination",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/product/product.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProductsError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/product/product.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProductsLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/product/product.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProductState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/product/product.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/product/product.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductState",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/store/product/product.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialProductState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/stock/stock.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StockActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/stock/stock.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StockEffects",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/store/stock/stock.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stockReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/stock/stock.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllStockItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/stock/stock.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLowStockAlerts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/stock/stock.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectOutOfStockAlerts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/stock/stock.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectStockError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/stock/stock.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectStockForProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/stock/stock.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectStockLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/stock/stock.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectStockState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/stock/stock.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StockState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/stock/stock.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialStockState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}