// _layout-system.scss

// Import spacing variables
@use 'spacing-system' as spacing;

// Breakpoints - follows common device categories
// Using em units which accounts for user font-size preferences
$breakpoints: (
    xs: 0,
    sm: 36em,
    // ~576px
    md: 48em,
    // ~768px
    lg: 62em,
    // ~992px
    xl: 75em,
    // ~1200px
    2xl: 87.5em // ~1400px
);

// Container widths per breakpoint
$container-max-widths: (
    sm: 540px,
    md: 720px,
    lg: 960px,
    xl: 1140px,
    2xl: 1320px
);

// Grid columns configuration
$grid-columns: 12;
$grid-gutter-width: var(--spacing-4); // 16px

// Layout constants
$header-z-index: var(--z-fixed);
$sidebar-z-index: var(--z-fixed);
$content-z-index: var(--z-base);

// Responsive layout breakpoint
$mobile-breakpoint: map-get($breakpoints, md);
$sidebar-collapsed-breakpoint: map-get($breakpoints, lg);

// Generate CSS custom properties for breakpoints
:root {
    @each $name, $value in $breakpoints {
        --breakpoint-#{$name}: #{$value};
    }
}

// Mixin for media queries
@mixin media-breakpoint-up($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    }

    @else {
        @media (min-width: $breakpoint) {
            @content;
        }
    }
}

@mixin media-breakpoint-down($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        @media (max-width: map-get($breakpoints, $breakpoint) - 0.1em) {
            @content;
        }
    }

    @else {
        @media (max-width: $breakpoint - 0.1em) {
            @content;
        }
    }
}

// Base grid system
.grid {
    display: grid;
    gap: $grid-gutter-width;
}

// Column-based grid utilities
.grid-cols-1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
}

.grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
}

.grid-cols-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
}

.grid-cols-4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
}

.grid-cols-5 {
    grid-template-columns: repeat(5, minmax(0, 1fr));
}

.grid-cols-6 {
    grid-template-columns: repeat(6, minmax(0, 1fr));
}

.grid-cols-12 {
    grid-template-columns: repeat(12, minmax(0, 1fr));
}

// Responsive grid columns
@each $breakpoint, $value in $breakpoints {
    @include media-breakpoint-up($breakpoint) {
        .grid-cols-#{$breakpoint}-1 {
            grid-template-columns: repeat(1, minmax(0, 1fr));
        }

        .grid-cols-#{$breakpoint}-2 {
            grid-template-columns: repeat(2, minmax(0, 1fr));
        }

        .grid-cols-#{$breakpoint}-3 {
            grid-template-columns: repeat(3, minmax(0, 1fr));
        }

        .grid-cols-#{$breakpoint}-4 {
            grid-template-columns: repeat(4, minmax(0, 1fr));
        }

        .grid-cols-#{$breakpoint}-6 {
            grid-template-columns: repeat(6, minmax(0, 1fr));
        }

        .grid-cols-#{$breakpoint}-12 {
            grid-template-columns: repeat(12, minmax(0, 1fr));
        }
    }
}

// Grid column span utilities
.col-span-1 {
    grid-column: span 1 / span 1;
}

.col-span-2 {
    grid-column: span 2 / span 2;
}

.col-span-3 {
    grid-column: span 3 / span 3;
}

.col-span-4 {
    grid-column: span 4 / span 4;
}

.col-span-5 {
    grid-column: span 5 / span 5;
}

.col-span-6 {
    grid-column: span 6 / span 6;
}

.col-span-7 {
    grid-column: span 7 / span 7;
}

.col-span-8 {
    grid-column: span 8 / span 8;
}

.col-span-9 {
    grid-column: span 9 / span 9;
}

.col-span-10 {
    grid-column: span 10 / span 10;
}

.col-span-11 {
    grid-column: span 11 / span 11;
}

.col-span-12 {
    grid-column: span 12 / span 12;
}

.col-span-full {
    grid-column: 1 / -1;
}

// Responsive column spans
@each $breakpoint, $value in $breakpoints {
    @include media-breakpoint-up($breakpoint) {
        .col-#{$breakpoint}-span-1 {
            grid-column: span 1 / span 1;
        }

        .col-#{$breakpoint}-span-2 {
            grid-column: span 2 / span 2;
        }

        .col-#{$breakpoint}-span-3 {
            grid-column: span 3 / span 3;
        }

        .col-#{$breakpoint}-span-4 {
            grid-column: span 4 / span 4;
        }

        .col-#{$breakpoint}-span-6 {
            grid-column: span 6 / span 6;
        }

        .col-#{$breakpoint}-span-12 {
            grid-column: span 12 / span 12;
        }

        .col-#{$breakpoint}-span-full {
            grid-column: 1 / -1;
        }
    }
}

// Flexbox layout utilities
.flex {
    display: flex;
}

.inline-flex {
    display: inline-flex;
}

.flex-row {
    flex-direction: row;
}

.flex-row-reverse {
    flex-direction: row-reverse;
}

.flex-col {
    flex-direction: column;
}

.flex-col-reverse {
    flex-direction: column-reverse;
}

.flex-wrap {
    flex-wrap: wrap;
}

.flex-nowrap {
    flex-wrap: nowrap;
}

.items-start {
    align-items: flex-start;
}

.items-center {
    align-items: center;
}

.items-end {
    align-items: flex-end;
}

.items-stretch {
    align-items: stretch;
}

.justify-start {
    justify-content: flex-start;
}

.justify-center {
    justify-content: center;
}

.justify-end {
    justify-content: flex-end;
}

.justify-between {
    justify-content: space-between;
}

.justify-around {
    justify-content: space-around;
}

.justify-evenly {
    justify-content: space-evenly;
}

.flex-1 {
    flex: 1 1 0%;
}

.flex-auto {
    flex: 1 1 auto;
}

.flex-initial {
    flex: 0 1 auto;
}

.flex-none {
    flex: none;
}

.flex-grow {
    flex-grow: 1;
}

.flex-shrink {
    flex-shrink: 1;
}

.flex-grow-0 {
    flex-grow: 0;
}

.flex-shrink-0 {
    flex-shrink: 0;
}

// Main application layout styles
.layout-container {
    display: flex;
    min-height: 100vh;
    background-color: var(--color-bg-primary);

    // Handle sidebar states
    &.sidebar-expanded {
        .sidebar {
            width: var(--sidebar-width-expanded);
        }

        .main-content {
            margin-left: var(--sidebar-width-expanded);
        }
    }

    &.sidebar-collapsed {
        .sidebar {
            width: var(--sidebar-width-collapsed);
        }

        .main-content {
            margin-left: var(--sidebar-width-collapsed);
        }
    }

    @include media-breakpoint-down(md) {
        flex-direction: column;

        .sidebar {
            width: 100%;
            height: auto;
            position: relative;
        }

        .main-content {
            margin-left: 0;
            padding-bottom: 72px; // Space for mobile nav
        }
    }
}

// Sidebar layout
.sidebar {
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    width: var(--sidebar-width-expanded);
    background-color: var(--color-bg-secondary);
    z-index: $sidebar-z-index;
    display: flex;
    flex-direction: column;
    transition: width 0.3s ease;
    overflow-x: hidden;
    overflow-y: auto;

    // Prevent scrollbar from affecting width
    scrollbar-width: thin;
    scrollbar-color: var(--color-border-subtle) transparent;

    &::-webkit-scrollbar {
        width: 6px;
    }

    &::-webkit-scrollbar-track {
        background: transparent;
    }

    &::-webkit-scrollbar-thumb {
        background-color: var(--color-border-subtle);
        border-radius: 3px;
    }

    // Mobile view
    @include media-breakpoint-down(md) {
        position: relative;
        height: auto;
        width: 100%;
        flex-shrink: 0;
    }
}

// Main content area
.main-content {
    flex: 1;
    margin-left: var(--sidebar-width-expanded);
    transition: margin-left 0.3s ease;
    overflow-x: hidden;
    padding: var(--spacing-6);

    @include media-breakpoint-down(lg) {
        padding: var(--spacing-4);
    }

    @include media-breakpoint-down(md) {
        margin-left: 0;
    }
}

// Card layout component
.card {
    background-color: var(--color-bg-surface);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-md);
    overflow: hidden;

    .card-header {
        padding: var(--spacing-4) var(--spacing-6);
        border-bottom: 1px solid var(--color-border-subtle);
        display: flex;
        align-items: center;
        justify-content: space-between;

        h2,
        h3,
        h4 {
            margin-bottom: 0;
        }
    }

    .card-body {
        padding: var(--spacing-6);

        @include media-breakpoint-down(md) {
            padding: var(--spacing-4);
        }
    }

    .card-footer {
        padding: var(--spacing-4) var(--spacing-6);
        border-top: 1px solid var(--color-border-subtle);
    }
}

// Page layout for consistent page headers and content areas
.page-container {
    max-width: 100%;

    .page-header {
        margin-bottom: var(--spacing-6);

        h1 {
            margin-bottom: var(--spacing-2);
        }

        .page-description {
            color: var(--color-text-secondary);
        }

        .page-actions {
            margin-top: var(--spacing-4);
            display: flex;
            gap: var(--spacing-3);

            @include media-breakpoint-up(md) {
                margin-top: 0;
                margin-left: auto;
            }
        }

        @include media-breakpoint-up(md) {
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
        }
    }

    .page-content {
        margin-bottom: var(--spacing-8);
    }
}

// Content section patterns for common admin layouts
.content-section {
    margin-bottom: var(--spacing-8);

    .section-header {
        margin-bottom: var(--spacing-4);

        h2 {
            margin-bottom: var(--spacing-2);
        }

        .section-description {
            color: var(--color-text-secondary);
        }
    }
}

// Grid layouts for dashboard widgets
.widget-grid {
    display: grid;
    gap: var(--spacing-6);
    grid-template-columns: repeat(1, 1fr);

    @include media-breakpoint-up(md) {
        grid-template-columns: repeat(2, 1fr);
    }

    @include media-breakpoint-up(lg) {
        grid-template-columns: repeat(3, 1fr);
    }

    @include media-breakpoint-up(xl) {
        grid-template-columns: repeat(4, 1fr);
    }
}

// Split layouts (for forms, details, etc.)
.split-layout {
    display: grid;
    gap: var(--spacing-6);
    grid-template-columns: 1fr;

    @include media-breakpoint-up(lg) {
        grid-template-columns: 1fr 1fr;
    }
}

// Thirds layout (sidebar + main content + details panel)
.thirds-layout {
    display: grid;
    gap: var(--spacing-6);
    grid-template-columns: 1fr;
    grid-template-areas:
        "sidebar"
        "main"
        "details";

    @include media-breakpoint-up(lg) {
        grid-template-columns: 300px 1fr;
        grid-template-areas:
            "sidebar main"
            "sidebar details";
    }

    @include media-breakpoint-up(xl) {
        grid-template-columns: 300px 1fr 300px;
        grid-template-areas: "sidebar main details";
    }

    .thirds-sidebar {
        grid-area: sidebar;
    }

    .thirds-main {
        grid-area: main;
    }

    .thirds-details {
        grid-area: details;
    }
}

// Table container with proper overflow handling
.table-container {
    width: 100%;
    overflow-x: auto;
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-md);

    table {
        width: 100%;
        min-width: 100%;
        border-collapse: separate;
        border-spacing: 0;
    }
}

// Container max-width at each breakpoint
.container {
    width: 100%;
    margin-right: auto;
    margin-left: auto;
    padding-right: var(--spacing-4);
    padding-left: var(--spacing-4);

    @each $breakpoint, $width in $container-max-widths {
        @include media-breakpoint-up($breakpoint) {
            max-width: $width;
        }
    }
}